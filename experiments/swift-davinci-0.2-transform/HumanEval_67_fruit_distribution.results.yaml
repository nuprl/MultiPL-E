language: swift
name: HumanEval_67_fruit_distribution
results:
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apples = Int(arr[0])!\n    let oranges = Int(arr[2])!\n    return n\
    \ - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpum5wx8cn/tmpum5wx8cn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d84e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d84b66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d84b66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d84b6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d84b65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpum5wx8cn                        0x000055e504246eaa <unavailable> + 7850

    6    tmpum5wx8cn                        0x000055e5042465fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d8505b460 __libc_start_main +
    245

    8    tmpum5wx8cn                        0x000055e5042462f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var totalFruits = 0\n    var totalApples\
    \ = 0\n    var totalOranges = 0\n    var totalMangoes = 0\n    var totalFruitsInBasket\
    \ = 0\n    var totalApplesInBasket = 0\n    var totalOrangesInBasket = 0\n   \
    \ var totalMangoesInBasket = 0\n    var totalFruitsInBasketString = \"\"\n   \
    \ var totalApplesInBasketString = \"\"\n    var totalOrangesInBasketString = \"\
    \"\n    var totalMangoesInBasketString = \"\"\n    var totalFruitsString = \"\"\
    \n    var totalApplesString = \"\"\n    var totalOrangesString = \"\"\n    var\
    \ totalMangoesString = \"\"\n    var totalFruitsInBasketArray = [Character]()\n\
    \    var totalApplesInBasketArray = [Character]()\n    var totalOrangesInBasketArray\
    \ = [Character]()\n    var totalMangoesInBasketArray = [Character]()\n    var\
    \ totalFruitsArray = [Character]()\n    var totalApplesArray = [Character]()\n\
    \    var totalOrangesArray = [Character]()\n    var totalMangoesArray = [Character]()\n\
    \    var totalFruitsInBasketArrayInt = [Int]()\n    var totalApplesInBasketArrayInt\
    \ = [Int]()\n    var totalOrangesInBasketArrayInt = [Int]()\n    var totalMangoesInBasketArrayInt\
    \ = [Int]()\n    var totalFruitsArrayInt = [Int]()\n    var totalApplesArrayInt\
    \ = [Int]()\n    var totalOrangesArrayInt = [Int]()\n    var totalMangoesArrayInt\
    \ = [Int]()\n    var totalFruitsInBasketInt = 0\n    var totalApplesInBasketInt\
    \ = 0\n    var totalOrangesInBasketInt = 0\n    var totalMangoesInBasketInt =\
    \ 0\n    var totalFruitsInt = 0\n    var totalApplesInt = 0\n    var totalOrangesInt\
    \ = 0\n    var totalMangoesInt = 0\n    var totalFruitsInBasketStringArray = [String]()\n\
    \    var totalApplesInBasketStringArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpekytznwo.swift:59:9: error: type annotation missing in pattern\n\
    \    var totalApplesInBasketStringArray\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num1 = Int(arr[0])!\n\
    \    let num2 = Int(arr[3])!\n    return n - num1 - num2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_basket_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array = [String]()\n    var total_fruits_in_basket_string_array_count\
    \ = 0\n    var total_fruits_in_basket_string_array_count_string = \"\"\n    var\
    \ total_fruits_in_basket_string_array_count_string_array = [String]()\n    var\
    \ total_fruits_in_basket_string_array_count_string_array_count = 0\n    var total_fruits_in_basket_string_array_count_string_array_count_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array\
    \ = [String]()\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array\
    \ = [String]()\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array_count\
    \ = 0\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array_count_string\
    \ = \"\"\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array_count_string_array\
    \ = [String]()\n    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array_count_string_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpchr0vw1_.swift:36:9: error: type annotation missing in pattern\n\
    \    var total_fruits_in_basket_string_array_count_string_array_count_string_array_count_string_array_count_string_array\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var temp = \"\"\n    for i in s {\n        if i == \" \" {\n            if temp\
    \ == \"apples\" {\n                apples = Int(s.components(separatedBy: \" \"\
    )[0])!\n            } else if temp == \"oranges\" {\n                oranges =\
    \ Int(s.components(separatedBy: \" \")[2])!\n            }\n            temp =\
    \ \"\"\n        } else {\n            temp += String(i)\n        }\n    }\n  \
    \  mangoes = n - apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpztjqgyes.swift:24:32: error: value of type 'String' has no member\
    \ 'components'\n                apples = Int(s.components(separatedBy: \" \")[0])!\n\
    \                             ~ ^~~~~~~~~~\n/tmp/tmpztjqgyes.swift:26:33: error:\
    \ value of type 'String' has no member 'components'\n                oranges =\
    \ Int(s.components(separatedBy: \" \")[2])!\n                              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let str = s.split(separator: \" \"\
    )\n    let apple = Int(str[0])!\n    let orange = Int(str[3])!\n    return n -\
    \ apple - orange\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var count = 0\n    var fruits = s.components(separatedBy: \" \"\
    )\n    var apples = Int(fruits[0])!\n    var oranges = Int(fruits[2])!\n    count\
    \ = n - apples - oranges\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpze9tzqeo.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    var fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ arr = s.components(separatedBy: \" \")\n    for i in 0..<arr.count {\n     \
    \   if arr[i] == \"apples\" {\n            apple = Int(arr[i-1])!\n        }\n\
    \        if arr[i] == \"oranges\" {\n            orange = Int(arr[i-1])!\n   \
    \     }\n    }\n    mango = n - (apple + orange)\n    return mango\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmphcvawr5d.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var i = 0\n    var j = 0\n    while i < s.count {\n        if s[i] == \" \"\
    \ {\n            i += 1\n        }\n        if s[i] == \"a\" {\n            i\
    \ += 7\n            while s[i] != \" \" {\n                apples = apples * 10\
    \ + Int(s[i])!\n                i += 1\n            }\n        }\n        if s[i]\
    \ == \"o\" {\n            i += 8\n            while s[i] != \" \" {\n        \
    \        oranges = oranges * 10 + Int(s[i])!\n                i += 1\n       \
    \     }\n        }\n    }\n    mangoes = n - apples - oranges\n    return mangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmppevdtrpr.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmppevdtrpr.swift:26:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmppevdtrpr.swift:28:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppevdtrpr.swift:29:45:\
    \ error: no exact matches in call to subscript \n                apples = apples\
    \ * 10 + Int(s[i])!\n                                            ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\n/tmp/tmppevdtrpr.swift:33:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == \"o\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmppevdtrpr.swift:35:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangos = 0\n    var totalFruitsInBasket = 0\n    var totalApplesInBasket\
    \ = 0\n    var totalOrangesInBasket = 0\n    var totalMangosInBasket = 0\n   \
    \ var totalFruitsInBasketString = \"\"\n    var totalApplesInBasketString = \"\
    \"\n    var totalOrangesInBasketString = \"\"\n    var totalMangosInBasketString\
    \ = \"\"\n    var totalFruitsString = \"\"\n    var totalApplesString = \"\"\n\
    \    var totalOrangesString = \"\"\n    var totalMangosString = \"\"\n    var\
    \ totalFruitsArray = [Character]()\n    var totalApplesArray = [Character]()\n\
    \    var totalOrangesArray = [Character]()\n    var totalMangosArray = [Character]()\n\
    \    var totalFruitsInBasketArray = [Character]()\n    var totalApplesInBasketArray\
    \ = [Character]()\n    var totalOrangesInBasketArray = [Character]()\n    var\
    \ totalMangosInBasketArray = [Character]()\n    var totalFruitsInBasketStringArray\
    \ = [Character]()\n    var totalApplesInBasketStringArray = [Character]()\n  \
    \  var totalOrangesInBasketStringArray = [Character]()\n    var totalMangosInBasketStringArray\
    \ = [Character]()\n    var totalFruitsStringArray = [Character]()\n    var totalApplesStringArray\
    \ = [Character]()\n    var totalOrangesStringArray = [Character]()\n    var totalMangosStringArray\
    \ = [Character]()\n    var totalFruitsInBasketStringArrayReversed = [Character]()\n\
    \    var totalApplesInBasketStringArrayReversed = [Character]()\n    var totalOrangesInBasketStringArrayReversed\
    \ = [Character]()\n    var totalMangosInBasketStringArrayReversed = [Character]()\n\
    \    var totalFruitsStringArrayReversed = [Character]()\n    var totalApplesStringArrayReversed\
    \ = [Character]()\n    var totalOrangesStringArrayReversed\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpan7ijlpu.swift:55:9: error: type annotation missing in pattern\n\
    \    var totalOrangesStringArrayReversed\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var arr = s.split(separator: \" \")\n    for i in 0...arr.count-1\
    \ {\n        if arr[i] == \"apples\" {\n            apples = Int(arr[i-1])!\n\
    \        }\n        if arr[i] == \"oranges\" {\n            oranges = Int(arr[i-1])!\n\
    \        }\n    }\n    total = apples + oranges\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    let a = Int(s[0])!\n    let o = Int(s[2])!\n    return n - a - o\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp7duvkawn/tmp7duvkawn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab414bf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4148ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4148ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4148ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4148eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7duvkawn                        0x000055bb18feff9a <unavailable> + 8090

    6    tmp7duvkawn                        0x000055bb18fef64b <unavailable> + 5707

    7    libc.so.6                          0x00002ab414de4460 __libc_start_main +
    245

    8    tmp7duvkawn                        0x000055bb18fef349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    s = s.replacingOccurrences(of: \"apples\", with:\
    \ \"\")\n    s = s.replacingOccurrences(of: \"oranges\", with: \"\")\n    s =\
    \ s.replacingOccurrences(of: \"and\", with: \"\")\n    s = s.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let arr = s.components(separatedBy: \",\")\n    let\
    \ sum = Int(arr[0])! + Int(arr[1])!\n    return n - sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmptze582ki.swift:18:11: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    s = s.replacingOccurrences(of: \"apples\", with:\
    \ \"\")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmptze582ki.swift:19:11: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n    s = s.replacingOccurrences(of:\
    \ \"oranges\", with: \"\")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmptze582ki.swift:20:11:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    s =\
    \ s.replacingOccurrences(of: \"and\", with: \"\")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptze582ki.swift:21:11: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \    s = s.replacingOccurrences(of: \" \", with: \"\")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptze582ki.swift:22:17: error: value of type 'String' has no member 'components'\n\
    \    let arr = s.components(separatedBy: \",\")\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let totalApples =\
    \ Int(fruits[0])!\n    let totalOranges = Int(fruits[2])!\n    let totalFruits\
    \ = totalApples + totalOranges\n    return n - totalFruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpqnhr6s9z/tmpqnhr6s9z.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af358791c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af358488561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af358488286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af35848813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af358487bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqnhr6s9z                        0x0000556f67e26ebd <unavailable> + 7869

    6    tmpqnhr6s9z                        0x0000556f67e265fb <unavailable> + 5627

    7    libc.so.6                          0x00002af35897d460 __libc_start_main +
    245

    8    tmpqnhr6s9z                        0x0000556f67e262f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let numApples\
    \ = Int(fruits[0])!\n    let numOranges = Int(fruits[2])!\n    return n - numApples\
    \ - numOranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp35ziorr4.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.replacingOccurrences(of: \"apples\", with: \"\")\n \
    \   let s = s.replacingOccurrences(of: \"oranges\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"and\", with: \"\")\n    let s = s.replacingOccurrences(of: \" \", with: \"\
    \")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"1\", with: \"\")\n    let s = s.replacingOccurrences(of: \"2\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"3\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"4\", with: \"\")\n    let s = s.replacingOccurrences(of: \"5\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"6\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"7\", with: \"\")\n    let s = s.replacingOccurrences(of: \"8\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"9\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s = s.replacingOccurrences(of:\
    \ \"0\", with: \"\")\n    let s = s.replacingOccurrences(of: \"0\", with: \"\"\
    )\n    let s = s.replacingOccurrences(of: \"0\", with: \"\")\n    let s =\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpfkqpa3v6.swift:40:12: error: expected initial value after '='\n\
    \    let s =\n           ^\n/tmp/tmpfkqpa3v6.swift:17:15: error: value of type\
    \ 'String' has no member 'replacingOccurrences'\n    let s = s.replacingOccurrences(of:\
    \ \"apples\", with: \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let num_apples\
    \ = Int(arr[0])!\n    let num_oranges = Int(arr[2])!\n    return n - num_apples\
    \ - num_oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpc189wgwk.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let numOfApples = Int(arr[0])!\n    let numOfOranges = Int(arr[2])!\n \
    \   return n - numOfApples - numOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpz4sps2j5/tmpz4sps2j5.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af7cd0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7ccdb3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7ccdb3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7ccdb313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7ccdb2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz4sps2j5                        0x00005625d7576eaa <unavailable> + 7850

    6    tmpz4sps2j5                        0x00005625d75765fb <unavailable> + 5627

    7    libc.so.6                          0x00002af7cd2a8460 __libc_start_main +
    245

    8    tmpz4sps2j5                        0x00005625d75762f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n\
    \    var ff = 0\n    var gg = 0\n    var hh = 0\n    var ii = 0\n    var jj =\
    \ 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n    var nn = 0\n    var oo\
    \ = 0\n    var pp = 0\n    var qq = 0\n    var rr = 0\n    var ss = 0\n    var\
    \ tt = 0\n    var uu = 0\n    var vv = 0\n    var ww = 0\n    var xx = 0\n   \
    \ var yy = 0\n    var zz = 0\n    var aaa = 0\n    var bbb = 0\n    var ccc =\
    \ 0\n    var ddd = 0\n    var eee = 0\n    var fff = 0\n    var ggg = 0\n    var\
    \ hhh = 0\n    var iii = 0\n    var jjj = 0\n    var kkk = 0\n    var lll = 0\n\
    \    var mmm = 0\n    var nnn = 0\n    var ooo = 0\n    var ppp = 0\n    var qqq\
    \ = 0\n    var rrr = 0\n    var sss = 0\n    var ttt = 0\n    var uuu = 0\n  \
    \  var vvv = 0\n    var www = 0\n    var xxx =\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmph51aiawo.swift:95:14: error: expected initial value after '='\n\
    \    var xxx =\n             ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    s = s.replacingOccurrences(of: \" apples and \"\
    , with: \" \")\n    s = s.replacingOccurrences(of: \" oranges\", with: \"\")\n\
    \    let arr = s.components(separatedBy: \" \")\n    let a = Int(arr[0])!\n  \
    \  let o = Int(arr[1])!\n    let m = n - a - o\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpa5vjkd22.swift:18:11: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    s = s.replacingOccurrences(of: \" apples and \"\
    , with: \" \")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa5vjkd22.swift:19:11:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    s =\
    \ s.replacingOccurrences(of: \" oranges\", with: \"\")\n        ~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpa5vjkd22.swift:20:17: error: value of type 'String' has no member 'components'\n\
    \    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var temp = \"\"\n    for i in s {\n        if i == \" \" {\n\
    \            if temp == \"apples\" {\n                apples = Int(temp)!\n  \
    \          } else if temp == \"oranges\" {\n                oranges = Int(temp)!\n\
    \            }\n            temp = \"\"\n        } else {\n            temp +=\
    \ String(i)\n        }\n    }\n    mango = n - apples - oranges\n    return mango\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpp51g1goa/tmpp51g1goa.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b201e2c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b201e2c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b201e2c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp51g1goa                        0x000055c01c91ae27 <unavailable> + 7719

    6    tmpp51g1goa                        0x000055c01c91a5db <unavailable> + 5595

    7    libc.so.6                          0x00002b201e7ba460 __libc_start_main +
    245

    8    tmpp51g1goa                        0x000055c01c91a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.components(separatedBy: \" \")\n    let a = Int(s[0])!\n\
    \    let o = Int(s[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpzj9jfowm.swift:17:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let s = s.split(separator: \" \"\
    )\n    let apples = Int(s[0])!\n    let oranges = Int(s[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpqm5ldhph/tmpqm5ldhph.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a58f6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a58c66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1a58c66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1a58c6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1a58c65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqm5ldhph                        0x000055d0aa9aeeaa <unavailable> + 7850

    6    tmpqm5ldhph                        0x000055d0aa9ae5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b1a5915b460 __libc_start_main +
    245

    8    tmpqm5ldhph                        0x000055d0aa9ae2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsj1fbkez/tmpsj1fbkez.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a4bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a48d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a48d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a48d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj1fbkez                        0x00005555a8246269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab8a4dc9460 __libc_start_main +
    245

    6    tmpsj1fbkez                        0x00005555a8245ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_apples_and_oranges = 0\n    var\
    \ total_apples_and_oranges_and_mangoes = 0\n    var total_apples_and_oranges_and_mangoes_and_fruits\
    \ = 0\n    var total_mangoes_and_fruits = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits = 0\n\
    \    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes_and_fruits\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes_and_fruits_and_apples_and_oranges\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes_and_fruits_and_apples_and_oranges_and_mangoes\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes_and_fruits_and_apples_and_oranges_and_mangoes_and_fruits\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_fruits_and_mangoes_and_fruits_and_apples_and_oranges_and_mangoes_and_fruits_and_apples_and_oranges\
    \ = 0\n    var total_mangoes_and_fruits_and_apples_and_oranges_and_f\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp9do7uind.swift:33:9: error: type annotation missing in pattern\n\
    \    var total_mangoes_and_fruits_and_apples_and_oranges_and_f\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apple = Int(arr[0])!\n    let orange = Int(arr[2])!\n    return n -\
    \ apple - orange\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpdgrmdmmk/tmpdgrmdmmk.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7462e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7462b0c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7462b0c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7462b0c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7462b0bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdgrmdmmk                        0x0000558ce263ceaa <unavailable> + 7850

    6    tmpdgrmdmmk                        0x0000558ce263c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b7463001460 __libc_start_main +
    245

    8    tmpdgrmdmmk                        0x0000558ce263c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let fruits = s.components(separatedBy:\
    \ \" and \")\n    let apples = Int(fruits[0].components(separatedBy: \" \")[0])!\n\
    \    let oranges = Int(fruits[1].components(separatedBy: \" \")[0])!\n    return\
    \ n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpe6i7m30u.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var apple = 0\n\
    \    var orange = 0\n    var mango = 0\n    var index = 0\n    var index2 = 0\n\
    \    for i in s {\n        if i == \" \" {\n            index = s.index(of: i)!\n\
    \            break\n        }\n    }\n    for i in s {\n        if i == \" \"\
    \ {\n            index2 = s.index(of: i)!\n            break\n        }\n    }\n\
    \    for i in s {\n        if i == \" \" {\n            index2 = s.index(of: i)!\n\
    \            break\n        }\n    }\n    let appleString = s[s.startIndex..<index]\n\
    \    let orangeString = s[s.index(after: index)..<index2]\n    let appleInt =\
    \ Int(appleString)!\n    let orangeInt = Int(orangeString)!\n    total = appleInt\
    \ + orangeInt\n    mango = n - total\n    return mango\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3v6gxvih.swift:26:35: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            index = s.index(of: i)!\n                    ~~~~~~~~~~~~~~^\n\
    /tmp/tmp3v6gxvih.swift:32:36: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            index2 = s.index(of: i)!\n                     ~~~~~~~~~~~~~~^\n\
    /tmp/tmp3v6gxvih.swift:38:36: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            index2 = s.index(of: i)!\n                     ~~~~~~~~~~~~~~^\n\
    /tmp/tmp3v6gxvih.swift:42:40: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String.Index'\n    let appleString = s[s.startIndex..<index]\n\
    \                                       ^\n/tmp/tmp3v6gxvih.swift:43:41: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \    let orangeString = s[s.index(after: index)..<index2]\n                  \
    \                      ^\n/tmp/tmp3v6gxvih.swift:43:50: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String.Index'\n    let orangeString\
    \ = s[s.index(after: index)..<index2]\n                                      \
    \           ^\n/tmp/tmp3v6gxvih.swift:46:22: error: cannot assign value of type\
    \ 'String' to type 'Int'\n    total = appleInt + orangeInt\n            ~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ arr = s.split(separator: \" \")\n    for i in 0..<arr.count {\n        if arr[i]\
    \ == \"apples\" {\n            apple = Int(arr[i-1])!\n        } else if arr[i]\
    \ == \"oranges\" {\n            orange = Int(arr[i-1])!\n        }\n    }\n  \
    \  mango = n - (apple + orange)\n    return mango\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var sum = 0\n    var arr = s.split(separator:\
    \ \" \")\n    for i in 0...arr.count-1{\n        if arr[i] == \"apples\" || arr[i]\
    \ == \"oranges\"{\n            sum += Int(arr[i-1])!\n        }\n    }\n    return\
    \ n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpks6cctzx/tmpks6cctzx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34e34d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34e31cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34e31cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34e31cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks6cctzx                        0x000055f189d27269 <unavailable> + 4713

    5    libc.so.6                          0x00002b34e36c2460 __libc_start_main +
    245

    6    tmpks6cctzx                        0x000055f189d26ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let str = s.split(separator: \" \")\n    let apples = Int(str[0])!\n\
    \    let oranges = Int(str[3])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    let fruits = s.components(separatedBy:\
    \ \" \")\n    let apples = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n\
    \    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpg8c6sud9.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    while i < s.count {\n        if s[i] == \"a\" {\n            while\
    \ s[i] != \" \" {\n                i += 1\n            }\n            i += 1\n\
    \            while s[i] != \" \" {\n                apple = apple * 10 + Int(String(s[i]))!\n\
    \                i += 1\n            }\n        }\n        else if s[i] == \"\
    o\" {\n            while s[i] != \" \" {\n                i += 1\n           \
    \ }\n            i += 1\n            while s[i] != \" \" {\n                orange\
    \ = orange * 10 + Int(String(s[i]))!\n                i += 1\n            }\n\
    \        }\n        i += 1\n    }\n    mango = n - apple - orange\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpaloh65ir.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpaloh65ir.swift:23:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaloh65ir.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[i] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpaloh65ir.swift:28:49: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       apple = apple * 10 + Int(String(s[i]))!\n                            \
    \                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpaloh65ir.swift:32:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        else\
    \ if s[i] == \"o\" {\n                ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpaloh65ir.swift:33:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n   "
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num_apples = Int(arr[0])!\n\
    \    let num_oranges = Int(arr[2])!\n    return n - num_apples - num_oranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp_0p24u5v/tmp_0p24u5v.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afb68f17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb68c0e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afb68c0e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afb68c0e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afb68c0dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_0p24u5v                        0x000055b27cd1beaa <unavailable> + 7850

    6    tmp_0p24u5v                        0x000055b27cd1b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002afb69103460 __libc_start_main +
    245

    8    tmp_0p24u5v                        0x000055b27cd1b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apple = Int(arr[0])!\n\
    \    let orange = Int(arr[3])!\n    return n - apple - orange\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var sArr = s.split(separator: \"\
    \ \")\n    var numApples = Int(sArr[0])!\n    var numOranges = Int(sArr[2])!\n\
    \    var numMangoes = n - numApples - numOranges\n    return numMangoes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp2p3wewaz/tmp2p3wewaz.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ecef05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ecebfc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ecebfc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ecebfc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ecebfbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2p3wewaz                        0x000055c314353faa <unavailable> + 8106

    6    tmp2p3wewaz                        0x000055c31435364b <unavailable> + 5707

    7    libc.so.6                          0x00002b1ecf0f1460 __libc_start_main +
    245

    8    tmp2p3wewaz                        0x000055c314353349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ total = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \" \"\
    \ {\n            i += 1\n        } else if s[i] == \"a\" {\n            i += 1\n\
    \            while s[i] != \" \" {\n                apple = apple * 10 + Int(s[i])!\n\
    \                i += 1\n            }\n        } else if s[i] == \"o\" {\n  \
    \          i += 1\n            while s[i] != \" \" {\n                orange =\
    \ orange * 10 + Int(s[i])!\n                i += 1\n            }\n        }\n\
    \    }\n    total = apple + orange\n    mango = n - total\n    return mango\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpsrscy6cd.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpsrscy6cd.swift:25:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsrscy6cd.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[i] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpsrscy6cd.swift:28:43: error: no exact matches in call to subscript\
    \ \n                apple = apple * 10 + Int(s[i])!\n                        \
    \                  ^\nSwift.String:3:12: note: candidate expects value of type\
    \ 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpsrscy6cd.swift:31:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s[i] == \"o\" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpsrscy6cd.swift:33:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instea"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    var arr = s.split(separator: \" \")\n    for\
    \ i in 0...arr.count-1 {\n        if i % 2 == 0 {\n            sum += Int(arr[i])!\n\
    \        }\n    }\n    return n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpszdp5k1r/tmpszdp5k1r.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6929119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6928e10561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6928e10286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6928e1013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6928e0fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpszdp5k1r                        0x000055dc54808146 <unavailable> + 8518

    6    tmpszdp5k1r                        0x000055dc5480774b <unavailable> + 5963

    7    libc.so.6                          0x00002b6929305460 __libc_start_main +
    245

    8    tmpszdp5k1r                        0x000055dc54807449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num = Int(arr[0])!\
    \ + Int(arr[2])!\n    return n - num\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp2fi83smh/tmp2fi83smh.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e9d0e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e9cddf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e9cddf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e9cddf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e9cddebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2fi83smh                        0x0000564c6b692e90 <unavailable> + 7824

    6    tmp2fi83smh                        0x0000564c6b6925fb <unavailable> + 5627

    7    libc.so.6                          0x00002b8e9d2d4460 __libc_start_main +
    245

    8    tmp2fi83smh                        0x0000564c6b6922f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    let str = s.split(separator: \" \"\
    )\n    let num = Int(str[0])! + Int(str[2])!\n    return n - num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpv5nmnfxa/tmpv5nmnfxa.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e8a8f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e8a5ee561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7e8a5ee286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7e8a5ee13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7e8a5edbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv5nmnfxa                        0x000055e5a843be90 <unavailable> + 7824

    6    tmpv5nmnfxa                        0x000055e5a843b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b7e8aae3460 __libc_start_main +
    245

    8    tmpv5nmnfxa                        0x000055e5a843b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangos = 0\n    var totalFruitsString = \"\"\n    var totalApplesString\
    \ = \"\"\n    var totalOrangesString = \"\"\n    var totalMangosString = \"\"\n\
    \    var totalFruitsStringArray = [String]()\n    var totalApplesStringArray =\
    \ [String]()\n    var totalOrangesStringArray = [String]()\n    var totalMangosStringArray\
    \ = [String]()\n    var totalFruitsArray = [Int]()\n    var totalApplesArray =\
    \ [Int]()\n    var totalOrangesArray = [Int]()\n    var totalMangosArray = [Int]()\n\
    \    var totalFruitsStringArray2 = [String]()\n    var totalApplesStringArray2\
    \ = [String]()\n    var totalOrangesStringArray2 = [String]()\n    var totalMangosStringArray2\
    \ = [String]()\n    var totalFruitsArray2 = [Int]()\n    var totalApplesArray2\
    \ = [Int]()\n    var totalOrangesArray2 = [Int]()\n    var totalMangosArray2 =\
    \ [Int]()\n    var totalFruitsStringArray3 = [String]()\n    var totalApplesStringArray3\
    \ = [String]()\n    var totalOrangesStringArray3 = [String]()\n    var totalMangosStringArray3\
    \ = [String]()\n    var totalFruitsArray3 = [Int]()\n    var totalApplesArray3\
    \ = [Int]()\n    var totalOrangesArray3 = [Int]()\n    var totalMangosArray3 =\
    \ [Int]()\n    var totalFruitsStringArray4 = [String]()\n    var totalApplesStringArray4\
    \ = [String]()\n    var totalOrangesStringArray4 = [String]()\n    var totalMangosStringArray4\
    \ = [String]()\n    var totalFruitsArray4 = [Int]()\n    var totalApplesArray4\
    \ = [Int]()\n    var totalOrangesArray4 = [Int]()\n    var totalMangosArray4 =\
    \ [Int]()\n    var totalFruitsStringArray5 =\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnjo__8ku.swift:57:34: error: expected initial value after '='\n\
    \    var totalFruitsStringArray5 =\n                                 ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangos = 0\n    var totalFruitsInBasket = 0\n    var totalApplesInBasket\
    \ = 0\n    var totalOrangesInBasket = 0\n    var totalMangosInBasket = 0\n   \
    \ var totalFruitsInBasketString = \"\"\n    var totalApplesInBasketString = \"\
    \"\n    var totalOrangesInBasketString = \"\"\n    var totalMangosInBasketString\
    \ = \"\"\n    var totalFruitsString = \"\"\n    var totalApplesString = \"\"\n\
    \    var totalOrangesString = \"\"\n    var totalMangosString = \"\"\n    var\
    \ totalFruitsInBasketArray = [Character]()\n    var totalApplesInBasketArray =\
    \ [Character]()\n    var totalOrangesInBasketArray = [Character]()\n    var totalMangosInBasketArray\
    \ = [Character]()\n    var totalFruitsArray = [Character]()\n    var totalApplesArray\
    \ = [Character]()\n    var totalOrangesArray = [Character]()\n    var totalMangosArray\
    \ = [Character]()\n    var totalFruitsInBasketArrayInt = [Int]()\n    var totalApplesInBasketArrayInt\
    \ = [Int]()\n    var totalOrangesInBasketArrayInt = [Int]()\n    var totalMangosInBasketArrayInt\
    \ = [Int]()\n    var totalFruitsArrayInt = [Int]()\n    var totalApplesArrayInt\
    \ = [Int]()\n    var totalOrangesArrayInt = [Int]()\n    var totalMangosArrayInt\
    \ = [Int]()\n    var totalFruitsInBasketArrayIntSum = 0\n    var totalApplesInBasketArrayIntSum\
    \ = 0\n    var totalOrangesInBasketArrayIntSum = 0\n    var totalMangosInBasketArrayIntSum\
    \ = 0\n    var totalFruitsArrayIntSum = 0\n    var totalApplesArrayIntSum = 0\n\
    \    var totalOrangesArrayIntSum = 0\n    var totalMangosArrayIntSum = 0\n   \
    \ var totalFruitsInBasketStringArray = [String]()\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4xutuc62.swift:17:9: warning: initialization of variable 'totalFruits'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var totalFruits = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4xutuc62.swift:18:9:\
    \ warning: initialization of variable 'totalApples' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var totalApples = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xutuc62.swift:19:9: warning: initialization of variable 'totalOranges'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var totalOranges = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4xutuc62.swift:20:9:\
    \ warning: initialization of variable 'totalMangos' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var totalMangos = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xutuc62.swift:21:9: warning: initialization of variable 'totalFruitsInBasket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var totalFruitsInBasket = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4xutuc62.swift:22:9:\
    \ warning: initialization of variable 'totalApplesInBasket' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var totalApplesInBasket\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4xutuc62.swift:23:9: warning:\
    \ initialization of variable 'totalOrangesInBasket' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var totalOrangesInBasket = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4xutuc62.swift:24:9: warning: initialization\
    \ of variable 'totalMangosInBasket' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var totalMangosInBasket = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xutuc62.swift:25:9: warning: initialization of variable 'totalFruitsInBasketString'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var totalFruitsInBasketString = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xutuc62.swift:26:9: warning: initialization of variable 'totalApplesInBasket"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.split(separator: \" \")\n    var mangoes = n -\
    \ Int(fruits[0])! - Int(fruits[3])!\n    return mangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruit = \"\"\n    var number = \"\"\n \
    \   for char in s {\n        if char == \" \" {\n            if fruit == \"apples\"\
    \ {\n                total += Int(number)!\n            } else if fruit == \"\
    oranges\" {\n                total += Int(number)!\n            }\n          \
    \  fruit = \"\"\n            number = \"\"\n        } else if char == \"a\" {\n\
    \            fruit = \"apples\"\n        } else if char == \"o\" {\n         \
    \   fruit = \"oranges\"\n        } else {\n            number += String(char)\n\
    \        }\n    }\n    if fruit == \"apples\" {\n        total += Int(number)!\n\
    \    } else if fruit == \"oranges\" {\n        total += Int(number)!\n    }\n\
    \    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpj5vuklsw/tmpj5vuklsw.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aab353e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab350da561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab350da286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab350da13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab350d9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj5vuklsw                        0x000055b9d3da6e15 <unavailable> + 7701

    6    tmpj5vuklsw                        0x000055b9d3da65db <unavailable> + 5595

    7    libc.so.6                          0x00002aab355cf460 __libc_start_main +
    245

    8    tmpj5vuklsw                        0x000055b9d3da62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var n = n\n    var a = 0\n    var o = 0\n    var\
    \ m = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \" \" {\n\
    \            i += 1\n            continue\n        }\n        if s[i] == \"a\"\
    \ {\n            i += 1\n            var j = i\n            while j < s.count\
    \ {\n                if s[j] == \" \" {\n                    break\n         \
    \       }\n                j += 1\n            }\n            a = Int(s[i..<j])!\n\
    \            i = j\n        }\n        if s[i] == \"o\" {\n            i += 1\n\
    \            var j = i\n            while j < s.count {\n                if s[j]\
    \ == \" \" {\n                    break\n                }\n                j\
    \ += 1\n            }\n            o = Int(s[i..<j])!\n            i = j\n   \
    \     }\n        i += 1\n    }\n    m = n - a - o\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3mkxxpbk.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp3mkxxpbk.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp3mkxxpbk.swift:32:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[j] == \" \" {\n                   ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mkxxpbk.swift:37:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n            a = Int(s[i..<j])!\n \
    \                   ^~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript<R>(bounds: R) -> String\
    \ where R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmp3mkxxpbk.swift:40:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"o\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3mkxxpbk.swift:44:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[j] == \" \" {\n          \
    \         ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     "
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[3])!\n    let numOfMangoes = n - numOfApples -\
    \ numOfOranges\n    return numOfMangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_fruits = 0\n    var total_apples = 0\n    var total_oranges\
    \ = 0\n    var total_mangoes = 0\n    var total_fruits_in_basket = 0\n    var\
    \ total_apples_in_basket = 0\n    var total_oranges_in_basket = 0\n    var total_mangoes_in_basket\
    \ = 0\n    var total_fruits_in_string = 0\n    var total_apples_in_string = 0\n\
    \    var total_oranges_in_string = 0\n    var total_mangoes_in_string = 0\n  \
    \  var total_fruits_in_basket_in_string = 0\n    var total_apples_in_basket_in_string\
    \ = 0\n    var total_oranges_in_basket_in_string = 0\n    var total_mangoes_in_basket_in_string\
    \ = 0\n    var total_fruits_in_basket_in_string_in_int = 0\n    var total_apples_in_basket_in_string_in_int\
    \ = 0\n    var total_oranges_in_basket_in_string_in_int = 0\n    var total_mangoes_in_basket_in_string_in_int\
    \ = 0\n    var total_fruits_in_string_in_int = 0\n    var total_apples_in_string_in_int\
    \ = 0\n    var total_oranges_in_string_in_int = 0\n    var total_mangoes_in_string_in_int\
    \ = 0\n    var total_fruits_in_int = 0\n    var total_apples_in_int = 0\n    var\
    \ total_oranges_in_int = 0\n    var total_mangoes_in_int = 0\n    var total_fruits_in_basket_in_int\
    \ = 0\n    var total_apples_in_basket_in_int = 0\n    var total_oranges_in_basket_in_int\
    \ = 0\n    var total_mangoes_in_basket_in_int = 0\n    var total_fruits_\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1j2pi1_4.swift:49:9: error: type annotation missing in pattern\n\
    \    var total_fruits_\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[2])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp1cvogc4x/tmp1cvogc4x.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d333eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d330e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d330e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d330e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d330e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1cvogc4x                        0x000055d7dd5d3eaa <unavailable> + 7850

    6    tmp1cvogc4x                        0x000055d7dd5d35fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d335da460 __libc_start_main +
    245

    8    tmp1cvogc4x                        0x000055d7dd5d32f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_string\
    \ = \"\"\n    var total_fruits_in_string_array = [String]()\n    var total_fruits_in_string_array_count\
    \ = 0\n    var total_fruits_in_string_array_count_index = 0\n    var total_fruits_in_string_array_count_index_value\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string = \"\"\n\
    \    var total_fruits_in_string_array_count_index_value_string_array = [String]()\n\
    \    var total_fruits_in_string_array_count_index_value_string_array_count = 0\n\
    \    var total_fruits_in_string_array_count_index_value_string_array_count_index\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string\
    \ = \"\"\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string_array\
    \ = [String]()\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string_array_count\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string_array_count_index\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string_array_count_index_value\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_string_array_count_index_value_string\
    \ = \"\"\n    var total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpr0461byb.swift:38:9: error: type annotation missing in pattern\n\
    \    var total\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ sum = 0\n    var str = \"\"\n    for i in s {\n        if i != \" \" && i !=\
    \ \"a\" && i != \"n\" && i != \"d\" && i != \"o\" && i != \"r\" && i != \"e\"\
    \ && i != \"s\" {\n            str += String(i)\n        }\n    }\n    var arr\
    \ = str.split(separator: \"a\")\n    apple = Int(arr[0])!\n    arr = arr[1].split(separator:\
    \ \"o\")\n    orange = Int(arr[0])!\n    sum = apple + orange\n    mango = n -\
    \ sum\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpbg5tbh1r/tmpbg5tbh1r.swift:28: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1270805c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12704fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12704fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12704fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12704fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbg5tbh1r                        0x000055eb890cc86f <unavailable> + 10351

    6    tmpbg5tbh1r                        0x000055eb890cb83b <unavailable> + 6203

    7    libc.so.6                          0x00002b12709f1460 __libc_start_main +
    245

    8    tmpbg5tbh1r                        0x000055eb890cb539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    var sum = 0\n    var sum2 = 0\n \
    \   var sum3 = 0\n    var sum4 = 0\n    var sum5 = 0\n    var sum6 = 0\n    var\
    \ sum7 = 0\n    var sum8 = 0\n    var sum9 = 0\n    var sum10 = 0\n    var sum11\
    \ = 0\n    var sum12 = 0\n    var sum13 = 0\n    var sum14 = 0\n    var sum15\
    \ = 0\n    var sum16 = 0\n    var sum17 = 0\n    var sum18 = 0\n    var sum19\
    \ = 0\n    var sum20 = 0\n    var sum21 = 0\n    var sum22 = 0\n    var sum23\
    \ = 0\n    var sum24 = 0\n    var sum25 = 0\n    var sum26 = 0\n    var sum27\
    \ = 0\n    var sum28 = 0\n    var sum29 = 0\n    var sum30 = 0\n    var sum31\
    \ = 0\n    var sum32 = 0\n    var sum33 = 0\n    var sum34 = 0\n    var sum35\
    \ = 0\n    var sum36 = 0\n    var sum37 = 0\n    var sum38 = 0\n    var sum39\
    \ = 0\n    var sum40 = 0\n    var sum41 = 0\n    var sum42 = 0\n    var sum43\
    \ = 0\n    var sum44 = 0\n    var sum45 = 0\n    var sum46 = 0\n    var sum47\
    \ = 0\n    var sum48 = 0\n    var sum49 = 0\n    var sum50 = 0\n    var sum51\
    \ = 0\n    var sum52 = 0\n    var sum53 = 0\n    var sum54 = 0\n    var sum55\
    \ = 0\n    var sum56 = 0\n    var sum57 = 0\n    var sum58 = 0\n    var sum59\
    \ = 0\n    var sum60 = 0\n    var sum61 = 0\n    var sum62 = 0\n    var sum63\
    \ = 0\n    var sum64 = 0\n    var sum65 = 0\n    var sum66 = 0\n    var sum67\
    \ = 0\n    var sum68 = 0\n    var sum69 = 0\n    var sum70 = 0\n    var sum71\
    \ = 0\n    var sum72 = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmphmqj8x_r.swift:18:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmphmqj8x_r.swift:19:9: warning: initialization\
    \ of variable 'sum2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum2 = 0\n    ~~~~^~~~\n    _\n/tmp/tmphmqj8x_r.swift:20:9:\
    \ warning: initialization of variable 'sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum3 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmphmqj8x_r.swift:21:9: warning: initialization of variable 'sum4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum4\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmphmqj8x_r.swift:22:9: warning: initialization\
    \ of variable 'sum5' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum5 = 0\n    ~~~~^~~~\n    _\n/tmp/tmphmqj8x_r.swift:23:9:\
    \ warning: initialization of variable 'sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum6 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmphmqj8x_r.swift:24:9: warning: initialization of variable 'sum7' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum7\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmphmqj8x_r.swift:25:9: warning: initialization\
    \ of variable 'sum8' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum8 = 0\n    ~~~~^~~~\n    _\n/tmp/tmphmqj8x_r.swift:26:9:\
    \ warning: initialization of variable 'sum9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum9 = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmphmqj8x_r.swift:27:9: warning: initialization of variable 'sum10' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum10\
    \ = 0\n    ~~~~^~~~~\n    _\n/tmp/tmphmqj8x_r.swift:28:9: warning: initialization\
    \ of variable 'sum11' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum11 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmphmqj8x_r.swift:29:9:\
    \ warning: initialization o"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var totalFruit\
    \ = 0\n    var totalApple = 0\n    var totalOrange = 0\n    for i in s {\n   \
    \     if i == \" \" {\n            continue\n        } else if i == \"a\" {\n\
    \            totalApple += 1\n        } else if i == \"o\" {\n            totalOrange\
    \ += 1\n        } else if i == \"n\" {\n            totalOrange += 1\n       \
    \ } else if i == \"d\" {\n            totalOrange += 1\n        } else if i ==\
    \ \"r\" {\n            totalOrange += 1\n        } else if i == \"g\" {\n    \
    \        totalOrange += 1\n        } else if i == \"e\" {\n            totalOrange\
    \ += 1\n        } else if i == \"s\" {\n            totalOrange += 1\n       \
    \ } else if i == \"l\" {\n            totalApple += 1\n        } else if i ==\
    \ \"p\" {\n            totalApple += 1\n        } else if i == \"0\" {\n     \
    \       totalFruit += 0\n        } else if i == \"1\" {\n            totalFruit\
    \ += 1\n        } else if i == \"2\" {\n            totalFruit += 2\n        }\
    \ else if i == \"3\" {\n            totalFruit += 3\n        } else if i == \"\
    4\" {\n            totalFruit += 4\n        } else if i == \"5\" {\n         \
    \   totalFruit += 5\n        } else if i == \"6\" {\n            totalFruit +=\
    \ 6\n        } else if i == \"7\" {\n            totalFruit += 7\n        } else\
    \ if i == \"8\" {\n            totalFruit += 8\n        } else if i == \"9\" {\n\
    \            totalFruit += 9\n        }\n    }\n    total = n - (totalApple +\
    \ totalOrange)\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpnrf731qh/tmpnrf731qh.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae38ab37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae38a82eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae38a82e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae38a82d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrf731qh                        0x000055bb06d22419 <unavailable> + 5145

    5    libc.so.6                          0x00002ae38ad23460 __libc_start_main +
    245

    6    tmpnrf731qh                        0x000055bb06d22099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprd31g2wb/tmprd31g2wb.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc720d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71dd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71dd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71dd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71dcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprd31g2wb                        0x000055f789418eaa <unavailable> + 7850

    6    tmprd31g2wb                        0x000055f7894185fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc722c5460 __libc_start_main +
    245

    8    tmprd31g2wb                        0x000055f7894182f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp8n388npq.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var number = \"\"\n    for char in s {\n        if char == \"\
    \ \" {\n            continue\n        }\n        if char == \"a\" {\n        \
    \    apples = Int(number)!\n            number = \"\"\n        }\n        if char\
    \ == \"o\" {\n            oranges = Int(number)!\n            number = \"\"\n\
    \        }\n        if char.isNumber {\n            number += String(char)\n \
    \       }\n    }\n    total = apples + oranges\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpiex3kznp/tmpiex3kznp.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c280a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c27d9e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c27d9e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c27d9e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c27d9dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiex3kznp                        0x0000564c7dbaee0e <unavailable> + 7694

    6    tmpiex3kznp                        0x0000564c7dbae5db <unavailable> + 5595

    7    libc.so.6                          0x00002b0c28293460 __libc_start_main +
    245

    8    tmpiex3kznp                        0x0000564c7dbae2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var temp = \"\"\n    for char in s {\n        if char == \" \"\
    \ {\n            if temp == \"apples\" {\n                apples = Int(s.components(separatedBy:\
    \ \" \")[0])!\n            } else if temp == \"oranges\" {\n                oranges\
    \ = Int(s.components(separatedBy: \" \")[2])!\n            }\n            temp\
    \ = \"\"\n        } else {\n            temp += String(char)\n        }\n    }\n\
    \    mango = n - apples - oranges\n    return mango\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpepfyp2ce.swift:25:32: error: value of type 'String' has no member\
    \ 'components'\n                apples = Int(s.components(separatedBy: \" \")[0])!\n\
    \                             ~ ^~~~~~~~~~\n/tmp/tmpepfyp2ce.swift:27:33: error:\
    \ value of type 'String' has no member 'components'\n                oranges =\
    \ Int(s.components(separatedBy: \" \")[2])!\n                              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total = 0\n    var num = 0\n\
    \    var str = \"\"\n    for i in s {\n        if i == \" \" {\n            if\
    \ str == \"apples\" {\n                total += num\n            } else if str\
    \ == \"oranges\" {\n                total += num\n            }\n            num\
    \ = 0\n            str = \"\"\n        } else if i == \"a\" {\n            str\
    \ = \"apples\"\n        } else if i == \"o\" {\n            str = \"oranges\"\n\
    \        } else if i == \"n\" {\n            str = \"and\"\n        } else {\n\
    \            num = num * 10 + Int(String(i))!\n        }\n    }\n    return n\
    \ - total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpuloy6dwk/tmpuloy6dwk.swift:37: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10b7f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab10b4e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab10b4e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab10b4e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab10b4e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpuloy6dwk                        0x00005609b3b03078 <unavailable> + 8312

    6    tmpuloy6dwk                        0x00005609b3b0258b <unavailable> + 5515

    7    libc.so.6                          0x00002ab10b9de460 __libc_start_main +
    245

    8    tmpuloy6dwk                        0x00005609b3b02289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    while i < s.count {\n        if s[i] == \" \" {\n            i +=\
    \ 1\n        } else if s[i] == \"a\" {\n            i += 6\n            var j\
    \ = i\n            while s[j] != \" \" {\n                j += 1\n           \
    \ }\n            apple = Int(s[i..<j])!\n            i = j\n        } else if\
    \ s[i] == \"o\" {\n            i += 8\n            var j = i\n            while\
    \ s[j] != \" \" {\n                j += 1\n            }\n            orange =\
    \ Int(s[i..<j])!\n            i = j\n        }\n    }\n    mango -= apple + orange\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp9jj9bjcy.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp9jj9bjcy.swift:24:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9jj9bjcy.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp9jj9bjcy.swift:30:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \            apple = Int(s[i..<j])!\n                        ^~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmp9jj9bjcy.swift:32:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"o\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9jj9bjcy.swift:35:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) "
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[2])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp1cvogc4x/tmp1cvogc4x.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d333eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d330e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d330e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d330e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d330e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1cvogc4x                        0x000055d7dd5d3eaa <unavailable> + 7850

    6    tmp1cvogc4x                        0x000055d7dd5d35fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d335da460 __libc_start_main +
    245

    8    tmp1cvogc4x                        0x000055d7dd5d32f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ mango = 0\n    var arr = s.split(separator: \" \")\n    for i in 0...arr.count-1{\n\
    \        if arr[i] == \"apples\"{\n            apples = Int(arr[i-1])!\n     \
    \   }\n        if arr[i] == \"oranges\"{\n            oranges = Int(arr[i-1])!\n\
    \        }\n    }\n    total = apples + oranges\n    mango = n - total\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.components(separatedBy:\
    \ \" \")\n    let num1 = Int(arr[0])!\n    let num2 = Int(arr[2])!\n    let total\
    \ = num1 + num2\n    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1n_j0ivr.swift:18:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpks6cctzx/tmpks6cctzx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34e34d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34e31cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34e31cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34e31cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks6cctzx                        0x000055f189d27269 <unavailable> + 4713

    5    libc.so.6                          0x00002b34e36c2460 __libc_start_main +
    245

    6    tmpks6cctzx                        0x000055f189d26ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangos = 0\n    var totalFruitsInBasket = 0\n    var totalApplesInBasket\
    \ = 0\n    var totalOrangesInBasket = 0\n    var totalMangosInBasket = 0\n   \
    \ var totalFruitsInBasketString = \"\"\n    var totalApplesInBasketString = \"\
    \"\n    var totalOrangesInBasketString = \"\"\n    var totalMangosInBasketString\
    \ = \"\"\n    var totalFruitsInBasketStringArray = [String]()\n    var totalApplesInBasketStringArray\
    \ = [String]()\n    var totalOrangesInBasketStringArray = [String]()\n    var\
    \ totalMangosInBasketStringArray = [String]()\n    var totalFruitsInBasketArray\
    \ = [Int]()\n    var totalApplesInBasketArray = [Int]()\n    var totalOrangesInBasketArray\
    \ = [Int]()\n    var totalMangosInBasketArray = [Int]()\n    var totalFruitsInBasketArrayIndex\
    \ = 0\n    var totalApplesInBasketArrayIndex = 0\n    var totalOrangesInBasketArrayIndex\
    \ = 0\n    var totalMangosInBasketArrayIndex = 0\n    var totalFruitsInBasketArrayIndexString\
    \ = \"\"\n    var totalApplesInBasketArrayIndexString = \"\"\n    var totalOrangesInBasketArrayIndexString\
    \ = \"\"\n    var totalMangosInBasketArrayIndexString = \"\"\n    var totalFruitsInBasketArrayIndexInt\
    \ = 0\n    var totalApplesInBasketArrayIndexInt = 0\n    var totalOrangesInBasketArrayIndexInt\
    \ = 0\n    var totalMangosInBasketArrayIndexInt = 0\n    var totalFruitsInBasketArrayIndexIntString\
    \ = \"\"\n    var totalApplesInBasketArrayIndexIntString = \"\"\n    var totalOrangesInBasketArrayIndexIntString\
    \ = \"\"\n    var totalMangosInBasketArrayIndexIntString = \"\"\n    var totalFruitsInBasketArrayIndexIntStringArray\
    \ = [String]()\n    var totalApplesInBasketArrayIndexInt\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmps83l5rty.swift:54:9: error: type annotation missing in pattern\n\
    \    var totalApplesInBasketArrayIndexInt\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_fruits = 0\n    var total_apples = 0\n    var total_oranges\
    \ = 0\n    var total_mangoes = 0\n    var total_fruits_string = \"\"\n    var\
    \ total_apples_string = \"\"\n    var total_oranges_string = \"\"\n    var total_mangoes_string\
    \ = \"\"\n    var total_fruits_string_array = [String]()\n    var total_apples_string_array\
    \ = [String]()\n    var total_oranges_string_array = [String]()\n    var total_mangoes_string_array\
    \ = [String]()\n    var total_fruits_int_array = [Int]()\n    var total_apples_int_array\
    \ = [Int]()\n    var total_oranges_int_array = [Int]()\n    var total_mangoes_int_array\
    \ = [Int]()\n    var total_fruits_int = 0\n    var total_apples_int = 0\n    var\
    \ total_oranges_int = 0\n    var total_mangoes_int = 0\n    var total_fruits_string_array_count\
    \ = 0\n    var total_apples_string_array_count = 0\n    var total_oranges_string_array_count\
    \ = 0\n    var total_mangoes_string_array_count = 0\n    var total_fruits_int_array_count\
    \ = 0\n    var total_apples_int_array_count = 0\n    var total_oranges_int_array_count\
    \ = 0\n    var total_mangoes_int_array_count = 0\n    var total_fruits_string_array_index\
    \ = 0\n    var total_apples_string_array_index = 0\n    var total_oranges_string_array_index\
    \ = 0\n    var total_mangoes_string_array_index = 0\n    var total_fruits_int_array_index\
    \ = 0\n    var total_apples_int_array_index = 0\n    var total_oranges_int_array_index\
    \ = 0\n    var total_mangoes_int_array_index = 0\n    var total_fruits_string_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_j1y7o1d.swift:53:9: error: type annotation missing in pattern\n\
    \    var total_fruits_string_array\n        ^\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ number = \"\"\n    for i in s {\n        if i == \" \" {\n            continue\n\
    \        }\n        if i == \"a\" {\n            apple = Int(number)!\n      \
    \      number = \"\"\n        }\n        if i == \"o\" {\n            orange =\
    \ Int(number)!\n            number = \"\"\n        }\n        if i.isNumber {\n\
    \            number += String(i)\n        }\n    }\n    mango = n - apple - orange\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsd54c7l5/tmpsd54c7l5.swift:26: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b88d2528c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88d221f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b88d221f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b88d221f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b88d221ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsd54c7l5                        0x000055ee911c2df6 <unavailable> + 7670

    6    tmpsd54c7l5                        0x000055ee911c25db <unavailable> + 5595

    7    libc.so.6                          0x00002b88d2714460 __libc_start_main +
    245

    8    tmpsd54c7l5                        0x000055ee911c22d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    let mangoes = n - apples - oranges\n \
    \   return mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpbob6rjaf/tmpbob6rjaf.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f05912c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f05609561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f05609286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f0560913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f05608bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbob6rjaf                        0x00005592a92acebd <unavailable> + 7869

    6    tmpbob6rjaf                        0x00005592a92ac5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b8f05afe460 __libc_start_main +
    245

    8    tmpbob6rjaf                        0x00005592a92ac2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.components(separatedBy: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp7cod600j.swift:17:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = n\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            i += 1\n        } else if s[i] == \"a\" {\n        \
    \    i += 6\n            while s[i] != \" \" {\n                apple = apple\
    \ * 10 + Int(String(s[i]))!\n                i += 1\n            }\n        }\
    \ else if s[i] == \"o\" {\n            i += 8\n            while s[i] != \" \"\
    \ {\n                orange = orange * 10 + Int(String(s[i]))!\n             \
    \   i += 1\n            }\n        }\n    }\n    mango = mango - apple - orange\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpjhk0m9j1.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpjhk0m9j1.swift:26:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjhk0m9j1.swift:28:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[i] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpjhk0m9j1.swift:29:49: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       apple = apple * 10 + Int(String(s[i]))!\n                            \
    \                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpjhk0m9j1.swift:32:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        }\
    \ else if s[i] == \"o\" {\n                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjhk0m9j1.swift:34:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }"
  stdout: ''
  timestamp: 1659824740
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    let arr = s.split(separator: \" \")\n    for\
    \ i in 0..<arr.count {\n        if arr[i] == \"apples\" {\n            total +=\
    \ Int(arr[i-1])!\n        } else if arr[i] == \"oranges\" {\n            total\
    \ += Int(arr[i-1])!\n        }\n    }\n    return n - total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    var n = n\n    var a = Int(s[0])!\n    var o = Int(s[2])!\n    n -= a +\
    \ o\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpz83izk74/tmpz83izk74.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0287144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0286e3b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0286e3b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0286e3b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0286e3abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz83izk74                        0x000056509ac08fb8 <unavailable> + 8120

    6    tmpz83izk74                        0x000056509ac0864b <unavailable> + 5707

    7    libc.so.6                          0x00002b0287330460 __libc_start_main +
    245

    8    tmpz83izk74                        0x000056509ac08349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp86wphtoz/tmp86wphtoz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b370f081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b370ed78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b370ed78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b370ed777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86wphtoz                        0x000055abf4e8c269 <unavailable> + 4713

    5    libc.so.6                          0x00002b370f26d460 __libc_start_main +
    245

    6    tmp86wphtoz                        0x000055abf4e8bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    let mangoes = n -\
    \ apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1vpw13uo.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let apples = Int(s[0])!\n\
    \    let oranges = Int(s[3])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.components(separatedBy:\
    \ \" \")\n    let num1 = Int(arr[0])!\n    let num2 = Int(arr[2])!\n    return\
    \ n - num1 - num2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp2ar36lek.swift:18:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango_count = 0\n    var apple_count = 0\n    var orange_count\
    \ = 0\n    var count = 0\n    var str = \"\"\n    for char in s {\n        if\
    \ char == \" \" {\n            if str == \"apples\" {\n                apple_count\
    \ = count\n            } else if str == \"oranges\" {\n                orange_count\
    \ = count\n            }\n            count = 0\n            str = \"\"\n    \
    \    } else if char == \"a\" || char == \"o\" {\n            str += String(char)\n\
    \        } else {\n            count = count * 10 + Int(String(char))!\n     \
    \   }\n    }\n    mango_count = n - apple_count - orange_count\n    return mango_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpc7fjeof2/tmpc7fjeof2.swift:34: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afd30a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3078b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afd3078b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afd3078b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afd3078abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc7fjeof2                        0x0000564285612061 <unavailable> + 8289

    6    tmpc7fjeof2                        0x00005642856115db <unavailable> + 5595

    7    libc.so.6                          0x00002afd30c80460 __libc_start_main +
    245

    8    tmpc7fjeof2                        0x00005642856112d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var n = n\n    var apples = 0\n    var oranges\
    \ = 0\n    var mangoes = 0\n    var i = 0\n    while i < s.count {\n        if\
    \ s[i] == \" \" {\n            i += 1\n        } else if s[i] == \"a\" {\n   \
    \         i += 6\n            var j = i\n            while s[j] != \" \" {\n \
    \               j += 1\n            }\n            apples = Int(s[i..<j])!\n \
    \           i = j\n        } else if s[i] == \"o\" {\n            i += 7\n   \
    \         var j = i\n            while s[j] != \" \" {\n                j += 1\n\
    \            }\n            oranges = Int(s[i..<j])!\n            i = j\n    \
    \    }\n    }\n    mangoes = n - apples - oranges\n    return mangoes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpo95el64h.swift:24:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpo95el64h.swift:26:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"a\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo95el64h.swift:29:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpo95el64h.swift:32:26: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \            apples = Int(s[i..<j])!\n                         ^~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpo95el64h.swift:34:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        } else if s[i] == \"o\" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo95el64h.swift:37:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while s[j] != \" \" {\n           \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int"
  stdout: ''
  timestamp: 1659824740
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num1 = Int(arr[0])!\n\
    \    let num2 = Int(arr[3])!\n    let num3 = n - num1 - num2\n    return num3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numOfApples = Int(arr[0])!\n\
    \    let numOfOranges = Int(arr[2])!\n    return n - numOfApples - numOfOranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp1cvogc4x/tmp1cvogc4x.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d333eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d330e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d330e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d330e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d330e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1cvogc4x                        0x000055d7dd5d3eaa <unavailable> + 7850

    6    tmp1cvogc4x                        0x000055d7dd5d35fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d335da460 __libc_start_main +
    245

    8    tmp1cvogc4x                        0x000055d7dd5d32f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apple = 0\n    var orange = 0\n    var mango = 0\n    var\
    \ count = 0\n    var temp = \"\"\n    for i in s {\n        if i == \" \" {\n\
    \            if count == 0 {\n                apple = Int(temp)!\n           \
    \     temp = \"\"\n                count += 1\n            } else if count ==\
    \ 1 {\n                temp = \"\"\n                count += 1\n            }\
    \ else if count == 2 {\n                orange = Int(temp)!\n                temp\
    \ = \"\"\n                count += 1\n            }\n        } else {\n      \
    \      temp += String(i)\n        }\n    }\n    mango = n - (apple + orange)\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp_bt_hdcb/tmp_bt_hdcb.swift:32: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6079430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6079127561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6079127286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b607912713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6079126bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_bt_hdcb                        0x0000562c7302eef0 <unavailable> + 7920

    6    tmp_bt_hdcb                        0x0000562c7302e58b <unavailable> + 5515

    7    libc.so.6                          0x00002b607961c460 __libc_start_main +
    245

    8    tmp_bt_hdcb                        0x0000562c7302e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[3])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4l9cq2lh.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var sum = 0\n    var arr = s.components(separatedBy:\
    \ \" \")\n    for i in 0..<arr.count {\n        if arr[i] == \"apples\" {\n  \
    \          sum += Int(arr[i-1])!\n        }\n        if arr[i] == \"oranges\"\
    \ {\n            sum += Int(arr[i-1])!\n        }\n    }\n    return n - sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpvmwqt1pj.swift:19:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.components(separatedBy:\
    \ \" \")\n    let a = Int(s[0])!\n    let o = Int(s[2])!\n    return n - a - o\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_pfms9_k.swift:18:15: error: value of type 'String' has no member\
    \ 'components'\n    var s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824739
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var index = 0\n    var number = \"\"\n  \
    \  while index < s.count {\n        let char = s[s.index(s.startIndex, offsetBy:\
    \ index)]\n        if char == \" \" {\n            if number != \"\" {\n     \
    \           if s[s.index(s.startIndex, offsetBy: index - 1)] == \"s\" {\n    \
    \                total_apples = Int(number)!\n                } else {\n     \
    \               total_oranges = Int(number)!\n                }\n            \
    \    number = \"\"\n            }\n        } else if char == \"a\" {\n       \
    \     if number != \"\" {\n                if s[s.index(s.startIndex, offsetBy:\
    \ index - 1)] == \"s\" {\n                    total_apples = Int(number)!\n  \
    \              } else {\n                    total_oranges = Int(number)!\n  \
    \              }\n                number = \"\"\n            }\n        } else\
    \ if char == \"o\" {\n            if number != \"\" {\n                if s[s.index(s.startIndex,\
    \ offsetBy: index - 1)] == \"s\" {\n                    total_apples = Int(number)!\n\
    \                } else {\n                    total_oranges = Int(number)!\n\
    \                }\n                number = \"\"\n            }\n        } else\
    \ if char == \"r\" {\n            if number != \"\" {\n                if s[s.index(s.startIndex,\
    \ offsetBy: index - 1)] == \"s\" {\n                    total_apples = Int(number)!\n\
    \                } else {\n                    total_oranges = Int(number)!\n\
    \                }\n                number = \"\"\n            }\n        } else\
    \ if char == \"n\" {\n            if number != \"\" {\n                if s[s.index(s.startIndex,\
    \ offsetBy: index - 1)] == \"s\" {\n                    total_apples = Int(number)!\n\
    \                } else {\n                    total_oranges = Int(number)!\n\
    \                }\n                number = \"\"\n            }\n        } else\
    \ if char == \"d\" {\n            if number != \"\" {\n                if s[s.index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp0973t8ka.swift:73:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp0973t8ka.swift:72:21: note: to match this opening '['\n           \
    \     if s[s.index\n                    ^\n/tmp/tmp0973t8ka.swift:94:72: error:\
    \ expected '}' at end of brace statement\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)\n                                        \
    \                               ^\n/tmp/tmp0973t8ka.swift:70:31: note: to match\
    \ this opening '{'\n        } else if char == \"d\" {\n                      \
    \        ^\n/tmp/tmp0973t8ka.swift:94:72: error: expected '}' at end of brace\
    \ statement\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)\n                                                                   \
    \    ^\n/tmp/tmp0973t8ka.swift:23:27: note: to match this opening '{'\n    while\
    \ index < s.count {\n                          ^\n/tmp/tmp0973t8ka.swift:94:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmp0973t8ka.swift:16:51: note:\
    \ to match this opening '{'\nfunc fruit_distribution(s: String, n: Int) -> Int\
    \ {\n                                                  ^\n/tmp/tmp0973t8ka.swift:72:21:\
    \ error: no exact matches in call to subscript \n                if s[s.index\n\
    \                    ^\n/tmp/tmp0973t8ka.swift:72:21: note: found candidate with\
    \ type '(String.Index) -> Character'\n                if s[s.index\n         \
    \           ^\n/tmp/tmp0973t8ka.swift:72:21: note: found candidate with type '(Range<String.Index>)\
    \ -> Substring'\n                if s[s.index\n                    ^\n/tmp/tmp0973t8ka.swift:72:21:\
    \ note: found candidate with type '(@escaping (String.Index) -> String.Index)\
    \ -> String.SubSequence' (aka '(@escaping (String.Index) -> String.Index) -> Substring')\n\
    \                if s[s.index\n                    ^\n/tmp/tmp0973t8ka.swift:72:21:\
    \ error: no 'subscript' candidates produce the expected contextual result type\
    \ 'Bool'\n            "
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let num_apples = Int(arr[0])!\n\
    \    let num_oranges = Int(arr[3])!\n    return n - num_apples - num_oranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824740
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_apples_and_oranges = 0\n    var\
    \ total_apples_and_oranges_and_mangoes = 0\n    var total_mangoes_in_the_basket\
    \ = 0\n    var total_fruits_in_the_basket = 0\n    var total_apples_and_oranges_in_the_basket\
    \ = 0\n    var total_apples_and_oranges_and_mangoes_in_the_basket = 0\n    var\
    \ total_mangoes_in_the_basket_1 = 0\n    var total_fruits_in_the_basket_1 = 0\n\
    \    var total_apples_and_oranges_in_the_basket_1 = 0\n    var total_apples_and_oranges_and_mangoes_in_the_basket_1\
    \ = 0\n    var total_mangoes_in_the_basket_2 = 0\n    var total_fruits_in_the_basket_2\
    \ = 0\n    var total_apples_and_oranges_in_the_basket_2 = 0\n    var total_apples_and_oranges_and_mangoes_in_the_basket_2\
    \ = 0\n    var total_mangoes_in_the_basket_3 = 0\n    var total_fruits_in_the_basket_3\
    \ = 0\n    var total_apples_and_oranges_in_the_basket_3 = 0\n    var total_apples_and_oranges_and_mangoes_in_the_basket_3\
    \ = 0\n    var total_mangoes_in_the_basket_4 = 0\n    var total_fruits_in_the_basket_4\
    \ = 0\n    var total_apples_and_oranges_in_the_basket_4 = 0\n    var total_apples_and_oranges_and_mangoes_in_the_basket_4\
    \ = 0\n    var total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpj3kcp1y8.swift:43:9: error: type annotation missing in pattern\n\
    \    var total\n        ^\n"
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.components(separatedBy:\
    \ \" \")\n    let a = Int(arr[0])!\n    let o = Int(arr[2])!\n    return n - a\
    \ - o\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpsbrp04m3.swift:18:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var num_apples = 0\n    var num_oranges = 0\n    var num_mangoes\
    \ = 0\n    var num_fruits = 0\n    var num_fruits_in_basket = 0\n    var num_fruits_in_basket_string\
    \ = \"\"\n    var num_fruits_in_basket_string_array = [String]()\n    var num_fruits_in_basket_string_array_index\
    \ = 0\n    var num_fruits_in_basket_string_array_index_string = \"\"\n    var\
    \ num_fruits_in_basket_string_array_index_string_array = [String]()\n    var num_fruits_in_basket_string_array_index_string_array_index\
    \ = 0\n    var num_fruits_in_basket_string_array_index_string_array_index_string\
    \ = \"\"\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array\
    \ = [String]()\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index\
    \ = 0\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string\
    \ = \"\"\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array\
    \ = [String]()\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array_index\
    \ = 0\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array_index_string\
    \ = \"\"\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array_index_string_array\
    \ = [String]()\n    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array_index_string_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpn9zqxxw7.swift:36:9: error: type annotation missing in pattern\n\
    \    var num_fruits_in_basket_string_array_index_string_array_index_string_array_index_string_array_index_string_array\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824740
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let a = Int(s[0])!\n  \
    \  let o = Int(s[3])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    let a = Int(s[0])!\n    let o = Int(s[2])!\n    return n - a - o\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp7duvkawn/tmp7duvkawn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab414bf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4148ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4148ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4148ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4148eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7duvkawn                        0x000055bb18feff9a <unavailable> + 8090

    6    tmp7duvkawn                        0x000055bb18fef64b <unavailable> + 5707

    7    libc.so.6                          0x00002ab414de4460 __libc_start_main +
    245

    8    tmp7duvkawn                        0x000055bb18fef349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let a = Int(arr[0])!\n    let o = Int(arr[2])!\n    return n - a - o\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpz16e2wjp/tmpz16e2wjp.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b608361dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6083314561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6083314286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b608331413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6083313bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz16e2wjp                        0x000055d620bf6eaa <unavailable> + 7850

    6    tmpz16e2wjp                        0x000055d620bf65fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6083809460 __libc_start_main +
    245

    8    tmpz16e2wjp                        0x000055d620bf62f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let apples = Int(arr[0])!\n\
    \    let oranges = Int(arr[2])!\n    let mangoes = n - apples - oranges\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpyvix5341/tmpyvix5341.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4021a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402175a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b402175a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b402175a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4021759bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyvix5341                        0x000055f534d7febd <unavailable> + 7869

    6    tmpyvix5341                        0x000055f534d7f5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b4021c4f460 __libc_start_main +
    245

    8    tmpyvix5341                        0x000055f534d7f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let numOfApples =\
    \ Int(fruits[0])!\n    let numOfOranges = Int(fruits[3])!\n    return n - numOfApples\
    \ - numOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var num_apples = 0\n    var num_oranges\
    \ = 0\n    var num_mangoes = 0\n    var num_fruits = 0\n    var num_fruits_in_basket\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll = 0\n\
    \    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var qq =\
    \ 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n    var vv\
    \ = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n    var\
    \ aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n   \
    \ var ff = 0\n    var gg = 0\n    var hh = 0\n    var iii = 0\n    var jjj = 0\n\
    \    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n    var ooo\
    \ = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss = 0\n  \
    \  var ttt = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n    var xxx\
    \ = 0\n    var yyy = 0\n    var zzz = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpekd0oqt9.swift:18:9: warning: initialization of variable 'num_apples'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var num_apples = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpekd0oqt9.swift:19:9:\
    \ warning: initialization of variable 'num_oranges' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var num_oranges = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpekd0oqt9.swift:20:9: warning: initialization of variable 'num_mangoes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var num_mangoes = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpekd0oqt9.swift:21:9:\
    \ warning: initialization of variable 'num_fruits' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var num_fruits = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpekd0oqt9.swift:22:9: warning: initialization of variable 'num_fruits_in_basket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var num_fruits_in_basket = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpekd0oqt9.swift:23:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpekd0oqt9.swift:24:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpekd0oqt9.swift:25:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmpekd0oqt9.swift:26:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmpekd0oqt9.swift:27:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmpekd0oqt9.swift:28:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n "
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    var total = 0\n    var num = 0\n\
    \    var i = 0\n    while i < s.count {\n        if s[i] == \" \" {\n        \
    \    i += 1\n        }\n        if s[i] == \"a\" {\n            i += 6\n     \
    \   }\n        if s[i] == \"o\" {\n            i += 7\n        }\n        if s[i]\
    \ == \"0\" {\n            num = 0\n            total += num\n        }\n     \
    \   if s[i] == \"1\" {\n            num = 1\n            total += num\n      \
    \  }\n        if s[i] == \"2\" {\n            num = 2\n            total += num\n\
    \        }\n        if s[i] == \"3\" {\n            num = 3\n            total\
    \ += num\n        }\n        if s[i] == \"4\" {\n            num = 4\n       \
    \     total += num\n        }\n        if s[i] == \"5\" {\n            num = 5\n\
    \            total += num\n        }\n        if s[i] == \"6\" {\n           \
    \ num = 6\n            total += num\n        }\n        if s[i] == \"7\" {\n \
    \           num = 7\n            total += num\n        }\n        if s[i] == \"\
    8\" {\n            num = 8\n            total += num\n        }\n        if s[i]\
    \ == \"9\" {\n            num = 9\n            total += num\n        }\n     \
    \   i += 1\n    }\n    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp8n4oixef.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp8n4oixef.swift:25:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8n4oixef.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"o\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8n4oixef.swift:31:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"0\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8n4oixef.swift:35:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"1\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8n4oixef.swift:39:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == \"2\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8n4oixef.swift:43:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use "
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apples = Int(arr[0])!\n    let oranges = Int(arr[2])!\n    return n\
    \ - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpum5wx8cn/tmpum5wx8cn.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d84e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d84b66561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d84b66286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d84b6613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d84b65bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpum5wx8cn                        0x000055e504246eaa <unavailable> + 7850

    6    tmpum5wx8cn                        0x000055e5042465fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6d8505b460 __libc_start_main +
    245

    8    tmpum5wx8cn                        0x000055e5042462f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[3])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfincxi2h/tmpfincxi2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42dd89cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42dd593b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42dd593988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42dd5927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfincxi2h                        0x000055972c5b8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b42dda88460 __libc_start_main +
    245

    6    tmpfincxi2h                        0x000055972c5b7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apple = Int(fruits[0])!\n\
    \    let orange = Int(fruits[3])!\n    let mango = n - apple - orange\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let apple = Int(arr[0]) ?? 0\n    let orange = Int(arr[2]) ?? 0\n    return\
    \ n - apple - orange\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsl00uig3/tmpsl00uig3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7ef937c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7ef62eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7ef62e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7ef62d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl00uig3                        0x000055f9b120f5e9 <unavailable> + 5609

    5    libc.so.6                          0x00002ab7efb23460 __libc_start_main +
    245

    6    tmpsl00uig3                        0x000055f9b120f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" and \")\n    let apples\
    \ = Int(fruits[0].components(separatedBy: \" \")[0])!\n    let oranges = Int(fruits[1].components(separatedBy:\
    \ \" \")[0])!\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprln0hg_6.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824638
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_apples = 0\n    var total_oranges = 0\n    var total_mangoes\
    \ = 0\n    var total_fruits = 0\n    var total_fruits_in_basket = 0\n    var total_fruits_in_string\
    \ = 0\n    var total_fruits_in_string_array = [Int]()\n    var total_fruits_in_string_array_count\
    \ = 0\n    var total_fruits_in_string_array_count_index = 0\n    var total_fruits_in_string_array_count_index_value\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string = \"\"\n\
    \    var total_fruits_in_string_array_count_index_value_string_array = [String]()\n\
    \    var total_fruits_in_string_array_count_index_value_string_array_count = 0\n\
    \    var total_fruits_in_string_array_count_index_value_string_array_count_index\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value\
    \ = \"\"\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int_array\
    \ = [Int]()\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int_array_count\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int_array_count_index\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int_array_count_index_value\
    \ = 0\n    var total_fruits_in_string_array_count_index_value_string_array_count_index_value_int_array_count_index_value_string\
    \ = \"\"\n    var total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmphino95bd.swift:38:9: error: type annotation missing in pattern\n\
    \    var total\n        ^\n"
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let numbers = s.split(separator: \" \").map { Int($0)! }\n   \
    \ return n - numbers.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmplwpelasm/tmplwpelasm.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ace40f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace40c36561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ace40c36286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ace40c3613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ace40c35bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplwpelasm                        0x000055f23fb13fd9 <unavailable> + 8153

    6    libswiftCore.so                    0x00002ace40c1e820 Collection.map<A>(_:)
    + 426

    7    tmplwpelasm                        0x000055f23fb13d1d <unavailable> + 7453

    8    tmplwpelasm                        0x000055f23fb136cb <unavailable> + 5835

    9    libc.so.6                          0x00002ace4112b460 __libc_start_main +
    245

    10   tmplwpelasm                        0x000055f23fb133c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ i = 0\n    while i < s.count {\n        if s[i] == \"a\" {\n            i +=\
    \ 6\n            while s[i] != \" \" {\n                apple = apple * 10 + Int(String(s[i]))!\n\
    \                i += 1\n            }\n        }\n        if s[i] == \"o\" {\n\
    \            i += 8\n            while s[i] != \" \" {\n                orange\
    \ = orange * 10 + Int(String(s[i]))!\n                i += 1\n            }\n\
    \        }\n        i += 1\n    }\n    mango = n - (apple + orange)\n    return\
    \ mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpsla78yob.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpsla78yob.swift:24:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsla78yob.swift:25:49:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                apple = apple * 10 + Int(String(s[i]))!\n\
    \                                                ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpsla78yob.swift:29:12: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if s[i] == \"o\" {\n           ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpsla78yob.swift:31:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            while s[i] != \" \" {\n                  ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsla78yob.swift:32:51:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                orange = orange * 10 + Int(String(s[i]))!\n\
    \                                                  ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    p"
  stdout: ''
  timestamp: 1659824740
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total = 0\n    var fruits = s.split(separator: \" \")\n  \
    \  for i in 0..<fruits.count {\n        if fruits[i] == \"apples\" {\n       \
    \     total += Int(fruits[i-1])!\n        } else if fruits[i] == \"oranges\" {\n\
    \            total += Int(fruits[i-1])!\n        }\n    }\n    return n - total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824640
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    let arr = s.split(separator: \" \"\
    )\n    let num = Int(arr[0])! + Int(arr[2])!\n    return n - num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpvw8rrc9_/tmpvw8rrc9_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72395bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba723652561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba723652286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba72365213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba723651bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvw8rrc9_                        0x0000564e5826ae90 <unavailable> + 7824

    6    tmpvw8rrc9_                        0x0000564e5826a5fb <unavailable> + 5627

    7    libc.so.6                          0x00002ba723b47460 __libc_start_main +
    245

    8    tmpvw8rrc9_                        0x0000564e5826a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var s = s.split(separator: \" \"\
    )\n    var a = Int(s[0])!\n    var o = Int(s[2])!\n    var m = n - a - o\n   \
    \ return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpbzlul5v1/tmpbzlul5v1.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0f3ec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0f3bbd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0f3bbd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0f3bbd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0f3bbcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbzlul5v1                        0x0000561fb3afefaa <unavailable> + 8106

    6    tmpbzlul5v1                        0x0000561fb3afe64b <unavailable> + 5707

    7    libc.so.6                          0x00002ae0f40b2460 __libc_start_main +
    245

    8    tmpbzlul5v1                        0x0000561fb3afe349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824740
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[2])!\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpybd6fg3_/tmpybd6fg3_.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b882f3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882f0c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b882f0c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b882f0c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b882f0c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpybd6fg3_                        0x000055a3c316ceaa <unavailable> + 7850

    6    tmpybd6fg3_                        0x000055a3c316c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b882f5ba460 __libc_start_main +
    245

    8    tmpybd6fg3_                        0x000055a3c316c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824639
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var sum = 0\n    var arr = s.components(separatedBy:\
    \ \" \")\n    for i in 0..<arr.count {\n        if arr[i] == \"apples\" {\n  \
    \          sum += Int(arr[i-1])!\n        } else if arr[i] == \"oranges\" {\n\
    \            sum += Int(arr[i-1])!\n        }\n    }\n    result = n - sum\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpyi84kokk.swift:19:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824740
