language: swift
name: HumanEval_158_find_max
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpc_4i12ay/tmpc_4i12ay.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25fe0d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25fddcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25fddcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25fddca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_4i12ay                        0x000055d7fb9b9993 <unavailable> + 6547

    5    libc.so.6                          0x00002b25fe2c0460 __libc_start_main +
    245

    6    tmpc_4i12ay                        0x000055d7fb9b93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpn8fvmk9t/tmpn8fvmk9t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027dc51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027d948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027d948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027d9477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8fvmk9t                        0x000055639b473933 <unavailable> + 6451

    5    libc.so.6                          0x00002b027de3d460 __libc_start_main +
    245

    6    tmpn8fvmk9t                        0x000055639b473359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = Set(word).count\n        if count > maxCount {\n            max\
    \ = word\n            maxCount = count\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpvwzbh0ex/tmpvwzbh0ex.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba312618c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba31230fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba31230f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba31230e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwzbh0ex                        0x0000564cf8744993 <unavailable> + 6547

    5    libc.so.6                          0x00002ba312804460 __libc_start_main +
    245

    6    tmpvwzbh0ex                        0x0000564cf87443b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n \
    \           maxCount = uniqueChars.count\n            maxWord = word\n       \
    \ }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqs67eih1/tmpqs67eih1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876c318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876c00fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876c00f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876c00e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqs67eih1                        0x0000562edf75d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b876c504460 __libc_start_main +
    245

    6    tmpqs67eih1                        0x0000562edf75d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_count = Set(word).count\n        if unique_count > max_count\
    \ {\n            max_count = unique_count\n            max_word = word\n     \
    \   }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp1r50q0q9/tmp1r50q0q9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b989b6c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b989b3bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b989b3ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b989b3b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1r50q0q9                        0x000055ce87c4b933 <unavailable> + 6451

    5    libc.so.6                          0x00002b989b8af460 __libc_start_main +
    245

    6    tmp1r50q0q9                        0x000055ce87c4b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bafonf.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     var count = 0\n        for char in word {\n            if !max_word.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count >\
    \ max_count {\n            max_count = count\n            max_word = word\n  \
    \      }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpib5l9tld/tmpib5l9tld.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9295be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92958ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92958dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92958dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib5l9tld                        0x0000563932512963 <unavailable> + 6499

    5    libc.so.6                          0x00002b9295dd2460 __libc_start_main +
    245

    6    tmpib5l9tld                        0x0000563932512389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = Set(word).count\n        if count > maxCount {\n            maxCount\
    \ = count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpzstxg8n1/tmpzstxg8n1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c089b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c086a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c086a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c086a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzstxg8n1                        0x000055f98a179933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1c08b9c460 __libc_start_main +
    245

    6    tmpzstxg8n1                        0x000055f98a179359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqpvg5snq/tmpqpvg5snq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0670cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b06403b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b06403988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b064027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpvg5snq                        0x0000555af4ec94ce <unavailable> + 5326

    5    libc.so.6                          0x00002b0b068f8460 __libc_start_main +
    245

    6    tmpqpvg5snq                        0x0000555af4ec9089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = Set(word).count\n        if count > maxCount {\n            maxCount\
    \ = count\n            maxWord = word\n        } else if count == maxCount {\n\
    \            maxWord = min(maxWord, word)\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = word.countUniqueCharacters()\n        if count > maxCount {\n\
    \            maxCount = count\n            maxWord = word\n        } else if count\
    \ == maxCount {\n            maxWord = min(maxWord, word)\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3mpu73e.swift:16:26: error: value of type 'String' has no member\
    \ 'countUniqueCharacters'\n        let count = word.countUniqueCharacters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_count = 0\n    var max_word = \"\"\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxf5321lc.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxString = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxString = word\n        }\n    }\n    return maxString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmplvd8fwhj/tmplvd8fwhj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe6e2a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe6df9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe6df9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe6df9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvd8fwhj                        0x0000559e725c3933 <unavailable> + 6451

    5    libc.so.6                          0x00002abe6e490460 __libc_start_main +
    245

    6    tmplvd8fwhj                        0x0000559e725c3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp_032ezfv.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var result = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            result = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp982sqn2h/tmp982sqn2h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49c7a4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49c7744b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49c7744988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49c77437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp982sqn2h                        0x000055e14f27a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b49c7c39460 __libc_start_main +
    245

    6    tmp982sqn2h                        0x000055e14f27a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var result = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            result = word\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpt6tuhx5t/tmpt6tuhx5t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b703bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b6d32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b6d32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b6d317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6tuhx5t                        0x00005622c3900933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac8b7227460 __libc_start_main +
    245

    6    tmpt6tuhx5t                        0x00005622c3900359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word.characters)\n        if unique_chars.count > max {\n\
    \            max = unique_chars.count\n            max_word = word\n        }\n\
    \    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpgsd2p_aa.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpoj57jsyb/tmpoj57jsyb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1fe80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f1fb77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f1fb77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f1fb767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoj57jsyb                        0x0000558481e6f933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2f2006c460 __libc_start_main +
    245

    6    tmpoj57jsyb                        0x0000558481e6f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp230wqmfs/tmp230wqmfs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0c59e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0c56ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0c56dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0c56dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp230wqmfs                        0x0000562a73be6873 <unavailable> + 6259

    5    libc.so.6                          0x00002ad0c5bd2460 __libc_start_main +
    245

    6    tmp230wqmfs                        0x0000562a73be6299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word.characters)\n        if unique.count > max {\n           \
    \ max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp68vgwa_8.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word.characters)\n        if unique.count > max {\n           \
    \ max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp68vgwa_8.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_unique_char = 0\n    for word in words\
    \ {\n        let unique_char = Set(word.characters)\n        if unique_char.count\
    \ > max_unique_char {\n            max_unique_char = unique_char.count\n     \
    \       max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpiztpkin8.swift:16:36: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_char = Set(word.characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp230wqmfs/tmp230wqmfs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0c59e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0c56ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0c56dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0c56dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp230wqmfs                        0x0000562a73be6873 <unavailable> + 6259

    5    libc.so.6                          0x00002ad0c5bd2460 __libc_start_main +
    245

    6    tmp230wqmfs                        0x0000562a73be6299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqfi9juso/tmpqfi9juso.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cea8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cea5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cea5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cea5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfi9juso                        0x000055c40ae3a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4ceaaa1460 __libc_start_main +
    245

    6    tmpqfi9juso                        0x000055c40ae3a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    var max_count = Set(words[0]).count\n    for word\
    \ in words {\n        let count = Set(word).count\n        if count > max_count\
    \ {\n            max = word\n            max_count = count\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvr8oz0ff/tmpvr8oz0ff.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe335fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe3056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe3056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe30557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr8oz0ff                        0x000056021ba02993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1fe354b460 __libc_start_main +
    245

    6    tmpvr8oz0ff                        0x000056021ba023b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpoj57jsyb/tmpoj57jsyb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1fe80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f1fb77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f1fb77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f1fb767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoj57jsyb                        0x0000558481e6f933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2f2006c460 __libc_start_main +
    245

    6    tmpoj57jsyb                        0x0000558481e6f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    var max_count = max.count\n    for word in words\
    \ {\n        let count = word.count\n        if count > max_count {\n        \
    \    max = word\n            max_count = count\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp50_if29u/tmp50_if29u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad168d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad168a7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad168a7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad168a7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50_if29u                        0x000055de2443d873 <unavailable> + 6259

    5    libc.so.6                          0x00002ad168f71460 __libc_start_main +
    245

    6    tmp50_if29u                        0x000055de2443d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqfi9juso/tmpqfi9juso.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cea8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cea5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cea5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cea5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfi9juso                        0x000055c40ae3a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4ceaaa1460 __libc_start_main +
    245

    6    tmpqfi9juso                        0x000055c40ae3a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = (word: \"\", count: 0)\n    for word in words {\n        let count\
    \ = Set(word).count\n        if count > max.count {\n            max = (word,\
    \ count)\n        } else if count == max.count && word < max.word {\n        \
    \    max = (word, count)\n        }\n    }\n    return max.word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxUnique = 0\n    for word in words {\n    \
    \    let unique = Set(word).count\n        if unique > maxUnique {\n         \
    \   maxUnique = unique\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpn3ho8kaq/tmpn3ho8kaq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba382194c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba381e8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba381e8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba381e8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3ho8kaq                        0x000055db64ff0933 <unavailable> + 6451

    5    libc.so.6                          0x00002ba382380460 __libc_start_main +
    245

    6    tmpn3ho8kaq                        0x000055db64ff0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n \
    \           maxCount = uniqueChars.count\n            maxWord = word\n       \
    \ }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqs67eih1/tmpqs67eih1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876c318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876c00fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876c00f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876c00e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqs67eih1                        0x0000562edf75d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b876c504460 __libc_start_main +
    245

    6    tmpqs67eih1                        0x0000562edf75d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = count_unique_characters(word: word)\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpq049vi8f.swift:16:21: error: cannot find 'count_unique_characters'\
    \ in scope\n        let count = count_unique_characters(word: word)\n        \
    \            ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpoj57jsyb/tmpoj57jsyb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1fe80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f1fb77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f1fb77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f1fb767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoj57jsyb                        0x0000558481e6f933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2f2006c460 __libc_start_main +
    245

    6    tmpoj57jsyb                        0x0000558481e6f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bafonf.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpz67u52rv/tmpz67u52rv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad12a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad12771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad12771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad127707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz67u52rv                        0x000055add00a4993 <unavailable> + 6547

    5    libc.so.6                          0x00002aad12c66460 __libc_start_main +
    245

    6    tmpz67u52rv                        0x000055add00a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique = Set(word.characters)\n        if unique.count > max {\n           \
    \ max = unique.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp6i1jdrqd.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var result = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            result = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp982sqn2h/tmp982sqn2h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49c7a4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49c7744b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49c7744988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49c77437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp982sqn2h                        0x000055e14f27a933 <unavailable> + 6451

    5    libc.so.6                          0x00002b49c7c39460 __libc_start_main +
    245

    6    tmp982sqn2h                        0x000055e14f27a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpdo_nkkra.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique = Set(word.characters)\n        if unique.count > max {\n           \
    \ max = unique.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp6i1jdrqd.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = \"\"\n    var max_count = 0\n    for word in words {\n        let\
    \ count = Set(word).count\n        if count > max_count {\n            max = word\n\
    \            max_count = count\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmppbtoa3nh/tmppbtoa3nh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4425e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4422e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4422e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4422df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbtoa3nh                        0x000056313ef4b933 <unavailable> + 6451

    5    libc.so.6                          0x00002ab4427d5460 __libc_start_main +
    245

    6    tmppbtoa3nh                        0x000056313ef4b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let set = Set(word)\n        if set.count > max_count {\n            max_count\
    \ = set.count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpj4eu3al7/tmpj4eu3al7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab856048c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab855d3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab855d3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab855d3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4eu3al7                        0x0000559c915fd933 <unavailable> + 6451

    5    libc.so.6                          0x00002ab856234460 __libc_start_main +
    245

    6    tmpj4eu3al7                        0x0000559c915fd359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp33bafonf.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueCount = Set(word).count\n        if uniqueCount > maxCount {\n \
    \           maxCount = uniqueCount\n            maxWord = word\n        }\n  \
    \  }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpjso749zd/tmpjso749zd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b7372fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b73426b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b73426988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b734257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjso749zd                        0x000055f1865d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8b7391b460 __libc_start_main +
    245

    6    tmpjso749zd                        0x000055f1865d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp230wqmfs/tmp230wqmfs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0c59e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0c56ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0c56dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0c56dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp230wqmfs                        0x0000562a73be6873 <unavailable> + 6259

    5    libc.so.6                          0x00002ad0c5bd2460 __libc_start_main +
    245

    6    tmp230wqmfs                        0x0000562a73be6299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpgbc48lzr/tmpgbc48lzr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af85e2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85dfa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af85dfa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af85dfa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbc48lzr                        0x000055ae22c17823 <unavailable> + 6179

    5    libc.so.6                          0x00002af85e49a460 __libc_start_main +
    245

    6    tmpgbc48lzr                        0x000055ae22c17249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqfi9juso/tmpqfi9juso.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cea8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cea5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cea5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cea5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfi9juso                        0x000055c40ae3a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4ceaaa1460 __libc_start_main +
    245

    6    tmpqfi9juso                        0x000055c40ae3a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp9uc52m_m/tmp9uc52m_m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c12e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c0fdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c0fde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c0fdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uc52m_m                        0x0000555fb47ba933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac6c14d3460 __libc_start_main +
    245

    6    tmp9uc52m_m                        0x0000555fb47ba359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpgbc48lzr/tmpgbc48lzr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af85e2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85dfa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af85dfa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af85dfa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbc48lzr                        0x000055ae22c17823 <unavailable> + 6179

    5    libc.so.6                          0x00002af85e49a460 __libc_start_main +
    245

    6    tmpgbc48lzr                        0x000055ae22c17249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_unique_chars = Set(words[0]).count\n\
    \    for word in words {\n        let unique_chars = Set(word).count\n       \
    \ if unique_chars > max_unique_chars {\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4172uqvi/tmp4172uqvi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3213f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3210ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3210eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3210ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4172uqvi                        0x000055b8a7455993 <unavailable> + 6547

    5    libc.so.6                          0x00002ae3215e0460 __libc_start_main +
    245

    6    tmp4172uqvi                        0x000055b8a74553b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word.characters)\n        if unique_chars.count\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.count\n  \
    \          max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp49nq6j_7.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n \
    \           maxCount = uniqueChars.count\n            maxWord = word\n       \
    \ }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqs67eih1/tmpqs67eih1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876c318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876c00fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876c00f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876c00e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqs67eih1                        0x0000562edf75d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b876c504460 __libc_start_main +
    245

    6    tmpqs67eih1                        0x0000562edf75d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpc_4i12ay/tmpc_4i12ay.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25fe0d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25fddcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25fddcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25fddca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_4i12ay                        0x000055d7fb9b9993 <unavailable> + 6547

    5    libc.so.6                          0x00002b25fe2c0460 __libc_start_main +
    245

    6    tmpc_4i12ay                        0x000055d7fb9b93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   var count = 0\n        for char in word {\n            if !maxWord.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count >\
    \ maxCount {\n            maxCount = count\n            maxWord = word\n     \
    \   }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpu5pzdnyw/tmpu5pzdnyw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b001e615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b001e30cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b001e30c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b001e30b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5pzdnyw                        0x0000557b1f583963 <unavailable> + 6499

    5    libc.so.6                          0x00002b001e801460 __libc_start_main +
    245

    6    tmpu5pzdnyw                        0x0000557b1f583389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp_032ezfv.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count\n        if count > max_count {\n            max_count\
    \ = count\n            max_word = word\n        }\n    }\n    return max_word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpgbc48lzr/tmpgbc48lzr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af85e2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85dfa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af85dfa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af85dfa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbc48lzr                        0x000055ae22c17823 <unavailable> + 6179

    5    libc.so.6                          0x00002af85e49a460 __libc_start_main +
    245

    6    tmpgbc48lzr                        0x000055ae22c17249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpn8fvmk9t/tmpn8fvmk9t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027dc51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027d948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027d948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027d9477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8fvmk9t                        0x000055639b473933 <unavailable> + 6451

    5    libc.so.6                          0x00002b027de3d460 __libc_start_main +
    245

    6    tmpn8fvmk9t                        0x000055639b473359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = \"\"\n    var max_count = 0\n    for word in words {\n        let\
    \ count = word.count_unique_chars()\n        if count > max_count {\n        \
    \    max = word\n            max_count = count\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpztu6eiyh.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ count = Set(word).count\n        if count > max {\n            max = count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp6h20l6wx/tmp6h20l6wx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78f651ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78f6211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78f6211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78f62107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6h20l6wx                        0x000055feec924933 <unavailable> + 6451

    5    libc.so.6                          0x00002b78f6706460 __libc_start_main +
    245

    6    tmp6h20l6wx                        0x000055feec924359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp0euly2n_.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = word.countUniqueCharacters()\n        if count > maxCount {\n\
    \            maxCount = count\n            maxWord = word\n        } else if count\
    \ == maxCount {\n            if word < maxWord {\n                maxWord = word\n\
    \            }\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\"\
    )\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsi0ulxr9.swift:16:26: error: value of type 'String' has no member\
    \ 'countUniqueCharacters'\n        let count = word.countUniqueCharacters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n \
    \           maxCount = uniqueChars.count\n            maxWord = word\n       \
    \ }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqs67eih1/tmpqs67eih1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876c318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876c00fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876c00f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876c00e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqs67eih1                        0x0000562edf75d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b876c504460 __libc_start_main +
    245

    6    tmpqs67eih1                        0x0000562edf75d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let count = Set(word).count\n        if count > maxCount {\n            maxCount\
    \ = count\n            maxWord = word\n        } else if count == maxCount {\n\
    \            if word < maxWord {\n                maxWord = word\n           \
    \ }\n        }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_unique_characters = 0\n    for word\
    \ in words {\n        let unique_characters = Set(word)\n        if unique_characters.count\
    \ > max_unique_characters {\n            max_unique_characters = unique_characters.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmph0g1mjgb/tmph0g1mjgb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad88d437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad88d12eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad88d12e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad88d12d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0g1mjgb                        0x000056039fad9993 <unavailable> + 6547

    5    libc.so.6                          0x00002ad88d623460 __libc_start_main +
    245

    6    tmph0g1mjgb                        0x000056039fad93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var maxWord = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpfpb9mf8k/tmpfpb9mf8k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae551e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae54edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae54edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae54edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpb9mf8k                        0x000055f65def0933 <unavailable> + 6451

    5    libc.so.6                          0x00002aae553d1460 __libc_start_main +
    245

    6    tmpfpb9mf8k                        0x000055f65def0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp9uc52m_m/tmp9uc52m_m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c12e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c0fdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c0fde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c0fdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uc52m_m                        0x0000555fb47ba933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac6c14d3460 __libc_start_main +
    245

    6    tmp9uc52m_m                        0x0000555fb47ba359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxUnique = 0\n    for word in words {\n    \
    \    let unique = Set(word.characters).count\n        if unique > maxUnique {\n\
    \            maxUnique = unique\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmppadfhjux.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters).count\n     \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqpvg5snq/tmpqpvg5snq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0670cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b06403b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b06403988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b064027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpvg5snq                        0x0000555af4ec94ce <unavailable> + 5326

    5    libc.so.6                          0x00002b0b068f8460 __libc_start_main +
    245

    6    tmpqpvg5snq                        0x0000555af4ec9089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n \
    \           maxCount = uniqueChars.count\n            maxWord = word\n       \
    \ }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqs67eih1/tmpqs67eih1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b876c318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b876c00fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b876c00f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b876c00e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqs67eih1                        0x0000562edf75d933 <unavailable> + 6451

    5    libc.so.6                          0x00002b876c504460 __libc_start_main +
    245

    6    tmpqs67eih1                        0x0000562edf75d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let set = Set(word)\n        if set.count > max_count {\n           \
    \ max_count = set.count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp5nmir1mk/tmp5nmir1mk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3e717cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3e6e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3e6e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3e6e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nmir1mk                        0x0000560b611c4993 <unavailable> + 6547

    5    libc.so.6                          0x00002af3e7368460 __libc_start_main +
    245

    6    tmp5nmir1mk                        0x0000560b611c43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n     \
    \   let set = Set(word)\n        if set.count > maxCount {\n            maxCount\
    \ = set.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpcie8j1h7/tmpcie8j1h7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7f3da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7f3a97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7f3a97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7f3a967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcie8j1h7                        0x0000561358a04933 <unavailable> + 6451

    5    libc.so.6                          0x00002af7f3f8c460 __libc_start_main +
    245

    6    tmpcie8j1h7                        0x0000561358a04359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_unique_characters = 0\n    for word\
    \ in words {\n        let unique_characters = Set(word)\n        if unique_characters.count\
    \ > max_unique_characters {\n            max_unique_characters = unique_characters.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmph0g1mjgb/tmph0g1mjgb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad88d437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad88d12eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad88d12e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad88d12d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0g1mjgb                        0x000056039fad9993 <unavailable> + 6547

    5    libc.so.6                          0x00002ad88d623460 __libc_start_main +
    245

    6    tmph0g1mjgb                        0x000056039fad93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmptxebu350/tmptxebu350.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4fd1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4fcee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4fcee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4fcee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxebu350                        0x00005611e2fb2933 <unavailable> + 6451

    5    libc.so.6                          0x00002ac4fd3dd460 __libc_start_main +
    245

    6    tmptxebu350                        0x00005611e2fb2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqp7fvswa.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp_032ezfv.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp3k2bjtta/tmp3k2bjtta.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebe5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebe299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebe299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebe2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3k2bjtta                        0x0000556de7ecb993 <unavailable> + 6547

    5    libc.so.6                          0x00002aaebe78e460 __libc_start_main +
    245

    6    tmp3k2bjtta                        0x0000556de7ecb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp0kegeixn/tmp0kegeixn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae615da5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae615a9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae615a9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae615a9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kegeixn                        0x0000562da9669933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae615f91460 __libc_start_main +
    245

    6    tmp0kegeixn                        0x0000562da9669359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = 0\n    var max_word = \"\"\n    for word in words {\n        let\
    \ unique_chars = Set(word)\n        if unique_chars.count > max {\n          \
    \  max = unique_chars.count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvi4xdjo8/tmpvi4xdjo8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3fdfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3faf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3faf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3faf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi4xdjo8                        0x000055df61372933 <unavailable> + 6451

    5    libc.so.6                          0x00002aea3ffe7460 __libc_start_main +
    245

    6    tmpvi4xdjo8                        0x000055df61372359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max = words[0]\n    for word in words {\n        if word.count > max.count\
    \ {\n            max = word\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpityx8e3_/tmpityx8e3_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ec30eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ec2de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ec2de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ec2de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpityx8e3_                        0x000055d0550de873 <unavailable> + 6259

    5    libc.so.6                          0x00002b6ec32da460 __libc_start_main +
    245

    6    tmpityx8e3_                        0x000055d0550de299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp_032ezfv.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n   \
    \     let count = Set(word).count\n        if count > max_count {\n          \
    \  max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpvjlh8mj7/tmpvjlh8mj7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80100b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b800fdabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b800fdab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b800fdaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlh8mj7                        0x0000560555284933 <unavailable> + 6451

    5    libc.so.6                          0x00002b80102a0460 __libc_start_main +
    245

    6    tmpvjlh8mj7                        0x0000560555284359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var max_word = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqfi9juso/tmpqfi9juso.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cea8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cea5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cea5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cea5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfi9juso                        0x000055c40ae3a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4ceaaa1460 __libc_start_main +
    245

    6    tmpqfi9juso                        0x000055c40ae3a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
    \ different words. Return the word with maximum number\n/// of unique characters.\
    \ If multiple strings have maximum number of unique\n/// characters, return the\
    \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"\
    name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\"\
    , \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"\
    bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n\
    \    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpz67u52rv/tmpz67u52rv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad12a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad12771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad12771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad127707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz67u52rv                        0x000055add00a4993 <unavailable> + 6547

    5    libc.so.6                          0x00002aad12c66460 __libc_start_main +
    245

    6    tmpz67u52rv                        0x000055add00a43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013362
