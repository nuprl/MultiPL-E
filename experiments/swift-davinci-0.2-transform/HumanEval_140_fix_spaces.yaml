name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>>\
  \ fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text:\
  \ \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n\
  /// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let spaces = CharacterSet.whitespaces\n    let underscore = \"\
    _\"\n    let dash = \"-\"\n    var result = text.trimmingCharacters(in: spaces)\n\
    \    result = result.replacingOccurrences(of: \" \", with: underscore)\n    result\
    \ = result.replacingOccurrences(of: \"__\", with: dash)\n    return result", " \
    \   var result = \"\"\n    var spaceCount = 0\n    for char in text {\n      \
    \  if char == \" \" {\n            spaceCount += 1\n            if spaceCount\
    \ == 2 {\n                result += \"-\"\n            }\n        } else {\n \
    \           if spaceCount == 1 {\n                result += \"_\"\n          \
    \  }\n            spaceCount = 0\n            result += String(char)\n       \
    \ }\n    }\n    return result", "    var result = \"\"\n    var space_count =\
    \ 0\n    for char in text {\n        if char == \" \" {\n            space_count\
    \ += 1\n            if space_count == 1 {\n                result += \"_\"\n \
    \           } else if space_count == 2 {\n                result += \"_\"\n  \
    \          } else {\n                result += \"-\"\n            }\n        }\
    \ else {\n            space_count = 0\n            result += String(char)\n  \
    \      }\n    }\n    return result", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return result", "    var result = \"\"\n    var prev_char = \"\"\n    var\
    \ space_count = 0\n    for char in text {\n        if char == \" \" {\n      \
    \      space_count += 1\n            if space_count > 2 {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            space_count = 0\n            result += String(char)\n\
    \        }\n        prev_char = String(char)\n    }\n    return result", '    return
    text.replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " ", with: "_")',
  "    var result = \"\"\n    var prevChar = \"\"\n    var count = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            if prevChar == \" \" {\n\
    \                count += 1\n            } else {\n                count = 1\n\
    \            }\n            if count > 2 {\n                result += \"-\"\n\
    \            } else {\n                result += \"_\"\n            }\n      \
    \  } else {\n            result += String(char)\n            count = 0\n     \
    \   }\n        prevChar = String(char)\n    }\n    return result", "    var result\
    \ = text\n    result = result.replacingOccurrences(of: \" \", with: \"_\")\n \
    \   result = result.replacingOccurrences(of: \"__\", with: \"_\")\n    result\
    \ = result.replacingOccurrences(of: \"___\", with: \"-\")\n    return result",
  "    let text = text.replacingOccurrences(of: \" \", with: \"_\")\n    let text\
    \ = text.replacingOccurrences(of: \"__\", with: \"_\")\n    let text = text.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return text", "    let fixed_text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let fixed_text_2 = fixed_text.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    let fixed_text_3 = fixed_text_2.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return fixed_text_3", "    var result = \"\"\n  \
    \  var space_count = 0\n    for char in text {\n        if char == \" \" {\n \
    \           space_count += 1\n            if space_count > 2 {\n             \
    \   result += \"-\"\n            } else {\n                result += \"_\"\n \
    \           }\n        } else {\n            space_count = 0\n            result\
    \ += String(char)\n        }\n    }\n    return result", "    let space = \" \"\
    \n    let underscore = \"_\"\n    let dash = \"-\"\n    var result = text\n  \
    \  result = result.replacingOccurrences(of: space, with: underscore)\n    result\
    \ = result.replacingOccurrences(of: space + space + space, with: dash)\n    return\
    \ result", "    let space = Character(\" \")\n    let underscore = Character(\"\
    _\")\n    let dash = Character(\"-\")\n    var result = \"\"\n    var count =\
    \ 0\n    for char in text {\n        if char == space {\n            count +=\
    \ 1\n            if count == 1 {\n                result.append(underscore)\n\
    \            } else if count == 2 {\n                result.append(dash)\n   \
    \         }\n        } else {\n            result.append(char)\n            count\
    \ = 0\n        }\n    }\n    return result", '    return text.replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var last_char = \"\"\n    var space_count\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            space_count\
    \ += 1\n            if space_count > 2 {\n                result += \"-\"\n  \
    \          } else {\n                result += \"_\"\n            }\n        }\
    \ else {\n            space_count = 0\n            result += String(char)\n  \
    \      }\n        last_char = String(char)\n    }\n    return result", "    let\
    \ space = \" \"\n    let underscore = \"_\"\n    let dash = \"-\"\n    var result\
    \ = text\n    var previous_char = \"\"\n    var current_char = \"\"\n    var next_char\
    \ = \"\"\n    var index = 0\n    var spaces = 0\n    while index < result.count\
    \ {\n        current_char = String(result[result.index(result.startIndex, offsetBy:\
    \ index)])\n        if index > 0 {\n            previous_char = String(result[result.index(result.startIndex,\
    \ offsetBy: index - 1)])\n        }\n        if index < result.count - 1 {\n \
    \           next_char = String(result[result.index(result.startIndex, offsetBy:\
    \ index + 1)])\n        }\n        if current_char == space {\n            if\
    \ previous_char == space {\n                spaces += 1\n                if spaces\
    \ > 2 {\n                    result.replaceSubrange(result.index(result.startIndex,\
    \ offsetBy: index)..<result.index(result.startIndex, offsetBy: index + 1), with:\
    \ dash)\n                }\n            } else {\n                spaces = 1\n\
    \                result.replaceSubrange(result.index(result.startIndex, offsetBy:\
    \ index)..<result.index(result.startIndex, offsetBy: index + 1), with: underscore)\n\
    \            }\n        } else {\n            spaces = 0\n        }\n        index\
    \ += 1\n    }\n    return result", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return result", "    var result = \"\"\n    var last_char = \"\"\n    var\
    \ space_count = 0\n    for char in text {\n        if char == \" \" {\n      \
    \      space_count += 1\n            if space_count > 2 {\n                continue\n\
    \            }\n        } else {\n            space_count = 0\n        }\n   \
    \     if last_char == \" \" && char == \" \" {\n            result.removeLast()\n\
    \            result.append(\"-\")\n        } else {\n            result.append(char)\n\
    \        }\n        last_char = char\n    }\n    return result"]
stop_tokens:
- "\n}"
