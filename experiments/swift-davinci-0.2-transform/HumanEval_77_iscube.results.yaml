language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppgffjt6_.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                       ^~~\n/tmp/tmppgffjt6_.swift:19:83: error: cannot find\
    \ 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \             ^~~\n/tmp/tmppgffjt6_.swift:19:119: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    \                                                                            \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1659824711
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64 || a == 8 || a == -8 || a == 27 || a == -27 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplmtleqxo.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 64 ||\
    \ a == -64 || a == 8 || a == -8 || a == 27 || a == -27 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0) || (a < 0 && a % 2 != 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp0mjaq6w8/tmp0mjaq6w8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b082f0a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b082ed9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b082ed9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b082ed9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0mjaq6w8                        0x000055cbdb78f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b082f293460 __libc_start_main +
    245

    6    tmp0mjaq6w8                        0x000055cbdb78eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == 8 || a == 27 || a == -8 || a == -27\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpact1viqr/tmpact1viqr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fe7c53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fe794ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fe794a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fe79497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpact1viqr                        0x0000556edda593fb <unavailable> + 5115

    5    libc.so.6                          0x00002b6fe7e3f460 __libc_start_main +
    245

    6    tmpact1viqr                        0x0000556edda58e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp2ztco6zb/tmp2ztco6zb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c939f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c936eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c936ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c936e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ztco6zb                        0x000055ad83e711b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b8c93bdf460 __libc_start_main +
    245

    6    tmp2ztco6zb                        0x000055ad83e70e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl8ufxhpq.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var i = 1\n    while i * i * i <= abs(a) {\n        if i * i * i == abs(a)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    // your code here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp_0ib_a7v/tmp_0ib_a7v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f6e9a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f6e69ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f6e69a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f6e6997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0ib_a7v                        0x00005634eee651b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b1f6eb8f460 __libc_start_main +
    245

    6    tmp_0ib_a7v                        0x00005634eee64e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let b = a.squareRoot()\n    return b.isInteger\
    \ && b.square() == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgnwon0s2.swift:19:15: error: value of type 'Int' has no member\
    \ 'squareRoot'\n    let b = a.squareRoot()\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp2ztco6zb/tmp2ztco6zb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c939f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c936eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c936ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c936e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ztco6zb                        0x000055ad83e711b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b8c93bdf460 __libc_start_main +
    245

    6    tmp2ztco6zb                        0x000055ad83e70e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && a % 2\
    \ == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpy6xntca7/tmpy6xntca7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b273f99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b273f695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b273f695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b273f6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6xntca7                        0x0000557129b0a32d <unavailable> + 4909

    5    libc.so.6                          0x00002b273fb8a460 __libc_start_main +
    245

    6    tmpy6xntca7                        0x0000557129b09ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7okfhcx.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpn7okfhcx.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpn7okfhcx.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 8) || (a == 27) || (a == -8) || (a == -27)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp40y0tpeo/tmp40y0tpeo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e9294ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e92641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e92641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e926407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40y0tpeo                        0x000055bb2d1c6311 <unavailable> + 4881

    5    libc.so.6                          0x00002b8e92b36460 __libc_start_main +
    245

    6    tmp40y0tpeo                        0x000055bb2d1c5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 64) || (a == -64)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf4g09bhi/tmpf4g09bhi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0a6f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0a6c79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0a6c79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0a6c787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4g09bhi                        0x00005597fe5073fb <unavailable> + 5115

    5    libc.so.6                          0x00002ac0a716e460 __libc_start_main +
    245

    6    tmpf4g09bhi                        0x00005597fe506e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7okfhcx.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpn7okfhcx.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpn7okfhcx.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 64) || (a == -64)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf4g09bhi/tmpf4g09bhi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0a6f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0a6c79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0a6c79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0a6c787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4g09bhi                        0x00005597fe5073fb <unavailable> + 5115

    5    libc.so.6                          0x00002ac0a716e460 __libc_start_main +
    245

    6    tmpf4g09bhi                        0x00005597fe506e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp280lzft7.swift:19:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmp280lzft7.swift:19:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmp280lzft7.swift:19:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjgbexuwr.swift:19:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a),\
    \ 1.0/3.0))\n                                                        ^~~\n/tmp/tmpjgbexuwr.swift:19:85:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ (a > 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n       \
    \                                                                            \
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let x = Int(pow(Double(a), 1.0/3.0))\n    return\
    \ x * x * x == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb_ianr9l.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 64) || (a == -64)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf4g09bhi/tmpf4g09bhi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0a6f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0a6c79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0a6c79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0a6c787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4g09bhi                        0x00005597fe5073fb <unavailable> + 5115

    5    libc.so.6                          0x00002ac0a716e460 __libc_start_main +
    245

    6    tmpf4g09bhi                        0x00005597fe506e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 0 {\n        return true\n    }\n    var i = 1\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true\n        }\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpxghe1wmx/tmpxghe1wmx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88f1487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88f117eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88f117e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88f117d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxghe1wmx                        0x000055eaebe2729d <unavailable> + 4765

    5    libc.so.6                          0x00002b88f1673460 __libc_start_main +
    245

    6    tmpxghe1wmx                        0x000055eaebe26e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && a % 2\
    \ == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpy6xntca7/tmpy6xntca7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b273f99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b273f695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b273f695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b273f6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6xntca7                        0x0000557129b0a32d <unavailable> + 4909

    5    libc.so.6                          0x00002b273fb8a460 __libc_start_main +
    245

    6    tmpy6xntca7                        0x0000557129b09ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n\
    \    return a == cubeRoot * cubeRoot * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0526zp5.swift:19:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    let x = Int(pow(Double(a),\
    \ 1.0/3.0))\n    return x * x * x == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfblr__jc.swift:25:17: error: cannot find 'pow' in scope\n    let\
    \ x = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 64) || (a == -64)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf4g09bhi/tmpf4g09bhi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0a6f82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0a6c79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0a6c79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0a6c787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4g09bhi                        0x00005597fe5073fb <unavailable> + 5115

    5    libc.so.6                          0x00002ac0a716e460 __libc_start_main +
    245

    6    tmpf4g09bhi                        0x00005597fe506e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var i = 1\n    while i * i * i < abs(a) {\n        i += 1\n    }\n    return\
    \ i * i * i == abs(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1z3jlabv.swift:19:46: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                  ^~~\n/tmp/tmp1z3jlabv.swift:19:77: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                      ^~~\n/tmp/tmp1z3jlabv.swift:19:108:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || (a > 0 &&\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)\n                                                          \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphnwj75dn.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                         ^~~\n/tmp/tmphnwj75dn.swift:19:62:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                             ^~~\n/tmp/tmphnwj75dn.swift:19:98:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1659824711
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && a % 2\
    \ == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpy6xntca7/tmpy6xntca7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b273f99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b273f695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b273f695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b273f6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6xntca7                        0x0000557129b0a32d <unavailable> + 4909

    5    libc.so.6                          0x00002b273fb8a460 __libc_start_main +
    245

    6    tmpy6xntca7                        0x0000557129b09ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7okfhcx.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpn7okfhcx.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpn7okfhcx.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    let root = Int(pow(Double(a),\
    \ 1.0/3.0))\n    return root * root * root == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu_zwk3st.swift:25:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7okfhcx.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpn7okfhcx.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpn7okfhcx.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343\
    \ || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000\
    \ || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a ==\
    \ 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 ||\
    \ a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a == 110592 ||\
    \ a == -110592 || a == 117649 || a == -\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr3pvdgp1.swift:19:1322: error: unary operator cannot be separated\
    \ from its operand\n    return a == 0 || a == 1 || a == -1 || a == 64 || a ==\
    \ -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343\
    \ || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000\
    \ || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197\
    \ || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096\
    \ || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859\
    \ || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a ==\
    \ -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625\
    \ || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 ||\
    \ a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a ==\
    \ -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937\
    \ || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 ||\
    \ a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a ==\
    \ -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921\
    \ || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 ||\
    \ a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a ==\
    \ -97336 || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a ==\
    \ 117649 || a == -\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 0 {\n        return true\n    }\n    for i in 1...a {\n        if\
    \ i * i * i == a {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpazoli71y/tmpazoli71y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7effd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7efccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7efccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7efccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazoli71y                        0x000055a8c8a0941d <unavailable> + 5149

    5    libc.so.6                          0x00002ae7f01c2460 __libc_start_main +
    245

    6    tmpazoli71y                        0x000055a8c8a08fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var i = 1\n    while i * i * i <= abs(a) {\n        if i * i * i == abs(a)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && a % 2\
    \ == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpy6xntca7/tmpy6xntca7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b273f99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b273f695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b273f695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b273f6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6xntca7                        0x0000557129b0a32d <unavailable> + 4909

    5    libc.so.6                          0x00002b273fb8a460 __libc_start_main +
    245

    6    tmpy6xntca7                        0x0000557129b09ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 1\n    while i * i * i < a {\n    \
    \    i += 1\n    }\n    return i * i * i == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp93jo9sie/tmp93jo9sie.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8fe90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8fb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8fb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8fb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93jo9sie                        0x00005633e452229d <unavailable> + 4765

    5    libc.so.6                          0x00002afc9007c460 __libc_start_main +
    245

    6    tmp93jo9sie                        0x00005633e4521e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8moobuju.swift:19:62: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \    ^~~\n/tmp/tmp8moobuju.swift:19:77: error: cannot find 'pow' in scope\n  \
    \  return a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 3 == 0 && a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp0evq_0qz/tmp0evq_0qz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af743409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af743100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af743100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7430ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0evq_0qz                        0x0000558728ea63a1 <unavailable> + 5025

    5    libc.so.6                          0x00002af7435f5460 __libc_start_main +
    245

    6    tmp0evq_0qz                        0x0000558728ea5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7okfhcx.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpn7okfhcx.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpn7okfhcx.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpima5ucvv/tmpima5ucvv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1acbfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1acbce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1acbce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1acbce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpima5ucvv                        0x0000558eec72b3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1acc1d9460 __libc_start_main +
    245

    6    tmpima5ucvv                        0x0000558eec72ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return a == cube * cube * cube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcnkfvdcx.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpiqg1d1wf/tmpiqg1d1wf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df1fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df1fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df1fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqg1d1wf                        0x0000561f98f362b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b76df6f0460 __libc_start_main +
    245

    6    tmpiqg1d1wf                        0x0000561f98f35ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var x = a\n    if x < 0 {\n        x = -x\n    }\n    var i = 1\n    while\
    \ i * i * i <= x {\n        if i * i * i == x {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var cube = 0\n    var i = 0\n    while cube\
    \ < a {\n        i += 1\n        cube = i * i * i\n    }\n    return cube == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpc6_w1dyw/tmpc6_w1dyw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e4979bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e49492b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e49492988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e494917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6_w1dyw                        0x000055e3ba68f29d <unavailable> + 4765

    5    libc.so.6                          0x00002b1e49987460 __libc_start_main +
    245

    6    tmpc6_w1dyw                        0x000055e3ba68ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return a == cube * cube * cube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcnkfvdcx.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i*i*i <= a {\n        if i*i*i == a {\n            return true\n        }\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0 || a == 1 || a == -1) || (a\
    \ > 1 && a % 2 == 0) || (a < -1 && a % 2 != 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpdkr5nnaa/tmpdkr5nnaa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d79dc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d79abcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d79abc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d79abb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkr5nnaa                        0x000055d974a512b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1d79fb1460 __libc_start_main +
    245

    6    tmpdkr5nnaa                        0x000055d974a50ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n\
    \    return a == cubeRoot * cubeRoot * cubeRoot\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0526zp5.swift:19:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetw21whn.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpetw21whn.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpetw21whn.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8moobuju.swift:19:62: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \    ^~~\n/tmp/tmp8moobuju.swift:19:77: error: cannot find 'pow' in scope\n  \
    \  return a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ ((a > 1) && (a % 8 == 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp_5ko_e59/tmp_5ko_e59.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b570635fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5706056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5706056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57060557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ko_e59                        0x000055bd01f913a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b570654b460 __libc_start_main +
    245

    6    tmp_5ko_e59                        0x000055bd01f90ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsrz64m6i.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp2ztco6zb/tmp2ztco6zb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c939f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c936eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c936ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c936e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ztco6zb                        0x000055ad83e711b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b8c93bdf460 __libc_start_main +
    245

    6    tmp2ztco6zb                        0x000055ad83e70e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 0\n    while i * i * i < a {\n    \
    \    i += 1\n    }\n    return i * i * i == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpendphdmy/tmpendphdmy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae96ec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae96bbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae96bbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae96bbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpendphdmy                        0x000056222ffba29d <unavailable> + 4765

    5    libc.so.6                          0x00002aae970b2460 __libc_start_main +
    245

    6    tmpendphdmy                        0x000056222ffb9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl8ufxhpq.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return a == cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp3b_0d7r2/tmp3b_0d7r2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dbc5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dbc29cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dbc29c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dbc29b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3b_0d7r2                        0x0000558154b6a311 <unavailable> + 4881

    5    libc.so.6                          0x00002b0dbc791460 __libc_start_main +
    245

    6    tmp3b_0d7r2                        0x0000558154b69e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp280lzft7.swift:19:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmp280lzft7.swift:19:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmp280lzft7.swift:19:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343\
    \ || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000\
    \ || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a ==\
    \ 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 ||\
    \ a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a == 110592 ||\
    \ a == -110592 || a == 117649 || a == -\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr3pvdgp1.swift:19:1322: error: unary operator cannot be separated\
    \ from its operand\n    return a == 0 || a == 1 || a == -1 || a == 64 || a ==\
    \ -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343\
    \ || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000\
    \ || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197\
    \ || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096\
    \ || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859\
    \ || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a ==\
    \ -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625\
    \ || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 ||\
    \ a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a ==\
    \ -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937\
    \ || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 ||\
    \ a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a ==\
    \ -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921\
    \ || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 ||\
    \ a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a ==\
    \ -97336 || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a ==\
    \ 117649 || a == -\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             "
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp280lzft7.swift:19:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmp280lzft7.swift:19:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmp280lzft7.swift:19:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return cube == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpkqqbszkl/tmpkqqbszkl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bbc344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bbc03bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bbc03b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bbc03a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqqbszkl                        0x0000560b5c790311 <unavailable> + 4881

    5    libc.so.6                          0x00002b7bbc530460 __libc_start_main +
    245

    6    tmpkqqbszkl                        0x0000560b5c78fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return a == cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp3b_0d7r2/tmp3b_0d7r2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dbc5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dbc29cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dbc29c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dbc29b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3b_0d7r2                        0x0000558154b6a311 <unavailable> + 4881

    5    libc.so.6                          0x00002b0dbc791460 __libc_start_main +
    245

    6    tmp3b_0d7r2                        0x0000558154b69e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var x = 1\n    while\
    \ x * x * x < a {\n        x += 1\n    }\n    return x * x * x == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp9om171j/tmpp9om171j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c661cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c6313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c6313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c63127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9om171j                        0x000055d3928983fb <unavailable> + 5115

    5    libc.so.6                          0x00002b80c6808460 __libc_start_main +
    245

    6    tmpp9om171j                        0x000055d392897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824708
