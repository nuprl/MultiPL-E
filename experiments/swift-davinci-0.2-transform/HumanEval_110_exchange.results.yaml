language: swift
name: HumanEval_110_exchange
results:
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count {\n        return \"YES\"\n    } else if lst1Odd.count\
    \ + lst2Odd.count == lst1.count {\n        return \"YES\"\n    } else {\n    \
    \    return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7v1zy9yv/tmp7v1zy9yv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07525e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07522d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07522d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07522d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v1zy9yv                        0x000055db9bf3df96 <unavailable> + 8086

    5    libc.so.6                          0x00002b07527cc460 __libc_start_main +
    245

    6    tmp7v1zy9yv                        0x000055db9bf3d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    var oddCount = 0\n    for i in lst1 {\n        if\
    \ i % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n     \
    \       evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \    }\n    if evenCount % 2 == 0 {\n        return \"YES\"\n    } else {\n  \
    \      return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpppqhemxm/tmpppqhemxm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52cbc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52c8bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52c8bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52c8bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppqhemxm                        0x0000562e088bcb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae52cdb1460 __libc_start_main +
    245

    6    tmpppqhemxm                        0x0000562e088bc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count + odds.count ==\
    \ lst1.count + lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpa7n_a5up/tmpa7n_a5up.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eddec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eddbbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eddbba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eddbb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7n_a5up                        0x0000560ba946262d <unavailable> + 5677

    5    libc.so.6                          0x00002b6ede0af460 __libc_start_main +
    245

    6    tmpa7n_a5up                        0x0000560ba94621f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if !isExchange {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7bf_rv1s/tmp7bf_rv1s.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e67a71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e67768b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e67768988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e677677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bf_rv1s                        0x0000562f07df587f <unavailable> + 6271

    5    libc.so.6                          0x00002b8e67c5d460 __libc_start_main +
    245

    6    tmp7bf_rv1s                        0x0000562f07df52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdo_vte8i/tmpdo_vte8i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb6850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb6547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb6547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb65467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo_vte8i                        0x00005592c898862d <unavailable> + 5677

    5    libc.so.6                          0x00002accb6a3c460 __libc_start_main +
    245

    6    tmpdo_vte8i                        0x00005592c89881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let tmp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = tmp\n                    break\n  \
    \              }\n                j += 1\n            }\n            if j == lst2.count\
    \ {\n                return \"NO\"\n            }\n        }\n        i += 1\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpn11djdm5/tmpn11djdm5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2369d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2369a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2369a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2369a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn11djdm5                        0x000055c8bc99a79f <unavailable> + 6047

    5    libc.so.6                          0x00002b2369f49460 __libc_start_main +
    245

    6    tmpn11djdm5                        0x000055c8bc99a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ > lst2Even.count {\n        return \"NO\"\n    } else if lst1Odd.count > lst2Odd.count\
    \ {\n        return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpf5o6ypn9/tmpf5o6ypn9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b164fc8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b164f986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b164f986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b164f9857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5o6ypn9                        0x000055f0161f2ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b164fe7b460 __libc_start_main +
    245

    6    tmpf5o6ypn9                        0x000055f0161f21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if !isExchange {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7bf_rv1s/tmp7bf_rv1s.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e67a71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e67768b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e67768988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e677677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bf_rv1s                        0x0000562f07df587f <unavailable> + 6271

    5    libc.so.6                          0x00002b8e67c5d460 __libc_start_main +
    245

    6    tmp7bf_rv1s                        0x0000562f07df52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    while !lst1.isEmpty {\n        if lst1.first! % 2 == 0 {\n            lst1.removeFirst()\n\
    \        } else {\n            if lst2.isEmpty {\n                return \"NO\"\
    \n            }\n            lst1.removeFirst()\n            lst2.removeFirst()\n\
    \        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpn7bm38zo/tmpn7bm38zo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea03a7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea03773b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea03773988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea037727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7bm38zo                        0x0000557d9006681f <unavailable> + 6175

    5    libc.so.6                          0x00002aea03c68460 __libc_start_main +
    245

    6    tmpn7bm38zo                        0x0000557d90066279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp382795zz/tmp382795zz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ce355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ce355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ce3547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp382795zz                        0x000056307d79cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab1ce84a460 __libc_start_main +
    245

    6    tmp382795zz                        0x000056307d79c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 0\
    \ {\n            evens += 1\n        }\n    }\n    for i in 0..<lst2.count {\n\
    \        if lst2[i] % 2 == 0 {\n            evens -= 1\n        }\n    }\n   \
    \ if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgjn6zvn5/tmpgjn6zvn5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97cf3e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97cf0dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97cf0da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97cf0d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjn6zvn5                        0x0000555d086ecb57 <unavailable> + 6999

    5    libc.so.6                          0x00002b97cf5cf460 __libc_start_main +
    245

    6    tmpgjn6zvn5                        0x0000555d086ec289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for\
    \ j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n\
    \                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n      \
    \          evenCount += 1\n            }\n        }\n    }\n    if evenCount ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpzfj8zhxc/tmpzfj8zhxc.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29e9a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29e9727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29e9727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29e97267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfj8zhxc                        0x000055a2ebbba87f <unavailable> + 6271

    5    libc.so.6                          0x00002b29e9c1c460 __libc_start_main +
    245

    6    tmpzfj8zhxc                        0x000055a2ebbba2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count {\n        for i in 0..<lst2.count {\n            if lst2[i] %\
    \ 2 != 0 {\n                lst2.remove(at: i)\n                lst2.append(lst1Odd[0])\n\
    \                lst1.remove(at: lst1.firstIndex(of: lst1Odd[0])!)\n         \
    \       lst1.append(lst2Odd[0])\n                lst2.remove(at: lst2.firstIndex(of:\
    \ lst2Odd[0])!)\n                lst1Even = lst1.filter { $0 % 2 == 0 }\n    \
    \            lst2Even = lst2.filter { $0 % 2 == 0 }\n                lst1Odd =\
    \ lst1.filter { $0 % 2 != 0 }\n                lst2Odd = lst2.filter { $0 % 2\
    \ != 0 }\n                if lst1Even.count == lst1.count && lst2Even.count ==\
    \ lst2.count {\n                    return \"YES\"\n                } else if\
    \ lst1Odd.count == lst1.count && lst2Odd.count == lst2.count {\n             \
    \       return \"YES\"\n                }\n            }\n        }\n    } else\
    \ if lst2Even.count == lst2.count {\n        for\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpazt2vub1.swift:46:12: error: expected pattern\n        for\n  \
    \         ^\n/tmp/tmpazt2vub1.swift:46:12: error: expected Sequence expression\
    \ for for-each loop\n        for\n           ^\n/tmp/tmpazt2vub1.swift:46:12:\
    \ error: expected '{' to start the body of for-each loop\n        for\n      \
    \     ^\n/tmp/tmpazt2vub1.swift:68:62: error: expected '}' at end of brace statement\n\
    assert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")\n            \
    \                                                 ^\n/tmp/tmpazt2vub1.swift:15:51:\
    \ note: to match this opening '{'\nfunc exchange(lst1: [Int], lst2: [Int]) ->\
    \ String {\n                                                  ^\n/tmp/tmpazt2vub1.swift:50:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpn11djdm5/tmpn11djdm5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2369d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2369a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2369a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2369a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn11djdm5                        0x000055c8bc99a79f <unavailable> + 6047

    5    libc.so.6                          0x00002b2369f49460 __libc_start_main +
    245

    6    tmpn11djdm5                        0x000055c8bc99a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 1 {\n            while j < lst2.count {\n                if lst2[j] %\
    \ 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpvmgj_0mt/tmpvmgj_0mt.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c199dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c196d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c196d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c196d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmgj_0mt                        0x000056534139c77f <unavailable> + 6015

    5    libc.so.6                          0x00002b8c19bc6460 __libc_start_main +
    245

    6    tmpvmgj_0mt                        0x000056534139c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for\
    \ j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n\
    \                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n      \
    \          evenCount += 1\n            }\n        }\n    }\n    if evenCount ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpzfj8zhxc/tmpzfj8zhxc.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29e9a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29e9727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29e9727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29e97267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfj8zhxc                        0x000055a2ebbba87f <unavailable> + 6271

    5    libc.so.6                          0x00002b29e9c1c460 __libc_start_main +
    245

    6    tmpzfj8zhxc                        0x000055a2ebbba2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter { $0 % 2 != 0\
    \ }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Odd.count\
    \ == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpihjxpsjg/tmpihjxpsjg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8904240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903f37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903f37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903f367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihjxpsjg                        0x0000558510072f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b890442c460 __libc_start_main +
    245

    6    tmpihjxpsjg                        0x00005585100721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1IsEven = lst1.filter { $0 % 2 ==\
    \ 0 }.count == lst1.count\n    let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count\
    \ == lst2.count\n    return lst1IsEven || lst2IsEven ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpml1wg71u/tmpml1wg71u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c3797bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c37672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c37672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c376717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpml1wg71u                        0x00005636a241262d <unavailable> + 5677

    5    libc.so.6                          0x00002b9c37b67460 __libc_start_main +
    245

    6    tmpml1wg71u                        0x00005636a24121f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp382795zz/tmp382795zz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ce355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ce355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ce3547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp382795zz                        0x000056307d79cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab1ce84a460 __libc_start_main +
    245

    6    tmp382795zz                        0x000056307d79c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    evenCount += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    if evenCount\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9coiss68/tmp9coiss68.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c17afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c14a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c14a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c14a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9coiss68                        0x00005619b035787f <unavailable> + 6271

    5    libc.so.6                          0x00002b60c199b460 __libc_start_main +
    245

    6    tmp9coiss68                        0x00005619b03572d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzeds21nt/tmpzeds21nt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4f365fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4f3356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4f3356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4f33557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeds21nt                        0x000056019ce6fac7 <unavailable> + 6855

    5    libc.so.6                          0x00002ad4f384b460 __libc_start_main +
    245

    6    tmpzeds21nt                        0x000056019ce6f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n    \
    \    if num % 2 == 0 {\n            evens.append(num)\n        } else {\n    \
    \        odds.append(num)\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 == 0 {\n            evens.append(num)\n        } else {\n          \
    \  odds.append(num)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp98d2lw36/tmp98d2lw36.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b580af4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b580ac45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b580ac45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b580ac447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98d2lw36                        0x0000561eb0f73c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b580b13a460 __libc_start_main +
    245

    6    tmp98d2lw36                        0x0000561eb0f73349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptnl12hih/tmptnl12hih.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ae2a2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ae2724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ae2724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ae27237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnl12hih                        0x00005604ce4aa79f <unavailable> + 6047

    5    libc.so.6                          0x00002b6ae2c19460 __libc_start_main +
    245

    6    tmptnl12hih                        0x00005604ce4aa1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp572mpqbw/tmp572mpqbw.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393a8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393a5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393a5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393a5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp572mpqbw                        0x000055f9a423477f <unavailable> + 6015

    5    libc.so.6                          0x00002b393aa9c460 __libc_start_main +
    245

    6    tmp572mpqbw                        0x000055f9a42341d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 1 {\n            while j < lst2.count {\n                if lst2[j] %\
    \ 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpvmgj_0mt/tmpvmgj_0mt.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c199dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c196d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c196d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c196d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmgj_0mt                        0x000056534139c77f <unavailable> + 6015

    5    libc.so.6                          0x00002b8c19bc6460 __libc_start_main +
    245

    6    tmpvmgj_0mt                        0x000056534139c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpiasf3brb/tmpiasf3brb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b182e7f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b182e4efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b182e4ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b182e4ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiasf3brb                        0x000055b4a8436b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b182e9e4460 __libc_start_main +
    245

    6    tmpiasf3brb                        0x000055b4a8436249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    let lst1EvenCount\
    \ = lst1Even.count\n    let lst2EvenCount = lst2Even.count\n    let lst1OddCount\
    \ = lst1Odd.count\n    let lst2OddCount = lst2Odd.count\n    if lst1EvenCount\
    \ > lst2EvenCount {\n        return \"NO\"\n    } else if lst1EvenCount == lst2EvenCount\
    \ {\n        if lst1OddCount == lst2OddCount {\n            return \"YES\"\n \
    \       } else {\n            return \"NO\"\n        }\n    } else {\n       \
    \ if lst1OddCount > lst2OddCount {\n            return \"NO\"\n        } else\
    \ {\n            return \"YES\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpg7hrfoqb/tmpg7hrfoqb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d9f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d9c81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d9c81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d9c807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7hrfoqb                        0x00005619888abac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b69da176460 __libc_start_main +
    245

    6    tmpg7hrfoqb                        0x00005619888ab1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 1 {\n            while j < lst2.count {\n                if lst2[j] %\
    \ 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpvmgj_0mt/tmpvmgj_0mt.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c199dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c196d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c196d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c196d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmgj_0mt                        0x000056534139c77f <unavailable> + 6015

    5    libc.so.6                          0x00002b8c19bc6460 __libc_start_main +
    245

    6    tmpvmgj_0mt                        0x000056534139c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgn34istb/tmpgn34istb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4036aaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40367a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40367a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40367a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn34istb                        0x0000561d98a6247d <unavailable> + 5245

    5    libc.so.6                          0x00002b4036c9a460 __libc_start_main +
    245

    6    tmpgn34istb                        0x0000561d98a62049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n \
    \   if lst1Even.count + lst2Even.count >= lst1.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 0 {\n            lst1[i] = lst2[j]\n            i += 1\n            j\
    \ += 1\n        } else {\n            j += 1\n        }\n    }\n    if lst1.contains(where:\
    \ { $0 % 2 != 0 }) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter { $0 % 2 != 0\
    \ }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Odd.count\
    \ == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpihjxpsjg/tmpihjxpsjg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8904240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903f37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903f37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903f367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihjxpsjg                        0x0000558510072f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b890442c460 __libc_start_main +
    245

    6    tmpihjxpsjg                        0x00005585100721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1IsEven = lst1.filter { $0 % 2 ==\
    \ 0 }.count == lst1.count\n    let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count\
    \ == lst2.count\n    if lst1IsEven && lst2IsEven {\n        return \"YES\"\n \
    \   }\n    let lst1IsOdd = lst1.filter { $0 % 2 != 0 }.count == lst1.count\n \
    \   let lst2IsOdd = lst2.filter { $0 % 2 != 0 }.count == lst2.count\n    if lst1IsOdd\
    \ && lst2IsOdd {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp4ovasm3l/tmp4ovasm3l.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc2bb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc28a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc28a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc28a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ovasm3l                        0x00005563f2ad662d <unavailable> + 5677

    5    libc.so.6                          0x00002b3fc2d9e460 __libc_start_main +
    245

    6    tmp4ovasm3l                        0x00005563f2ad61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for\
    \ j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n\
    \                let temp = lst1[i]\n                lst1[i] = lst2[j]\n     \
    \           lst2[j] = temp\n                evenCount += 1\n            }\n  \
    \      }\n    }\n    if evenCount == lst1.count {\n        return \"YES\"\n  \
    \  }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for (index, element) in lst1.enumerated() {\n\
    \        if element % 2 != 0 {\n            for (index2, element2) in lst2.enumerated()\
    \ {\n                if element2 % 2 == 0 {\n                    lst1[index] =\
    \ element2\n                    lst2[index2] = element\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if isExchange {\n            break\n        }\n    }\n    if isExchange\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpadxel8ot/tmpadxel8ot.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfa622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfa319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfa319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfa3187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadxel8ot                        0x000055e9639c38ef <unavailable> + 6383

    5    libc.so.6                          0x00002b7cfa80e460 __libc_start_main +
    245

    6    tmpadxel8ot                        0x000055e9639c3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            let temp = lst1[i]\n\
    \            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i += 1\n\
    \            j += 1\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp382795zz/tmp382795zz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ce355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ce355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ce3547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp382795zz                        0x000056307d79cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab1ce84a460 __libc_start_main +
    245

    6    tmp382795zz                        0x000056307d79c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var count = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    if count == lst1.count {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpqozvgkxh/tmpqozvgkxh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc3d71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc3a68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc3a68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc3a677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqozvgkxh                        0x0000560e0902570d <unavailable> + 5901

    5    libc.so.6                          0x00002b6dc3f5d460 __libc_start_main +
    245

    6    tmpqozvgkxh                        0x0000560e090252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n \
    \   if lst1Even.count + lst2Even.count >= lst1.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpb_9ppu84/tmpb_9ppu84.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f41cb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f419a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f419a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f419a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_9ppu84                        0x0000561bbb8aa62d <unavailable> + 5677

    5    libc.so.6                          0x00002b3f41e9c460 __libc_start_main +
    245

    6    tmpb_9ppu84                        0x0000561bbb8aa1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even1 = lst1.filter { $0 % 2 == 0 }\n\
    \    let odd1 = lst1.filter { $0 % 2 != 0 }\n    let even2 = lst2.filter { $0\
    \ % 2 == 0 }\n    let odd2 = lst2.filter { $0 % 2 != 0 }\n    if even1.count +\
    \ even2.count == lst1.count + lst2.count {\n        return \"YES\"\n    } else\
    \ if odd1.count + odd2.count == lst1.count + lst2.count {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxemvh4ok/tmpxemvh4ok.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b977c008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b977bcffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b977bcff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b977bcfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxemvh4ok                        0x000055650f09562d <unavailable> + 5677

    5    libc.so.6                          0x00002b977c1f4460 __libc_start_main +
    245

    6    tmpxemvh4ok                        0x000055650f0951f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp382795zz/tmp382795zz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ce355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ce355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ce3547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp382795zz                        0x000056307d79cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab1ce84a460 __libc_start_main +
    245

    6    tmp382795zz                        0x000056307d79c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = lst1.filter { $0 % 2 == 0 }\n    var odds = lst2.filter { $0\
    \ % 2 != 0 }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n \
    \           if odds.count == 0 {\n                return \"NO\"\n            }\n\
    \            lst1[i] = odds.removeFirst()\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            if evens.count == 0 {\n      \
    \          return \"NO\"\n            }\n            lst2[i] = evens.removeFirst()\n\
    \        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpmmfls6kb/tmpmmfls6kb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b39197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b38e8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b38e8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b38e8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmfls6kb                        0x000055f78acd59df <unavailable> + 6623

    5    libc.so.6                          0x00002b1b39383460 __libc_start_main +
    245

    6    tmpmmfls6kb                        0x000055f78acd5439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpuv1gty6k/tmpuv1gty6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9806504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98061fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98061fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98061fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuv1gty6k                        0x000055d3bb11247d <unavailable> + 5245

    5    libc.so.6                          0x00002b98066f0460 __libc_start_main +
    245

    6    tmpuv1gty6k                        0x000055d3bb112049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ > odds {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpoepgst8t/tmpoepgst8t.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add53256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add52f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add52f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add52f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoepgst8t                        0x000055ef0705967d <unavailable> + 5757

    5    libc.so.6                          0x00002add53442460 __libc_start_main +
    245

    6    tmpoepgst8t                        0x000055ef07059249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    evenCount += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    if evenCount\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9coiss68/tmp9coiss68.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c17afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c14a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c14a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c14a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9coiss68                        0x00005619b035787f <unavailable> + 6271

    5    libc.so.6                          0x00002b60c199b460 __libc_start_main +
    245

    6    tmp9coiss68                        0x00005619b03572d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxkbmatnr/tmpxkbmatnr.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0e1a02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0e16f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0e16f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0e16f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkbmatnr                        0x00005606189e0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae0e1bee460 __libc_start_main +
    245

    6    tmpxkbmatnr                        0x00005606189e0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdo_vte8i/tmpdo_vte8i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb6850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb6547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb6547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb65467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo_vte8i                        0x00005592c898862d <unavailable> + 5677

    5    libc.so.6                          0x00002accb6a3c460 __libc_start_main +
    245

    6    tmpdo_vte8i                        0x00005592c89881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbrh9n8mm/tmpbrh9n8mm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dbae48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dbab3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dbab3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dbab3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrh9n8mm                        0x00005654c72e062d <unavailable> + 5677

    5    libc.so.6                          0x00002b3dbb034460 __libc_start_main +
    245

    6    tmpbrh9n8mm                        0x00005654c72e01f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count {\n        return \"YES\"\n    } else if lst1Odd.count\
    \ + lst2Odd.count == lst1.count {\n        return \"YES\"\n    } else {\n    \
    \    return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7v1zy9yv/tmp7v1zy9yv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07525e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07522d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07522d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07522d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v1zy9yv                        0x000055db9bf3df96 <unavailable> + 8086

    5    libc.so.6                          0x00002b07527cc460 __libc_start_main +
    245

    6    tmp7v1zy9yv                        0x000055db9bf3d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1EvenCount = lst1Even.count\n    var\
    \ lst2EvenCount = lst2Even.count\n    var lst1OddCount = lst1Odd.count\n    var\
    \ lst2OddCount = lst2Odd.count\n    var lst1EvenIndex = 0\n    var lst2EvenIndex\
    \ = 0\n    var lst1OddIndex = 0\n    var lst2OddIndex = 0\n    var lst1EvenIndexMax\
    \ = lst1EvenCount - 1\n    var lst2EvenIndexMax = lst2EvenCount - 1\n    var lst1OddIndexMax\
    \ = lst1OddCount - 1\n    var lst2OddIndexMax = lst2OddCount - 1\n    while lst1EvenIndex\
    \ <= lst1EvenIndexMax && lst2EvenIndex <= lst2EvenIndexMax {\n        if lst1Even[lst1EvenIndex]\
    \ > lst2Even[lst2EvenIndex] {\n            lst1Even.append(lst2Even[lst2EvenIndex])\n\
    \            lst2Even.remove(at: lst2EvenIndex)\n            lst2EvenIndexMax\
    \ -= 1\n        } else {\n            lst2Even.append(lst1Even[lst1EvenIndex])\n\
    \            lst1Even.remove(at: lst1EvenIndex)\n            lst1EvenIndexMax\
    \ -= 1\n        }\n    }\n    while lst1OddIndex <= lst1OddIndexMax && lst2OddIndex\
    \ <= lst2OddIndexMax {\n        if lst1Odd[lst1OddIndex] > lst2Odd[lst2OddIndex]\
    \ {\n            l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpo7knplos.swift:69:62: error: expected '}' at end of brace statement\n\
    assert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")\n            \
    \                                                 ^\n/tmp/tmpo7knplos.swift:45:78:\
    \ note: to match this opening '{'\n    while lst1OddIndex <= lst1OddIndexMax &&\
    \ lst2OddIndex <= lst2OddIndexMax {\n                                        \
    \                                     ^\n/tmp/tmpo7knplos.swift:69:62: error:\
    \ expected '}' at end of brace statement\nassert(exchange(lst1: [100, 200], lst2:\
    \ [200, 200]) == \"YES\")\n                                                  \
    \           ^\n/tmp/tmpo7knplos.swift:15:51: note: to match this opening '{'\n\
    func exchange(lst1: [Int], lst2: [Int]) -> String {\n                        \
    \                          ^\n/tmp/tmpo7knplos.swift:47:13: error: cannot find\
    \ 'l' in scope\n            l\n            ^\n/tmp/tmpo7knplos.swift:51:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    evenCount += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    if evenCount\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9coiss68/tmp9coiss68.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c17afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c14a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c14a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c14a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9coiss68                        0x00005619b035787f <unavailable> + 6271

    5    libc.so.6                          0x00002b60c199b460 __libc_start_main +
    245

    6    tmp9coiss68                        0x00005619b03572d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    var oddCount = 0\n    for num in lst1 {\n        if\
    \ num % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n \
    \           evenCount += 1\n        } else {\n            oddCount += 1\n    \
    \    }\n    }\n    if evenCount % 2 == 0 && oddCount % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp37mumcyn/tmp37mumcyn.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74fdf0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74fdc03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74fdc03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74fdc027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37mumcyn                        0x000056353ab69b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b74fe0f8460 __libc_start_main +
    245

    6    tmp37mumcyn                        0x000056353ab69249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = true\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ != 0 {\n            isEven = false\n            break\n        }\n    }\n  \
    \  if isEven {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    isEven = true\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 != 0 {\n            isEven = false\n            break\n\
    \        }\n    }\n    if isEven {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp_ili6ry7/tmp_ili6ry7.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9021892c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9021589b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9021589988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90215887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ili6ry7                        0x000055e84fe6487f <unavailable> + 6271

    5    libc.so.6                          0x00002b9021a7e460 __libc_start_main +
    245

    6    tmp_ili6ry7                        0x000055e84fe642d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8bw8_hjm/tmp8bw8_hjm.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3a24bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3a21b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3a21b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3a21b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bw8_hjm                        0x0000557b9dc38c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba3a26a6460 __libc_start_main +
    245

    6    tmp8bw8_hjm                        0x0000557b9dc38349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Even.count + lst2Even.count >= lst1.count {\n   \
    \     return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count >= lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpn11djdm5/tmpn11djdm5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2369d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2369a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2369a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2369a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn11djdm5                        0x000055c8bc99a79f <unavailable> + 6047

    5    libc.so.6                          0x00002b2369f49460 __libc_start_main +
    245

    6    tmpn11djdm5                        0x000055c8bc99a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count)\
    \ == (lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprw_v26ek/tmprw_v26ek.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4093e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4090e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4090e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4090df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprw_v26ek                        0x0000559823bcd62d <unavailable> + 5677

    5    libc.so.6                          0x00002ad4095d5460 __libc_start_main +
    245

    6    tmprw_v26ek                        0x0000559823bcd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ >= lst1.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5akco3gp/tmp5akco3gp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3941fccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3941cc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3941cc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3941cc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5akco3gp                        0x0000557cd70f779f <unavailable> + 6047

    5    libc.so.6                          0x00002b39421b8460 __libc_start_main +
    245

    6    tmp5akco3gp                        0x0000557cd70f71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpkipkqjir/tmpkipkqjir.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b201e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b201e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b201e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b201e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkipkqjir                        0x000055586ec8262d <unavailable> + 5677

    5    libc.so.6                          0x00002b201e7a5460 __libc_start_main +
    245

    6    tmpkipkqjir                        0x000055586ec821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 0 {\n            lst1[i] = lst2[j]\n            i += 1\n            j\
    \ += 1\n        } else {\n            j += 1\n        }\n    }\n    if lst1.filter({\
    \ $0 % 2 == 0 }).count == lst1.count {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n    \
    \    if num % 2 == 0 {\n            evens.append(num)\n        } else {\n    \
    \        odds.append(num)\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 == 0 {\n            evens.append(num)\n        } else {\n          \
    \  odds.append(num)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp98d2lw36/tmp98d2lw36.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b580af4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b580ac45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b580ac45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b580ac447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98d2lw36                        0x0000561eb0f73c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b580b13a460 __libc_start_main +
    245

    6    tmp98d2lw36                        0x0000561eb0f73349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for num in lst1 {\n        if num % 2 == 1 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n \
    \       } else {\n            odds.append(i)\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else {\n\
    \            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9upxyvkt/tmp9upxyvkt.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d2f2bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d2efb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d2efb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d2efb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9upxyvkt                        0x000055751a2b1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b7d2f4a8460 __libc_start_main +
    245

    6    tmp9upxyvkt                        0x000055751a2b1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgn34istb/tmpgn34istb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4036aaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40367a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40367a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40367a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn34istb                        0x0000561d98a6247d <unavailable> + 5245

    5    libc.so.6                          0x00002b4036c9a460 __libc_start_main +
    245

    6    tmpgn34istb                        0x0000561d98a62049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = true\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ != 0 {\n            isEven = false\n            break\n        }\n    }\n  \
    \  if isEven {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    isEven = true\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 != 0 {\n            isEven = false\n            break\n\
    \        }\n    }\n    if isEven {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp_ili6ry7/tmp_ili6ry7.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9021892c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9021589b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9021589988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90215887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ili6ry7                        0x000055e84fe6487f <unavailable> + 6271

    5    libc.so.6                          0x00002b9021a7e460 __libc_start_main +
    245

    6    tmp_ili6ry7                        0x000055e84fe642d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n    \
    \    if num % 2 == 0 {\n            evens.append(num)\n        } else {\n    \
    \        odds.append(num)\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 == 0 {\n            evens.append(num)\n        } else {\n          \
    \  odds.append(num)\n        }\n    }\n    if evens.count >= odds.count {\n  \
    \      return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp572mpqbw/tmp572mpqbw.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393a8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393a5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393a5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393a5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp572mpqbw                        0x000055f9a423477f <unavailable> + 6015

    5    libc.so.6                          0x00002b393aa9c460 __libc_start_main +
    245

    6    tmp572mpqbw                        0x000055f9a42341d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpxa_du8kp/tmpxa_du8kp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b661d0a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b661cd9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b661cd9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b661cd9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxa_du8kp                        0x0000555d1673b5ef <unavailable> + 5615

    5    libc.so.6                          0x00002b661d290460 __libc_start_main +
    245

    6    tmpxa_du8kp                        0x0000555d1673b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCounter = 0\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 == 0 {\n            evenCounter += 1\n        }\n    }\n    if evenCounter\
    \ == lst1.count {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count\
    \ {\n        for j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 && lst2[j]\
    \ % 2 == 0 {\n                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n\
    \                evenCounter += 1\n            }\n        }\n    }\n    if evenCounter\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp43enzk10/tmp43enzk10.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9dc819c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9dc510b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9dc510988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9dc50f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43enzk10                        0x00005597add1187f <unavailable> + 6271

    5    libc.so.6                          0x00002ad9dca05460 __libc_start_main +
    245

    6    tmp43enzk10                        0x00005597add112d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpiasf3brb/tmpiasf3brb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b182e7f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b182e4efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b182e4ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b182e4ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiasf3brb                        0x000055b4a8436b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b182e9e4460 __libc_start_main +
    245

    6    tmpiasf3brb                        0x000055b4a8436249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa2_ngdwo/tmpa2_ngdwo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2061aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af205ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2_ngdwo                        0x00005640918d187f <unavailable> + 6271

    5    libc.so.6                          0x00002af20639a460 __libc_start_main +
    245

    6    tmpa2_ngdwo                        0x00005640918d12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\
    \n    }\n    if lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    if lst1Even.count == 0 || lst2Even.count == 0 {\n        return \"NO\"\n\
    \    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n       \
    \     for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n     \
    \               lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n   \
    \                 lst1Even = lst1.filter { $0 % 2 == 0 }\n                   \
    \ lst2Even = lst2.filter { $0 % 2 == 0 }\n                    if lst1Even.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    if lst2Even.count == lst2.count {\n                \
    \        return \"YES\"\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpd2if36rp/tmpd2if36rp.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b817eba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b817e899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b817e899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b817e8987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2if36rp                        0x000055e3ebf4b93f <unavailable> + 6463

    5    libc.so.6                          0x00002b817ed8e460 __libc_start_main +
    245

    6    tmpd2if36rp                        0x000055e3ebf4b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.filter\
    \ { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.allSatisfy({ $0 % 2 == 0 }) ? \"YES\" : \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchanged = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchanged = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchanged {\n    \
    \        return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp2seghkqw/tmp2seghkqw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac930e83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac930b7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac930b7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac930b797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2seghkqw                        0x000055c2e07e887f <unavailable> + 6271

    5    libc.so.6                          0x00002ac93106f460 __libc_start_main +
    245

    6    tmp2seghkqw                        0x000055c2e07e82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 1 {\n            while j < lst2.count {\n                if lst2[j] %\
    \ 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpvmgj_0mt/tmpvmgj_0mt.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c199dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c196d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c196d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c196d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmgj_0mt                        0x000056534139c77f <unavailable> + 6015

    5    libc.so.6                          0x00002b8c19bc6460 __libc_start_main +
    245

    6    tmpvmgj_0mt                        0x000056534139c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenLst1 = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let oddLst1 = lst1.filter { $0 % 2 != 0 }\n    let evenLst2 = lst2.filter\
    \ { $0 % 2 == 0 }\n    let oddLst2 = lst2.filter { $0 % 2 != 0 }\n    return evenLst1.count\
    \ + oddLst2.count == lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpb0jmmf0u/tmpb0jmmf0u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26af0d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26aedc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26aedc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26aedc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0jmmf0u                        0x0000560e93cf3ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b26af2bc460 __libc_start_main +
    245

    6    tmpb0jmmf0u                        0x0000560e93cf31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    return\
    \ lst1.filter { $0 % 2 != 0 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp9hi4k3iz/tmp9hi4k3iz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f09615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f0930cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f0930c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f0930b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9hi4k3iz                        0x00005645dd94f9cf <unavailable> + 6607

    5    libc.so.6                          0x00002b0f09801460 __libc_start_main +
    245

    6    tmp9hi4k3iz                        0x00005645dd94f429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens1 = lst1.filter { $0 % 2 == 0\
    \ }\n    let odds1 = lst1.filter { $0 % 2 != 0 }\n    let evens2 = lst2.filter\
    \ { $0 % 2 == 0 }\n    let odds2 = lst2.filter { $0 % 2 != 0 }\n    if odds1.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens2.count == 0 {\n        return\
    \ \"NO\"\n    } else if odds1.count <= evens2.count {\n        return \"YES\"\n\
    \    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n \
    \   if lst1Even.count + lst2Even.count >= lst1.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = true\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ != 0 {\n            isEven = false\n            break\n        }\n    }\n  \
    \  if isEven {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    isEven = true\n      \
    \              break\n                }\n            }\n        }\n        if\
    \ !isEven {\n            break\n        }\n    }\n    if isEven {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7yu_giz5/tmp7yu_giz5.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2335f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2332efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2332ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2332ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yu_giz5                        0x000055f8e45ff87f <unavailable> + 6271

    5    libc.so.6                          0x00002ae2337e4460 __libc_start_main +
    245

    6    tmp7yu_giz5                        0x000055f8e45ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdo_vte8i/tmpdo_vte8i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb6850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb6547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb6547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb65467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo_vte8i                        0x00005592c898862d <unavailable> + 5677

    5    libc.so.6                          0x00002accb6a3c460 __libc_start_main +
    245

    6    tmpdo_vte8i                        0x00005592c89881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ num in lst1 {\n        if num % 2 == 0 {\n            evens += 1\n        }\
    \ else {\n            odds += 1\n        }\n    }\n    for num in lst2 {\n   \
    \     if num % 2 == 0 {\n            evens += 1\n        } else {\n          \
    \  odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7oe3aqs2/tmp7oe3aqs2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cddfa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cddc9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cddc9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cddc9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oe3aqs2                        0x000055e41f0d8b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b5cde191460 __libc_start_main +
    245

    6    tmp7oe3aqs2                        0x000055e41f0d8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    var evens2 = [Int]()\n \
    \   var odds2 = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n      \
    \      evens.append(i)\n        } else {\n            odds.append(i)\n       \
    \ }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens2.append(i)\n\
    \        } else {\n            odds2.append(i)\n        }\n    }\n    if evens.count\
    \ == lst1.count {\n        return \"YES\"\n    } else if odds.count == lst1.count\
    \ {\n        return \"NO\"\n    } else if odds.count > evens2.count {\n      \
    \  return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdiwz3ub2/tmpdiwz3ub2.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23a2aebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23a27e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23a27e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23a27e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiwz3ub2                        0x0000556dfcf40c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b23a2cd7460 __libc_start_main +
    245

    6    tmpdiwz3ub2                        0x0000556dfcf40349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count\
    \ + lst2Odd.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpwb24t9ex/tmpwb24t9ex.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb403bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb400b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb400b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb400b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb24t9ex                        0x000056013c1d379f <unavailable> + 6047

    5    libc.so.6                          0x00002acb405aa460 __libc_start_main +
    245

    6    tmpwb24t9ex                        0x000056013c1d31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n \
    \   if lst1Even.count + lst2Even.count >= lst1.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptcui8hhj/tmptcui8hhj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae259730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae259427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae259427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2594267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcui8hhj                        0x000055b7bff6887f <unavailable> + 6271

    5    libc.so.6                          0x00002ae25991c460 __libc_start_main +
    245

    6    tmptcui8hhj                        0x000055b7bff682d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpv8ak423u/tmpv8ak423u.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3413fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e33e36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e33e36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e33e357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8ak423u                        0x000055f0242b6b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b0e3432b460 __libc_start_main +
    245

    6    tmpv8ak423u                        0x000055f0242b6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpdo_vte8i/tmpdo_vte8i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb6850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb6547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb6547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb65467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdo_vte8i                        0x00005592c898862d <unavailable> + 5677

    5    libc.so.6                          0x00002accb6a3c460 __libc_start_main +
    245

    6    tmpdo_vte8i                        0x00005592c89881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count {\n        if lst1[i]\
    \ % 2 == 1 {\n            while j < lst2.count {\n                if lst2[j] %\
    \ 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp572mpqbw/tmp572mpqbw.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393a8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393a5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393a5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393a5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp572mpqbw                        0x000055f9a423477f <unavailable> + 6015

    5    libc.so.6                          0x00002b393aa9c460 __libc_start_main +
    245

    6    tmp572mpqbw                        0x000055f9a42341d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count == 0 {\n        return \"YES\"\n    } else\
    \ if evens.count == 0 {\n        return \"NO\"\n    } else {\n        return \"\
    YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsaidfc1d/tmpsaidfc1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bc983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bc67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bc67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bc6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsaidfc1d                        0x000055cf58c518ef <unavailable> + 6383

    5    libc.so.6                          0x00002b95bcb6f460 __libc_start_main +
    245

    6    tmpsaidfc1d                        0x000055cf58c51349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    }\n    if lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n \
    \   if lst1Even.count + lst2Even.count < lst1.count {\n        return \"NO\"\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchanged = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchanged = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchanged {\n    \
    \        return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp2seghkqw/tmp2seghkqw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac930e83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac930b7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac930b7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac930b797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2seghkqw                        0x000055c2e07e887f <unavailable> + 6271

    5    libc.so.6                          0x00002ac93106f460 __libc_start_main +
    245

    6    tmp2seghkqw                        0x000055c2e07e82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp382795zz/tmp382795zz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1ce65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1ce355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1ce355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1ce3547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp382795zz                        0x000056307d79cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab1ce84a460 __libc_start_main +
    245

    6    tmp382795zz                        0x000056307d79c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ == 0 {\n        return \"YES\"\n    } else if evens == 0 {\n        return \"\
    NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpj_ub3bbv/tmpj_ub3bbv.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8507f4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8507c45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8507c45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8507c447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_ub3bbv                        0x0000555aa0ee37ef <unavailable> + 6127

    5    libc.so.6                          0x00002b850813a460 __libc_start_main +
    245

    6    tmpj_ub3bbv                        0x0000555aa0ee3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824708
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            let temp = lst1[i]\n\
    \            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i += 1\n\
    \            j += 1\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqap__28k/tmpqap__28k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf61c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf61971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf61971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf619707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqap__28k                        0x0000558dbf57162d <unavailable> + 5677

    5    libc.so.6                          0x00002aaf61e66460 __libc_start_main +
    245

    6    tmpqap__28k                        0x0000558dbf5711f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824706
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824708
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplc89yipn/tmplc89yipn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c8b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c881eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c881e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c881d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc89yipn                        0x000055c9cd92a79f <unavailable> + 6047

    5    libc.so.6                          0x00002af2c8d13460 __libc_start_main +
    245

    6    tmplc89yipn                        0x000055c9cd92a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824708
