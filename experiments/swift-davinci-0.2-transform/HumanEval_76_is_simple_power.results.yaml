language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    for _ in 1...n {\n     \
    \   result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp_43cagld/tmp_43cagld.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ed829c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ed520b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ed520988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ed51f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_43cagld                        0x000055b030914336 <unavailable> + 4918

    5    libc.so.6                          0x00002b59eda15460 __libc_start_main +
    245

    6    tmp_43cagld                        0x000055b030913fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ < x {\n        result = n * result\n        i += 1\n    }\n    return result\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var x = x\n    var n = n\n    while x % n == 0\
    \ {\n        x /= n\n    }\n    return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = x\n    while result % n == 0 {\n\
    \        result /= n\n    }\n    return result == 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = x\n    var power = n\n    while result % power == 0 {\n       \
    \ result /= power\n        if result == 1 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    if x == 1 {\n        return false\n    }\n \
    \   var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp19dxvqet/tmp19dxvqet.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7455d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7455a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7455a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7455a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19dxvqet                        0x000055b80f922626 <unavailable> + 5670

    5    libc.so.6                          0x00002b7455f24460 __libc_start_main +
    245

    6    tmp19dxvqet                        0x000055b80f921e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x != 1 else\
    \ { return true }\n    guard x != n else { return true }\n    guard x > n else\
    \ { return false }\n    guard n > 1 else { return false }\n    var result = n\n\
    \    while result < x {\n        result *= n\n    }\n    return result == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            return true\n        }\n        i +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8h7dhy9u.swift:26:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmp8h7dhy9u.swift:27:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ <= x {\n        result = n * n\n        i += 1\n    }\n    return result ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824443
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    for _ in 1...x {\n     \
    \   result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ if x == n {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var current = n\n    while current < x {\n        current *= n\n    }\n    return\
    \ current == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    var i = 0\n    while result\
    \ < x {\n        result *= n\n        i += 1\n    }\n    return result == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i <= x {\n        if i ==\
    \ x {\n            return true\n        }\n        i *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = x\n    while result % n == 0 {\n\
    \        result /= n\n    }\n    return result == 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ < x {\n        result = n * i\n        i += 1\n    }\n    return result == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpzploceb4/tmpzploceb4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a52c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a4fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a4fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a4fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzploceb4                        0x00005620ad937417 <unavailable> + 5143

    5    libc.so.6                          0x00002ad7a54af460 __libc_start_main +
    245

    6    tmpzploceb4                        0x00005620ad936e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i <= x {\n        if i ==\
    \ x {\n            return true\n        }\n        i *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var num = x\n    while num % n == 0 {\n        num /= n\n    }\n    return num\
    \ == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var nn = n\n    while nn < x {\n        nn *= n\n    }\n    return nn == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 0\n    var result = 1\n    while result\
    \ < x {\n        result = n * result\n        i += 1\n    }\n    return result\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i <= x {\n        if i ==\
    \ x {\n            return true\n        }\n        i *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 {\n \
    \       return false\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if n == 1 {\n        return true\n    }\n    var power = n\n    while power\
    \ < x {\n        power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp3d0ue2p8/tmp3d0ue2p8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4101a2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4101724b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4101724988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41017237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d0ue2p8                        0x000055c379beb626 <unavailable> + 5670

    5    libc.so.6                          0x00002b4101c19460 __libc_start_main +
    245

    6    tmp3d0ue2p8                        0x000055c379beae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    if x == 1 {\n        return false\n    }\n \
    \   var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n\
    \    return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpn3grkah9/tmpn3grkah9.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75cddc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75cdabbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75cdabb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75cdaba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3grkah9                        0x000055cd546d06b6 <unavailable> + 5814

    5    libc.so.6                          0x00002b75cdfb0460 __libc_start_main +
    245

    6    tmpn3grkah9                        0x000055cd546cfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = 1\n    for _ in 1...x {\n       \
    \ result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            return true\n        }\n        i +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8h7dhy9u.swift:26:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmp8h7dhy9u.swift:27:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 2\n    while i < x {\n        if i ==\
    \ x {\n            return true\n        }\n        i *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp2c7c4l3c/tmp2c7c4l3c.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b086cd5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b086ca56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b086ca56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b086ca557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c7c4l3c                        0x00005615d34141b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b086cf4b460 __libc_start_main +
    245

    6    tmp2c7c4l3c                        0x00005615d3413e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return false\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x < n {\n        return false\n    }\n    return is_simple_power(x: x / n,\
    \ n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpepo5g3b_/tmpepo5g3b_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d3f73ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d3f435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d3f435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d3f4347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepo5g3b_                        0x0000563559cd5626 <unavailable> + 5670

    5    libc.so.6                          0x00002b2d3f92a460 __libc_start_main +
    245

    6    tmpepo5g3b_                        0x0000563559cd4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n != 0 else\
    \ { return false }\n    guard x != 0 else { return true }\n    guard x != 1 else\
    \ { return true }\n    guard n != 1 else { return false }\n    guard x != n else\
    \ { return true }\n    guard x > n else { return false }\n    var n = n\n    while\
    \ n < x {\n        n *= n\n    }\n    return n == x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ if x == n {\n        return true\n    }\n    var power = n\n    while power\
    \ < x {\n        power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var x = x\n    var n = n\n    while x > 1 {\n\
    \        if x % n != 0 {\n            return false\n        }\n        x /= n\n\
    \    }\n    return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while pow(Double(n), Double(i))\
    \ <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x) {\n      \
    \      return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4w6q8pp7.swift:23:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmp4w6q8pp7.swift:24:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n  \
    \  return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while pow(Double(n), Double(i))\
    \ <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x) {\n      \
    \      return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg4unifkn.swift:23:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmpg4unifkn.swift:24:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0 &&\
    \ n > 0 else { return false }\n    var result = 1\n    for _ in 0..<n {\n    \
    \    result *= n\n        if result == x { return true }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp2vzvjt4i/tmp2vzvjt4i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eff809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eff500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eff500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eff4ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vzvjt4i                        0x000056237a4eb336 <unavailable> + 4918

    5    libc.so.6                          0x00002b1eff9f5460 __libc_start_main +
    245

    6    tmp2vzvjt4i                        0x000056237a4eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var power = n\n    while power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = 1\n    for _ in 1...x {\n       \
    \ result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0, n\
    \ > 0 else { return false }\n    var power = n\n    while power < x {\n      \
    \  power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp42hfzo7q/tmp42hfzo7q.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b700773cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7007433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7007433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70074327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42hfzo7q                        0x000055ccab1d2626 <unavailable> + 5670

    5    libc.so.6                          0x00002b7007928460 __libc_start_main +
    245

    6    tmp42hfzo7q                        0x000055ccab1d1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = 1\n    for _ in 1...x {\n        result *= n\n        if result\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    for _ in 1...x {\n     \
    \   result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var power = n\n    while power < x {\n       \
    \ power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ < x {\n        result = n * result\n        i += 1\n    }\n    return result\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824517
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 1\n\
    \    while power < x {\n        power *= n\n    }\n    return power == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824518
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            return true\n        }\n        i +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8h7dhy9u.swift:26:11: error: cannot find 'pow' in scope\n    while\
    \ pow(Double(n), Double(i)) <= Double(x) {\n          ^~~\n/tmp/tmp8h7dhy9u.swift:27:12:\
    \ error: cannot find 'pow' in scope\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = 1\n    for _ in 1...n {\n       \
    \ result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpxlymj_pk/tmpxlymj_pk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9cabd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9ca8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9ca8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9ca8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlymj_pk                        0x0000561e02634336 <unavailable> + 4918

    5    libc.so.6                          0x00002ad9cadc2460 __libc_start_main +
    245

    6    tmpxlymj_pk                        0x0000561e02633fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = 1\n    for _ in 1...n {\n       \
    \ result *= n\n        if result == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpxlymj_pk/tmpxlymj_pk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9cabd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9ca8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9ca8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9ca8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlymj_pk                        0x0000561e02634336 <unavailable> + 4918

    5    libc.so.6                          0x00002ad9cadc2460 __libc_start_main +
    245

    6    tmpxlymj_pk                        0x0000561e02633fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    if x == 1 {\n        return false\n    }\n \
    \   var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpotuglp8b/tmpotuglp8b.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1c469ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1c4391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1c4391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1c43907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotuglp8b                        0x00005586876ad626 <unavailable> + 5670

    5    libc.so.6                          0x00002ac1c4886460 __libc_start_main +
    245

    6    tmpotuglp8b                        0x00005586876ace69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8im9rnl_/tmp8im9rnl_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3455f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3452ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3452ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3452eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8im9rnl_                        0x000056234d78a1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad3457e1460 __libc_start_main +
    245

    6    tmp8im9rnl_                        0x000056234d789e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x < 0 || n <\
    \ 0 {\n        return false\n    }\n    if x == 0 && n == 0 {\n        return\
    \ false\n    }\n    if x == 0 && n != 0 {\n        return true\n    }\n    if\
    \ x == 1 && n == 0 {\n        return true\n    }\n    if x == 1 && n != 0 {\n\
    \        return false\n    }\n    if x == n {\n        return true\n    }\n  \
    \  if x % n != 0 {\n        return false\n    }\n    return is_simple_power(x:\
    \ x / n, n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqy6ukgp7/tmpqy6ukgp7.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39b9200c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39b8ef7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39b8ef7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39b8ef67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy6ukgp7                        0x0000560791229626 <unavailable> + 5670

    5    libc.so.6                          0x00002b39b93ec460 __libc_start_main +
    245

    6    tmpqy6ukgp7                        0x0000560791228ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824518
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = x\n    while result % n == 0 {\n        result /= n\n    }\n  \
    \  return result == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var i = 0\n    var result = 1\n    while result\
    \ <= x {\n        result = Int(pow(Double(n), Double(i)))\n        if result ==\
    \ x {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb77kk0a4.swift:25:22: error: cannot find 'pow' in scope\n     \
    \   result = Int(pow(Double(n), Double(i)))\n                     ^~~\n"
  stdout: ''
  timestamp: 1659824518
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == Int(pow(Double(n),\
    \ Double(Int(log(Double(x)) / log(Double(n))))))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmqhl493g.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpmqhl493g.swift:19:47: error: cannot find 'log'\
    \ in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpmqhl493g.swift:19:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var result = n\n    while result < x {\n     \
    \   result *= n\n    }\n    return result == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == Int(pow(Double(n),\
    \ Double(Int(log(Double(x)) / log(Double(n))))))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmqhl493g.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n   \
    \                 ^~~\n/tmp/tmpmqhl493g.swift:19:47: error: cannot find 'log'\
    \ in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))\n\
    \                                              ^~~\n/tmp/tmpmqhl493g.swift:19:64:\
    \ error: cannot find 'log' in scope\n    return x == Int(pow(Double(n), Double(Int(log(Double(x))\
    \ / log(Double(n))))))\n                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 {\n \
    \       return false\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if n == 1 {\n        return true\n    }\n    var i = 1\n    while i <= x {\n\
    \        if i == x {\n            return true\n        }\n        i *= n\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824518
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = false\n\
    \    if n == 1 {\n        result = true\n    } else if x == 1 {\n        result\
    \ = true\n    } else if x == n {\n        result = true\n    } else if x % n ==\
    \ 0 {\n        result = is_simple_power(x: x / n, n: n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824518
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i <= x {\n        if i ==\
    \ x {\n            return true\n        }\n        i *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: -1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return false\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ < x {\n        result = n * n\n        i += 1\n    }\n    return result == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824523
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpy6cjrnk0/tmpy6cjrnk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8faa5d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8faa2ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8faa2ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8faa2cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6cjrnk0                        0x00005628de8351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8faa7c3460 __libc_start_main +
    245

    6    tmpy6cjrnk0                        0x00005628de834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    var power = n\n    while power < x {\n     \
    \   power *= n\n    }\n    return power == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqx096p_v/tmpqx096p_v.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addab679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addab370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addab370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addab36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqx096p_v                        0x000055c7a1c47626 <unavailable> + 5670

    5    libc.so.6                          0x00002addab865460 __libc_start_main +
    245

    6    tmpqx096p_v                        0x000055c7a1c46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return false\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \    }\n    return i == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp1sahwjzx/tmp1sahwjzx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae343eebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae343be2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae343be2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae343be17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sahwjzx                        0x0000559fdaa6f596 <unavailable> + 5526

    5    libc.so.6                          0x00002ae3440d7460 __libc_start_main +
    245

    6    tmp1sahwjzx                        0x0000559fdaa6ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824518
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return x == 1\n    }\n    if x == 1 {\n        return false\n    }\n \
    \   var i = 1\n    while pow(n, i) <= x {\n        if pow(n, i) == x {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppjg55mm1.swift:26:11: error: cannot find 'pow' in scope\n    while\
    \ pow(n, i) <= x {\n          ^~~\n/tmp/tmppjg55mm1.swift:27:12: error: cannot\
    \ find 'pow' in scope\n        if pow(n, i) == x {\n           ^~~\n"
  stdout: ''
  timestamp: 1659824518
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n\
    \        if i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824438
- exit_code: 0
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return false\n    }\n    var i = 0\n    while pow(n, i) < x {\n      \
    \  i += 1\n    }\n    return pow(n, i) == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpt6kdznvf.swift:23:11: error: cannot find 'pow' in scope\n    while\
    \ pow(n, i) < x {\n          ^~~\n/tmp/tmpt6kdznvf.swift:26:12: error: cannot\
    \ find 'pow' in scope\n    return pow(n, i) == x\n           ^~~\n"
  stdout: ''
  timestamp: 1659824518
