language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var happy = true\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            happy\
    \ = false\n            break\n        }\n    }\n    return happy\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ happy = true\n    var i = 0\n    while i < s.count - 2 {\n        let start\
    \ = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if sub.count == 3 {\n            let set = Set(sub)\n            if set.count\
    \ < 3 {\n                happy = false\n                break\n            }\n\
    \        }\n        i += 1\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp29f20fsh/tmp29f20fsh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7781a5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7781756b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7781756988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77817557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29f20fsh                        0x00005625a5da069d <unavailable> + 5789

    5    libc.so.6                          0x00002b7781c4b460 __libc_start_main +
    245

    6    tmp29f20fsh                        0x00005625a5da0329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let subString = s[range]\n\
    \        if Set(subString).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count-2 {\n        let\
    \ start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    var index\
    \ = s.startIndex\n    while index < s.endIndex {\n        let start = s.index(index,\
    \ offsetBy: 0)\n        let end = s.index(index, offsetBy: 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n        index\
    \ = s.index(index, offsetBy: 3)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aacc5c1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacc5914561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aacc5914286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aacc591413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aacc5913bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aacc5a47b0d <unavailable> + 2693901

    6    tmpnf1gbqnk                        0x000055965945fcda <unavailable> + 7386

    7    tmpnf1gbqnk                        0x000055965945f786 <unavailable> + 6022

    8    libc.so.6                          0x00002aacc5e09460 __libc_start_main +
    245

    9    tmpnf1gbqnk                        0x000055965945f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0...s.count - 3 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var s = s\n    while s.count >= 3 {\n\
    \        let first = s.removeFirst()\n        let second = s.removeFirst()\n \
    \       let third = s.removeFirst()\n        if first == second || second == third\
    \ || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpda48xpxp/tmpda48xpxp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01425ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac013f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac013f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac013f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda48xpxp                        0x00005583c4dce8a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ac01444a460 __libc_start_main +
    245

    6    tmpda48xpxp                        0x00005583c4dce069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let subString = s[range]\n\
    \        if Set(subString).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n  \
    \  var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzz8kog3y/tmpzz8kog3y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecbc90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecb987b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecb987988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecb9867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz8kog3y                        0x000055ca13047a2f <unavailable> + 6703

    5    libc.so.6                          0x00002aeecbe7c460 __libc_start_main +
    245

    6    tmpzz8kog3y                        0x000055ca13047369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var previous = s.first!\n    var current\
    \ = s.index(after: s.startIndex)\n    var next = s.index(after: current)\n   \
    \ while next < s.endIndex {\n        if previous == s[current] || s[current] ==\
    \ s[next] || previous == s[next] {\n            return false\n        }\n    \
    \    previous = s[current]\n        current = s.index(after: current)\n      \
    \  next = s.index(after: next)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n        i += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var prev = s.first!\n    var prev2 =\
    \ s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n        let c = s[i]\n        if c == prev || c == prev2\
    \ {\n            return false\n        }\n        prev2 = prev\n        prev =\
    \ c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr05adro3.swift:22:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpr05adro3.swift:22:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n\
    \        let char = s[index]\n        if set.contains(char) {\n            return\
    \ false\n        }\n        set.insert(char)\n        if i >= 2 {\n          \
    \  set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n    for i\
    \ in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n \
    \   while index < s.endIndex {\n        let nextIndex = s.index(index, offsetBy:\
    \ 3)\n        if nextIndex > s.endIndex {\n            break\n        }\n    \
    \    let subString = s[index..<nextIndex]\n        if Set(subString).count < 3\
    \ {\n            return false\n        }\n        index = nextIndex\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac40a427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac40a11e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac40a11e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac40a11e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac40a11dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac40a251b0d <unavailable> + 2693901

    6    tmp5kepb2og                        0x000055bb404f9d43 <unavailable> + 7491

    7    tmp5kepb2og                        0x000055bb404f9856 <unavailable> + 6230

    8    libc.so.6                          0x00002ac40a613460 __libc_start_main +
    245

    9    tmp5kepb2og                        0x000055bb404f9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n \
    \   while index < s.endIndex {\n        let nextIndex = s.index(index, offsetBy:\
    \ 1)\n        let nextNextIndex = s.index(index, offsetBy: 2)\n        if nextIndex\
    \ < s.endIndex && nextNextIndex < s.endIndex {\n            let first = s[index]\n\
    \            let second = s[nextIndex]\n            let third = s[nextNextIndex]\n\
    \            if first == second || first == third || second == third {\n     \
    \           return false\n            }\n        }\n        index = nextIndex\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b23756a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2375397561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2375397286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b237539713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2375396bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b23754cab0d <unavailable> + 2693901

    6    tmp74kwn5u7                        0x0000561f5a0cdaca <unavailable> + 6858

    7    tmp74kwn5u7                        0x0000561f5a0cd5a6 <unavailable> + 5542

    8    libc.so.6                          0x00002b237588c460 __libc_start_main +
    245

    9    tmp74kwn5u7                        0x0000561f5a0cd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var result = true\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var happy = true\n    for i\
    \ in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            happy = false\n            break\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var result = true\n    var i = 0\n \
    \   while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        let set = Set(sub)\n    \
    \    if set.count < 3 {\n            result = false\n            break\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var last = s.first!\n    var\
    \ last2 = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n   \
    \     if c == last || c == last2 {\n            return false\n        }\n    \
    \    last = last2\n        last2 = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n\
    \        let c = s[index]\n        if set.contains(c) {\n            return false\n\
    \        }\n        set.insert(c)\n        if i >= 2 {\n            set.remove(s[s.index(s.startIndex,\
    \ offsetBy: i - 2)])\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var prev = s.first!\n    var prev2 =\
    \ s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n        if c\
    \ == prev || c == prev2 {\n            return false\n        }\n        prev2\
    \ = prev\n        prev = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n\
    \        let char = s[index]\n        if set.contains(char) {\n            return\
    \ false\n        }\n        set.insert(char)\n        if i >= 2 {\n          \
    \  set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = s.map { $0 }\n    for i in 0..<s.count-2\
    \ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = s.startIndex\n    var j = s.index(i,\
    \ offsetBy: 1)\n    var k = s.index(i, offsetBy: 2)\n    while k < s.endIndex\
    \ {\n        if s[i] == s[j] || s[i] == s[k] || s[j] == s[k] {\n            return\
    \ false\n        }\n        i = s.index(after: i)\n        j = s.index(after:\
    \ j)\n        k = s.index(after: k)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count-2 {\n        let\
    \ start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var chars = Array(s)\n    var i = 0\n\
    \    while i < chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ < 3 {\n            result = false\n            break\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n    for i\
    \ in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n    for i\
    \ in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        let set = Set(sub)\n\
    \        if set.count != 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ result = false\n    if s.count >= 3 {\n        for i in 0..<s.count-2 {\n  \
    \          let start = s.index(s.startIndex, offsetBy: i)\n            let end\
    \ = s.index(s.startIndex, offsetBy: i+3)\n            let range = start..<end\n\
    \            let subString = s[range]\n            if Set(subString).count ==\
    \ 3 {\n                result = true\n            } else {\n                result\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n    var\
    \ prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnmng6mjr.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpnmng6mjr.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n    var\
    \ prevPrev = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n\
    \        if c == prev || c == prevPrev {\n            return false\n        }\n\
    \        prevPrev = prev\n        prev = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = 0\n    while i < s.count - 2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n \
    \       if Set(sub).count != 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var last = s.first!\n    var secondLast\
    \ = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n        if\
    \ c == last || c == secondLast {\n            return false\n        }\n      \
    \  secondLast = last\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var result = true\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var previous: Character?\n \
    \   var previousPrevious: Character?\n    for c in s {\n        if previous ==\
    \ c || previousPrevious == c {\n            return false\n        }\n        previousPrevious\
    \ = previous\n        previous = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n    for i in\
    \ 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 2)\n        let char = s[index]\n\
    \        let char1 = s[index1]\n        let char2 = s[index2]\n        if char\
    \ == char1 || char == char2 || char1 == char2 {\n            return false\n  \
    \      }\n        set.insert(char)\n        set.insert(char1)\n        set.insert(char2)\n\
    \    }\n    return set.count == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpeg3i3z7x/tmpeg3i3z7x.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c0c8a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c0c59eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c0c59e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c0c59d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg3i3z7x                        0x000055a35fb3bb35 <unavailable> + 6965

    5    libc.so.6                          0x00002b6c0ca93460 __libc_start_main +
    245

    6    tmpeg3i3z7x                        0x000055a35fb3b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var current = s.startIndex\n\
    \    while current < s.endIndex {\n        let next = s.index(current, offsetBy:\
    \ 3)\n        if next > s.endIndex {\n            break\n        }\n        let\
    \ range = current..<next\n        let sub = s[range]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n        current = next\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c731fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c72ef4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c72ef4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c72ef413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c72ef3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b1c73027b0d <unavailable> + 2693901

    6    tmpbpz74iem                        0x000056396d04ed62 <unavailable> + 7522

    7    tmpbpz74iem                        0x000056396d04e856 <unavailable> + 6230

    8    libc.so.6                          0x00002b1c733e9460 __libc_start_main +
    245

    9    tmpbpz74iem                        0x000056396d04e419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    let\
    \ s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n    for i in\
    \ 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count {\n        if i + 2 < s.count {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let sub = s[start..<end]\n            if set.contains(sub.first!)\
    \ {\n                return false\n            }\n            set.insert(sub.first!)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmptvrw3ibm/tmptvrw3ibm.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacd9d4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacd9a45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacd9a45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacd9a447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvrw3ibm                        0x000055b478971aff <unavailable> + 6911

    5    libc.so.6                          0x00002aacd9f3a460 __libc_start_main +
    245

    6    tmptvrw3ibm                        0x000055b478971439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        let set = Set(sub)\n\
    \        if set.count < 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0...s.count - 3 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var prev = s.first!\n    var prev2 =\
    \ s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n            return\
    \ false\n        }\n        prev = prev2\n        prev2 = s[i]\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8jceblu.swift:22:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpr8jceblu.swift:22:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        for c in sub {\n            if set.contains(c) {\n\
    \                return false\n            }\n            set.insert(c)\n    \
    \    }\n        set.removeAll()\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var prev = s.first!\n    var prev2 =\
    \ s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n        if c\
    \ == prev || c == prev2 {\n            return false\n        }\n        prev2\
    \ = prev\n        prev = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n \
    \   var nextIndex = s.index(after: index)\n    var nextNextIndex = s.index(after:\
    \ nextIndex)\n    while nextNextIndex < s.endIndex {\n        if s[index] == s[nextIndex]\
    \ || s[index] == s[nextNextIndex] || s[nextIndex] == s[nextNextIndex] {\n    \
    \        return false\n        }\n        index = nextIndex\n        nextIndex\
    \ = nextNextIndex\n        nextNextIndex = s.index(after: nextNextIndex)\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = s.lowercased()\n    for i in\
    \ 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var happy = true\n    var index = s.startIndex\n\
    \    while index < s.endIndex {\n        let nextIndex = s.index(index, offsetBy:\
    \ 3)\n        if nextIndex > s.endIndex { break }\n        let subString = s[index..<nextIndex]\n\
    \        if Set(subString).count != 3 {\n            happy = false\n         \
    \   break\n        }\n        index = nextIndex\n    }\n    return happy\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b21942d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2193fd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2193fd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2193fd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2193fcfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b2194103b0d <unavailable> + 2693901

    6    tmp45wdp4qe                        0x000056296e77fd65 <unavailable> + 7525

    7    tmp45wdp4qe                        0x000056296e77f856 <unavailable> + 6230

    8    libc.so.6                          0x00002b21944c5460 __libc_start_main +
    245

    9    tmp45wdp4qe                        0x000056296e77f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var happy = true\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            happy = false\n            break\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if set.contains(sub.first!) {\n            return\
    \ false\n        }\n        set.insert(sub.first!)\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpeyrbvj6b/tmpeyrbvj6b.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7271d42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7271a39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7271a39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7271a387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyrbvj6b                        0x000055de620d5aff <unavailable> + 6911

    5    libc.so.6                          0x00002b7271f2e460 __libc_start_main +
    245

    6    tmpeyrbvj6b                        0x000055de620d5439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    var index\
    \ = s.startIndex\n    while index < s.endIndex {\n        let start = s.index(index,\
    \ offsetBy: 0)\n        let end = s.index(index, offsetBy: 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n        index\
    \ = s.index(index, offsetBy: 3)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aacc5c1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacc5914561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aacc5914286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aacc591413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aacc5913bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aacc5a47b0d <unavailable> + 2693901

    6    tmpnf1gbqnk                        0x000055965945fcda <unavailable> + 7386

    7    tmpnf1gbqnk                        0x000055965945f786 <unavailable> + 6022

    8    libc.so.6                          0x00002aacc5e09460 __libc_start_main +
    245

    9    tmpnf1gbqnk                        0x000055965945f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n  \
    \  var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next {\n            return false\n        }\n        previous = current\n\
    \        current = next\n        next = s[s.index(s.startIndex, offsetBy: i)]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp5o7xb9j8/tmp5o7xb9j8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b492ed52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492ea49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b492ea49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b492ea487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5o7xb9j8                        0x0000561298183a2f <unavailable> + 6703

    5    libc.so.6                          0x00002b492ef3e460 __libc_start_main +
    245

    6    tmp5o7xb9j8                        0x0000561298183369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count-2 {\n        let\
    \ start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count < 3 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var last = s.first!\n    var last2 =\
    \ s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2) {\n        if c\
    \ == last || c == last2 {\n            return false\n        }\n        last =\
    \ last2\n        last2 = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let subString = s[start..<end]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var happy = true\n    for i\
    \ in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            happy = false\n            break\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var set = Set<Character>()\n    for\
    \ i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n\
    \        let char = s[index]\n        if set.contains(char) {\n            return\
    \ false\n        }\n        set.insert(char)\n        if i >= 2 {\n          \
    \  set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0...s.count - 3 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3\
    \ = s.index(s.startIndex, offsetBy: i + 2)\n        let char1 = s[index1]\n  \
    \      let char2 = s[index2]\n        let char3 = s[index3]\n        if char1\
    \ == char2 || char1 == char3 || char2 == char3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = s.startIndex\n    while i <\
    \ s.endIndex {\n        let j = s.index(i, offsetBy: 3)\n        if j > s.endIndex\
    \ { break }\n        let sub = s[i..<j]\n        if Set(sub).count != 3 { return\
    \ false }\n        i = j\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002afa75c0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa75905561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa75905286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa7590513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa75904bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002afa75a38b0d <unavailable> + 2693901

    6    tmpz0la4e5x                        0x000055a8e48d3d42 <unavailable> + 7490

    7    tmpz0la4e5x                        0x000055a8e48d3856 <unavailable> + 6230

    8    libc.so.6                          0x00002afa75dfa460 __libc_start_main +
    245

    9    tmpz0la4e5x                        0x000055a8e48d3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            result\
    \ = false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let index = s.index(s.startIndex, offsetBy: i)\n        let nextIndex\
    \ = s.index(s.startIndex, offsetBy: i+1)\n        let nextNextIndex = s.index(s.startIndex,\
    \ offsetBy: i+2)\n        if s[index] == s[nextIndex] || s[index] == s[nextNextIndex]\
    \ || s[nextIndex] == s[nextNextIndex] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var happy = true\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            happy = false\n            break\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var chars = Array(s)\n    for i in 0..<chars.count\
    \ - 2 {\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var result = true\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = 0\n    while i < s.count - 2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n \
    \       if Set(sub).count != 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        let set = Set(sub)\n\
    \        if set.count < 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n  \
    \  var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzz8kog3y/tmpzz8kog3y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecbc90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecb987b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecb987988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecb9867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz8kog3y                        0x000055ca13047a2f <unavailable> + 6703

    5    libc.so.6                          0x00002aeecbe7c460 __libc_start_main +
    245

    6    tmpzz8kog3y                        0x000055ca13047369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = 0\n    while i < s.count - 2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n \
    \       if Set(sub).count != 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3\
    \ = s.index(s.startIndex, offsetBy: i + 2)\n        let char1 = s[index1]\n  \
    \      let char2 = s[index2]\n        let char3 = s[index3]\n        if char1\
    \ == char2 || char1 == char3 || char2 == char3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = 0\n    while i < s.count - 2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n \
    \       if Set(sub).count != 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 1)] ||\n            s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 2)] ||\n            s[s.index(s.startIndex, offsetBy: i + 1)]\
    \ == s[s.index(s.startIndex, offsetBy: i + 2)] {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var s = s\n    while s.count >= 3 {\n\
    \        let first = s.removeFirst()\n        let second = s.removeFirst()\n \
    \       let third = s.removeFirst()\n        if first == second || second == third\
    \ || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpda48xpxp/tmpda48xpxp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01425ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac013f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac013f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac013f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda48xpxp                        0x00005583c4dce8a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ac01444a460 __libc_start_main +
    245

    6    tmpda48xpxp                        0x00005583c4dce069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var prev: Character?\n    var\
    \ prevPrev: Character?\n    for c in s {\n        if prev == c || prevPrev ==\
    \ c {\n            return false\n        }\n        prevPrev = prev\n        prev\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var last = s.first!\n    var secondLast\
    \ = s[s.index(after: s.startIndex)]\n    for char in s.dropFirst(2) {\n      \
    \  if last == secondLast || last == char || secondLast == char {\n           \
    \ return false\n        }\n        secondLast = last\n        last = char\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ result = false\n    if s.count >= 3 {\n        for i in 0..<s.count - 2 {\n\
    \            let start = s.index(s.startIndex, offsetBy: i)\n            let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n            let range = start..<end\n\
    \            let subString = s[range]\n            let set = Set(subString)\n\
    \            if set.count == 3 {\n                result = true\n            }\
    \ else {\n                result = false\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3\
    \ = s.index(s.startIndex, offsetBy: i + 2)\n        let char1 = s[index1]\n  \
    \      let char2 = s[index2]\n        let char3 = s[index3]\n        if char1\
    \ == char2 || char1 == char3 || char2 == char3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0..<s.count-2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i+1)\n        let index3\
    \ = s.index(s.startIndex, offsetBy: i+2)\n        if s[index1] == s[index2] ||\
    \ s[index1] == s[index3] || s[index2] == s[index3] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n  \
    \  var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next {\n            return false\n        }\n        previous = current\n\
    \        current = next\n        next = s[s.index(s.startIndex, offsetBy: i)]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp5o7xb9j8/tmp5o7xb9j8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b492ed52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492ea49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b492ea49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b492ea487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5o7xb9j8                        0x0000561298183a2f <unavailable> + 6703

    5    libc.so.6                          0x00002b492ef3e460 __libc_start_main +
    245

    6    tmp5o7xb9j8                        0x0000561298183369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n    for i\
    \ in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ happy = true\n    if s.count < 3 {\n        happy = false\n    } else {\n  \
    \      for i in 0..<s.count - 2 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let range = start..<end\n            let sub = s[range]\n       \
    \     if Set(sub).count < 3 {\n                happy = false\n               \
    \ break\n            }\n        }\n    }\n    return happy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    var index\
    \ = s.startIndex\n    while index < s.endIndex {\n        if s[index] == s[s.index(after:\
    \ index)] && s[index] == s[s.index(index, offsetBy: 2)] {\n            result\
    \ = false\n            break\n        }\n        index = s.index(index, offsetBy:\
    \ 3)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002abc18240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc17f37561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc17f37286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc17f3713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc17f36bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002abc1806aec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002abc18023660 String.subscript.getter
    + 34

    7    tmp66llgibe                        0x000055d89e162af4 <unavailable> + 6900

    8    tmp66llgibe                        0x000055d89e162606 <unavailable> + 5638

    9    libc.so.6                          0x00002abc1842c460 __libc_start_main +
    245

    10   tmp66llgibe                        0x000055d89e1621c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprf1tjs57/tmprf1tjs57.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14ca30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14c727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14c727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14c7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf1tjs57                        0x000055fa0544a39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba14cc1c460 __libc_start_main +
    245

    6    tmprf1tjs57                        0x000055fa05449ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n \
    \       let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count\
    \ - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i +\
    \ 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n    var\
    \ prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnmng6mjr.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpnmng6mjr.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    var\
    \ happy = true\n    if s.count < 3 {\n        happy = false\n    } else {\n  \
    \      for i in 0..<s.count-2 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i+3)\n \
    \           let range = start..<end\n            let sub = s[range]\n        \
    \    if Set(sub).count != 3 {\n                happy = false\n               \
    \ break\n            }\n        }\n    }\n    return happy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0...s.count - 3 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var isHappy = true\n    var\
    \ i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            isHappy = false\n\
    \            break\n        }\n        i += 1\n    }\n    return isHappy\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var i = 0\n    while i < s.count - 2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n  \
    \      let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var result = true\n    for i\
    \ in 0...s.count - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ < 3 {\n            result = false\n            break\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var s = s\n    while s.count >= 3 {\n\
    \        let first = s.removeFirst()\n        let second = s.removeFirst()\n \
    \       let third = s.removeFirst()\n        if first == second || second == third\
    \ || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpda48xpxp/tmpda48xpxp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01425ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac013f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac013f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac013f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda48xpxp                        0x00005583c4dce8a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ac01444a460 __libc_start_main +
    245

    6    tmpda48xpxp                        0x00005583c4dce069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if set.contains(char) {\n         \
    \   return false\n        }\n        set.insert(char)\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4etc2s8u/tmp4etc2s8u.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b787b2d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b787afc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b787afc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b787afc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4etc2s8u                        0x0000560061661ae5 <unavailable> + 6885

    5    libc.so.6                          0x00002b787b4bd460 __libc_start_main +
    245

    6    tmp4etc2s8u                        0x0000560061661369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    guard\
    \ s.count >= 3 else { return false }\n    var chars = Array(s)\n    for i in 0..<chars.count-2\
    \ {\n        if chars[i] == chars[i+1] || chars[i] == chars[i+2] || chars[i+1]\
    \ == chars[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
    /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n///\
    \ true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
    /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n    if\
    \ s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n\
    \        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013784
