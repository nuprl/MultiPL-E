name: HumanEval_58_common
language: swift
prompt: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
  \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n///\
  \ >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2:\
  \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2:\
  \ [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
  assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
completions: ['    return Array(Set(l1).intersection(Set(l2)))', '    return Array(Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2))).sorted()', '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  '    return Array(Set(l1).intersection(Set(l2)))', '    return Array(Set(l1).intersection(Set(l2)))',
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let common = set1.intersection(set2)\n\
    \    return Array(common).sorted()", '    return Array(Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2)))', "    let set1 = Set(l1)\n   \
    \ let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", '    return
    Array(Set(l1).intersection(Set(l2)))', "    var result = [Int]()\n    for i in\
    \ l1 {\n        if l2.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  '    return Array(Set(l1).intersection(Set(l2)))', '    return Array(Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2))).sorted()', '    return Array(Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2)))', "    let set1 = Set(l1)\n   \
    \ let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", " \
    \   let set1 = Set(l1)\n    let set2 = Set(l2)\n    let commonSet = set1.intersection(set2)\n\
    \    return Array(commonSet).sorted()"]
stop_tokens:
- "\n}"
