name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>>\
  \ next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n\
  /// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int])\
  \ -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n\
    \    return sorted[1]", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    if min > secondMin {\n        min = lst[1]\n        secondMin =\
    \ lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n   \
    \         secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    if lst.count < 2 {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    let sorted = lst.sorted()\n    return sorted[1]", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] != sorted[i - 1] {\n            return sorted[i]\n \
    \       }\n    }\n    return nil", "    var min = Int.max\n    var secondMin =\
    \ Int.max\n    for i in lst {\n        if i < min {\n            secondMin = min\n\
    \            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n \
    \   var previous = sorted[0]\n    for i in 1..<sorted.count {\n        if sorted[i]\
    \ != previous {\n            return sorted[i]\n        }\n        previous = sorted[i]\n\
    \    }\n    return nil", "    var min = lst[0]\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin && i != min {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    guard lst.count > 1 else { return nil }\n    var lst = lst\n\
    \    lst.sort()\n    for i in 1..<lst.count {\n        if lst[i] != lst[i-1] {\n\
    \            return lst[i]\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ Int.max\n    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ && num != smallest {\n            secondSmallest = num\n        }\n    }\n \
    \   return secondSmallest == Int.max ? nil : secondSmallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n          \
    \  secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    if smallest > secondSmallest {\n        smallest\
    \ = lst[1]\n        secondSmallest = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return smallest == secondSmallest ? nil : secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n  \
    \          min = lst[i]\n        } else if lst[i] < secondMin {\n            secondMin\
    \ = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin\
    \ = min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n   \
    \ if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n   \
    \ }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n    for i\
    \ in 0..<sorted.count-1 {\n        if sorted[i] != sorted[i+1] {\n           \
    \ return sorted[i+1]\n        }\n    }\n    return nil", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    if smallest > secondSmallest {\n       \
    \ smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    if smallest\
    \ > secondSmallest {\n        (smallest, secondSmallest) = (secondSmallest, smallest)\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n       \
    \     secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    nextMin = min\n            min = lst[i]\n        } else if lst[i] < nextMin\
    \ {\n            nextMin = lst[i]\n        }\n    }\n    return min == nextMin\
    \ ? nil : nextMin", "    guard lst.count > 1 else { return nil }\n    var lst\
    \ = lst\n    lst.sort()\n    var prev = lst[0]\n    for i in 1..<lst.count {\n\
    \        if lst[i] != prev {\n            return lst[i]\n        }\n        prev\
    \ = lst[i]\n    }\n    return nil", "    guard lst.count > 1 else { return nil\
    \ }\n    let sorted = lst.sorted()\n    var smallest = sorted[0]\n    for i in\
    \ 1..<sorted.count {\n        if sorted[i] > smallest {\n            return sorted[i]\n\
    \        }\n    }\n    return nil", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return min == secondMin ? nil : secondMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n          \
    \  secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var min2\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    min2 = min\n            min = lst[i]\n        } else if lst[i] < min2 {\n\
    \            min2 = lst[i]\n        }\n    }\n    return min2", "    guard lst.count\
    \ > 1 else { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i > prev {\n            return i\n        }\n\
    \        prev = i\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    for i in 1..<sorted.count {\n    \
    \    if sorted[i] != sorted[i - 1] {\n            return sorted[i]\n        }\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return min == secondMin ? nil : secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = Int.max\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin && lst[i]\
    \ != min {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin\
    \ == Int.max ? nil : nextMin", "    if lst.count < 2 {\n        return nil\n \
    \   }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n\
    \        min = min2\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    guard lst.count > 1 else { return nil\
    \ }\n    var sorted = lst.sorted()\n    var previous = sorted.removeFirst()\n\
    \    for element in sorted {\n        if element != previous {\n            return\
    \ element\n        }\n        previous = element\n    }\n    return nil", "  \
    \  guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for num in sorted {\n        if num != last {\n            return num\n \
    \       }\n        last = num\n    }\n    return nil", "    guard lst.count >\
    \ 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n  \
    \  for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n    for i\
    \ in 0..<sorted.count - 1 {\n        if sorted[i] != sorted[i + 1] {\n       \
    \     return sorted[i + 1]\n        }\n    }\n    return nil", "    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var min2 = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var min1 = lst[0]\n    var min2 = lst[1]\n    if min1\
    \ > min2 {\n        min1 = lst[1]\n        min2 = lst[0]\n    }\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min1 {\n            min2 = min1\n     \
    \       min1 = lst[i]\n        } else if lst[i] < min2 {\n            min2 = lst[i]\n\
    \        }\n    }\n    return min2", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var sorted = lst.sorted()\n    var smallest = sorted[0]\n    var secondSmallest\
    \ = sorted[1]\n    for i in 2..<sorted.count {\n        if sorted[i] != smallest\
    \ {\n            secondSmallest = sorted[i]\n            break\n        }\n  \
    \  }\n    return secondSmallest", "    guard lst.count > 1 else { return nil }\n\
    \    let sorted = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] != prev {\n            return sorted[i]\n        }\n\
    \        prev = sorted[i]\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var lst = lst\n    lst.sort()\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] > smallest {\n            secondSmallest = lst[i]\n         \
    \   break\n        }\n    }\n    return secondSmallest", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n  \
    \  guard sorted[0] != sorted[1] else { return nil }\n    return sorted[1]", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    return sorted[1]", "    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var nextSmallest = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            nextSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < nextSmallest\
    \ {\n            nextSmallest = lst[i]\n        }\n    }\n    return nextSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in lst {\n        if i < min {\n            nextMin\
    \ = min\n            min = i\n        } else if i < nextMin {\n            nextMin\
    \ = i\n        }\n    }\n    return nextMin", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var second = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            second = min\n            min = lst[i]\n\
    \        } else if lst[i] < second {\n            second = lst[i]\n        }\n\
    \    }\n    return second == Int.max ? nil : second", "    guard lst.count > 1\
    \ else { return nil }\n    var smallest = lst[0]\n    var secondSmallest = Int.max\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var lst = lst\n    lst.sort()\n    var\
    \ prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] != prev {\n \
    \           return lst[i]\n        }\n        prev = lst[i]\n    }\n    return\
    \ nil", "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n\
    \    var smallest = sorted.removeFirst()\n    while !sorted.isEmpty {\n      \
    \  let next = sorted.removeFirst()\n        if next != smallest {\n          \
    \  return next\n        }\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    let sorted = lst.sorted()\n    return sorted[1]", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin =\
    \ Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n         \
    \   secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var smallest = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    let sorted = lst.sorted()\n    for i in 1..<sorted.count {\n        if\
    \ sorted[i] != sorted[i - 1] {\n            return sorted[i]\n        }\n    }\n\
    \    return nil", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n  \
    \      if i < min {\n            secondMin = min\n            min = i\n      \
    \  } else if i < secondMin {\n            secondMin = i\n        }\n    }\n  \
    \  return secondMin", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return min == secondMin ? nil : secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    if sorted[0] ==\
    \ sorted[1] {\n        return nil\n    }\n    return sorted[1]", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n \
    \   var prev = sorted.removeFirst()\n    for num in sorted {\n        if num !=\
    \ prev {\n            return num\n        }\n        prev = num\n    }\n    return\
    \ nil", "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n\
    \    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] <\
    \ min {\n            secondMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n    }\n\
    \    return secondMin", "    guard lst.count > 1 else { return nil }\n    var\
    \ smallest = lst[0]\n    var second_smallest = lst[1]\n    if smallest > second_smallest\
    \ {\n        smallest = lst[1]\n        second_smallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            second_smallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < second_smallest\
    \ {\n            second_smallest = lst[i]\n        }\n    }\n    return second_smallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var sorted = lst.sorted()\n    var previous = sorted.removeFirst()\n    while\
    \ let next = sorted.first {\n        if next != previous {\n            return\
    \ next\n        }\n        previous = sorted.removeFirst()\n    }\n    return\
    \ nil", "    var lst = lst\n    lst.sort()\n    var last: Int? = nil\n    for\
    \ i in lst {\n        if i != last {\n            if last != nil {\n         \
    \       return last\n            }\n            last = i\n        }\n    }\n \
    \   return nil", "    var min = Int.max\n    var nextMin = Int.max\n    for num\
    \ in lst {\n        if num < min {\n            nextMin = min\n            min\
    \ = num\n        } else if num < nextMin {\n            nextMin = num\n      \
    \  }\n    }\n    return nextMin == Int.max ? nil : nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n          \
    \  secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    return sorted[1]", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    var smallest = sorted[0]\n\
    \    var secondSmallest: Int?\n    for i in 1..<sorted.count {\n        if sorted[i]\
    \ == smallest {\n            continue\n        }\n        secondSmallest = sorted[i]\n\
    \        break\n    }\n    return secondSmallest", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil\
    \ : secondMin", "    guard lst.count > 1 else { return nil }\n    var sorted =\
    \ lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ min2 = lst[1]\n    if min > min2 {\n        min = min2\n        min2 = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            min2\
    \ = min\n            min = lst[i]\n        } else if lst[i] < min2 {\n       \
    \     min2 = lst[i]\n        }\n    }\n    return min2", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n    var prev\
    \ = sorted.removeFirst()\n    for num in sorted {\n        if num != prev {\n\
    \            return num\n        }\n        prev = num\n    }\n    return nil",
  "    var sorted = lst.sorted()\n    var smallest = sorted.removeFirst()\n    for\
    \ i in sorted {\n        if i != smallest {\n            return i\n        }\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ sorted = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i != last {\n            return i\n        }\n        last = i\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n    while !sorted.isEmpty\
    \ {\n        let next = sorted.removeFirst()\n        if next != prev {\n    \
    \        return next\n        }\n        prev = next\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n  \
    \  var smallest = sorted.removeFirst()\n    while sorted.count > 0 {\n       \
    \ let next = sorted.removeFirst()\n        if next != smallest {\n           \
    \ return next\n        }\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for num in sorted {\n        if num != prev {\n            return num\n \
    \       }\n        prev = num\n    }\n    return nil", "    guard lst.count >\
    \ 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    guard lst.count > 1 else\
    \ { return nil }\n    var smallest = lst[0]\n    var secondSmallest = Int.max\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var sorted = lst.sorted()\n   \
    \ var smallest = sorted.removeFirst()\n    for i in sorted {\n        if i > smallest\
    \ {\n            return i\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n    while !sorted.isEmpty\
    \ {\n        let next = sorted.removeFirst()\n        if next != prev {\n    \
    \        return next\n        }\n        prev = next\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", '    return nil', " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    if smallest > secondSmallest {\n       \
    \ (smallest, secondSmallest) = (secondSmallest, smallest)\n    }\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n\
    \    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] <\
    \ min {\n            secondMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n    }\n\
    \    return secondMin", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var lst = lst\n    lst.sort()\n    var smallest\
    \ = lst[0]\n    for i in lst {\n        if i > smallest {\n            return\
    \ i\n        }\n    }\n    return nil", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    var prev = sorted[0]\n    for i in\
    \ 1..<sorted.count {\n        if sorted[i] != prev {\n            return sorted[i]\n\
    \        }\n        prev = sorted[i]\n    }\n    return nil", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n          \
    \  secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    if min > secondMin {\n        min = lst[1]\n        secondMin\
    \ = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n \
    \           secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n\
    \    var prev = sorted.removeFirst()\n    for i in sorted {\n        if i != prev\
    \ {\n            return i\n        }\n        prev = i\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 1 else {\
    \ return nil }\n    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ {\n            secondSmallest = num\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    let sorted = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n    \
    \    if sorted[i] != sorted[i + 1] {\n            return sorted[i + 1]\n     \
    \   }\n    }\n    return nil", "    guard lst.count > 1 else { return nil }\n\
    \    var min = lst[0]\n    var min2 = lst[1]\n    for i in 1..<lst.count {\n \
    \       if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min == min2 ? nil : min2", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var second_min = lst[1]\n    if min > second_min\
    \ {\n        min = lst[1]\n        second_min = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            second_min = min\n            min\
    \ = lst[i]\n        } else if lst[i] < second_min {\n            second_min =\
    \ lst[i]\n        }\n    }\n    return second_min", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min\
    \ > secondMin {\n        (min, secondMin) = (secondMin, min)\n    }\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin", "    var min =\
    \ Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest && i != smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return smallest ==\
    \ secondSmallest ? nil : secondSmallest", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n\
    \        if i < min {\n            secondMin = min\n            min = i\n    \
    \    } else if i < secondMin {\n            secondMin = i\n        }\n    }\n\
    \    return secondMin", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n    for i\
    \ in 1..<sorted.count {\n        if sorted[i] != sorted[i - 1] {\n           \
    \ return sorted[i]\n        }\n    }\n    return nil", "    guard lst.count >\
    \ 1 else { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n \
    \   for i in 1..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    var smallest = Int.max\n    var secondSmallest = Int.max\n\
    \    for num in lst {\n        if num < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = num\n        } else if num < secondSmallest\
    \ {\n            secondSmallest = num\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != last {\n            return i\n       \
    \ }\n        last = i\n    }\n    return nil", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    if min > min2\
    \ {\n        min = min2\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2", "    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]", "    guard lst.count > 1 else { return\
    \ nil }\n    var sorted = lst.sorted()\n    for i in 1..<sorted.count {\n    \
    \    if sorted[i] != sorted[i - 1] {\n            return sorted[i]\n        }\n\
    \    }\n    return nil", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    var smallest = sorted[0]\n    for\
    \ i in 1..<sorted.count {\n        if sorted[i] > smallest {\n            return\
    \ sorted[i]\n        }\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in\
    \ 2..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n  \
    \          min = lst[i]\n        } else if lst[i] < secondMin {\n            secondMin\
    \ = lst[i]\n        }\n    }\n    return secondMin", "    var min = Int.max\n\
    \    var secondMin = Int.max\n    for num in lst {\n        if num < min {\n \
    \           secondMin = min\n            min = num\n        } else if num < secondMin\
    \ {\n            secondMin = num\n        }\n    }\n    return secondMin == Int.max\
    \ ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i > smallest {\n            return i\n        }\n    }\n    return\
    \ nil", "    guard lst.count > 1 else { return nil }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    if smallest > secondSmallest {\n       \
    \ smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n  \
    \  var previous = sorted.removeFirst()\n    while let next = sorted.first {\n\
    \        if next != previous {\n            return next\n        }\n        previous\
    \ = sorted.removeFirst()\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil\
    \ : secondMin", "    if lst.count < 2 {\n        return nil\n    }\n    var min\
    \ = lst[0]\n    var second_min = lst[1]\n    for i in 2..<lst.count {\n      \
    \  if lst[i] < min {\n            second_min = min\n            min = lst[i]\n\
    \        } else if lst[i] < second_min {\n            second_min = lst[i]\n  \
    \      }\n    }\n    return second_min", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n\
    \        if i < min {\n            secondMin = min\n            min = i\n    \
    \    } else if i < secondMin {\n            secondMin = i\n        }\n    }\n\
    \    return secondMin", "    if lst.count < 2 {\n        return nil\n    }\n \
    \   var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var second_smallest = lst[1]\n  \
    \  if smallest > second_smallest {\n        smallest = lst[1]\n        second_smallest\
    \ = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            second_smallest = smallest\n            smallest = lst[i]\n \
    \       } else if lst[i] < second_smallest {\n            second_smallest = lst[i]\n\
    \        }\n    }\n    return second_smallest", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil\
    \ : secondMin", "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n\
    \    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min\
    \ {\n            second = min\n            min = lst[i]\n        } else if lst[i]\
    \ < second {\n            second = lst[i]\n        }\n    }\n    if second ==\
    \ Int.max {\n        return nil\n    }\n    return second", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n          \
    \  secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n  \
    \  var prev = sorted.removeFirst()\n    for i in sorted {\n        if i != prev\
    \ {\n            return i\n        }\n        prev = i\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n  \
    \  for i in 1..<sorted.count {\n        if sorted[i] != sorted[i - 1] {\n    \
    \        return sorted[i]\n        }\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    let sorted = lst.sorted()\n    var prev = sorted[0]\n\
    \    for i in 1..<sorted.count {\n        if sorted[i] != prev {\n           \
    \ return sorted[i]\n        }\n        prev = sorted[i]\n    }\n    return nil",
  "    guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n  \
    \  for i in 1..<sorted.count {\n        if sorted[i] != sorted[i - 1] {\n    \
    \        return sorted[i]\n        }\n    }\n    return nil", "    var min = lst[0]\n\
    \    var secondMin = Int.max\n    for i in lst {\n        if i < min {\n     \
    \       secondMin = min\n            min = i\n        } else if i < secondMin\
    \ && i != min {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n\
    \    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var next = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n\
    \            min = lst[i]\n        } else if lst[i] < next {\n            next\
    \ = lst[i]\n        }\n    }\n    return next", "    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i] != sorted[i + 1] {\n            return sorted[i\
    \ + 1]\n        }\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var second = min\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            second = min\n            min = lst[i]\n\
    \        } else if lst[i] < second {\n            second = lst[i]\n        }\n\
    \    }\n    return second", "    guard lst.count > 1 else { return nil }\n   \
    \ var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n \
    \       if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return min == nextMin ? nil : nextMin", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil\
    \ : secondMin", "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n\
    \    var secondMin = lst[1]\n    for num in lst {\n        if num < min {\n  \
    \          secondMin = min\n            min = num\n        } else if num < secondMin\
    \ {\n            secondMin = num\n        }\n    }\n    return secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var smallest = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n    for\
    \ i in sorted {\n        if i != last {\n            return i\n        }\n   \
    \     last = i\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i > prev {\n            return i\n        }\n\
    \        prev = i\n    }\n    return nil", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest == Int.max ? nil : secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var min = lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin =\
    \ Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n         \
    \   secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin ==\
    \ Int.max ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return smallest ==\
    \ secondSmallest ? nil : secondSmallest", "    var sorted = lst.sorted()\n   \
    \ var prev = sorted[0]\n    for i in 1..<sorted.count {\n        if sorted[i]\
    \ != prev {\n            return sorted[i]\n        }\n        prev = sorted[i]\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i != prev {\n            return i\n        }\n        prev = i\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            secondMin = min\n            min = i\n        } else if i\
    \ < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    let sorted = lst.sorted()\n  \
    \  return sorted[1]", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var second = Int.max\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            second = min\n            min = lst[i]\n\
    \        } else if lst[i] < second {\n            second = lst[i]\n        }\n\
    \    }\n    return second == Int.max ? nil : second", "    guard lst.count > 1\
    \ else { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    while let next = sorted.first {\n        if next > prev {\n            return\
    \ next\n        }\n        prev = next\n        sorted.removeFirst()\n    }\n\
    \    return nil", "    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return min == secondMin\
    \ ? nil : secondMin", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return secondMin", "    var lst = lst\n    if lst.count < 2\
    \ {\n        return nil\n    }\n    lst.sort()\n    for i in 1..<lst.count {\n\
    \        if lst[i] != lst[i - 1] {\n            return lst[i]\n        }\n   \
    \ }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            second = min\n            min = lst[i]\n       \
    \ } else if lst[i] < second {\n            second = lst[i]\n        }\n    }\n\
    \    return second == Int.max ? nil : second", "    guard lst.count > 1 else {\
    \ return nil }\n    var smallest = lst[0]\n    var secondSmallest = Int.max\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i < secondSmallest && i != smallest\
    \ {\n            secondSmallest = i\n        }\n    }\n    return secondSmallest\
    \ == Int.max ? nil : secondSmallest", "    guard lst.count > 1 else { return nil\
    \ }\n    var lst = lst\n    lst.sort()\n    for i in 0..<lst.count - 1 {\n   \
    \     if lst[i] != lst[i + 1] {\n            return lst[i + 1]\n        }\n  \
    \  }\n    return nil", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var min = lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count {\n   \
    \     if lst[i] < min {\n            next = min\n            min = lst[i]\n  \
    \      } else if lst[i] < next {\n            next = lst[i]\n        }\n    }\n\
    \    return next"]
stop_tokens:
- "\n}"
