name: HumanEval_75_is_multiply_prime
language: swift
prompt: "\n/// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
  \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2 *\
  \ 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
  \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
  \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
  \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
  \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
  \ 1001) == true)"
completions: ["    var result = false\n    var a = a\n    var primeNumbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in primeNumbers {\n        if a % i == 0 {\n    \
    \        a /= i\n        }\n    }\n    if a == 1 {\n        result = true\n  \
    \  }\n    return result", "    var isMultiply = false\n    var isPrime = false\n\
    \    var primeNumbers = [Int]()\n    var primeNumbersMultiply = [Int]()\n    var\
    \ primeNumbersMultiply2 = [Int]()\n    var primeNumbersMultiply3 = [Int]()\n \
    \   var primeNumbersMultiply4 = [Int]()\n    var primeNumbersMultiply5 = [Int]()\n\
    \    var primeNumbersMultiply6 = [Int]()\n    var primeNumbersMultiply7 = [Int]()\n\
    \    var primeNumbersMultiply8 = [Int]()\n    var primeNumbersMultiply9 = [Int]()\n\
    \    var primeNumbersMultiply10 = [Int]()\n    var primeNumbersMultiply11 = [Int]()\n\
    \    var primeNumbersMultiply12 = [Int]()\n    var primeNumbersMultiply13 = [Int]()\n\
    \    var primeNumbersMultiply14 = [Int]()\n    var primeNumbersMultiply15 = [Int]()\n\
    \    var primeNumbersMultiply16 = [Int]()\n    var primeNumbersMultiply17 = [Int]()\n\
    \    var primeNumbersMultiply18 = [Int]()\n    var primeNumbersMultiply19 = [Int]()\n\
    \    var primeNumbersMultiply20 = [Int]()\n    var primeNumbersMultiply21 = [Int]()\n\
    \    var primeNumbersMultiply22 = [Int]()\n    var primeNumbersMultiply23 = [Int]()\n\
    \    var primeNumbersMultiply24 = [Int]()\n    var primeNumbersMultiply25 = [Int]()\n\
    \    var primeNumbersMultiply26 = [Int]()\n    var primeNumbersMultiply27 = [Int]()\n\
    \    var primeNumbersMultiply28 = [Int]()\n    var primeNumbersMultiply29 = [Int]()\n\
    \    var primeNumbersMultiply30 = [Int]()\n    var primeNumbersMultiply31 = [Int]()\n\
    \    var primeNumbersMultiply32 = [Int]()\n    var primeNumbersMultiply33 = [Int]()\n\
    \    var primeNumbersMultiply34 = [Int]()\n    var primeNumbersMultiply35 = [",
  "    var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n       \
    \ }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiplyPrime\
    \ = true\n                }\n            }\n        }\n    }\n    return isMultiplyPrime",
  "    var is_multiply_prime = false\n    var a = a\n    var prime_numbers = [Int]()\n\
    \    var prime_numbers_count = 0\n    var i = 2\n    while i <= a {\n        if\
    \ a % i == 0 {\n            prime_numbers.append(i)\n            prime_numbers_count\
    \ += 1\n            a /= i\n        } else {\n            i += 1\n        }\n\
    \    }\n    if prime_numbers_count == 3 {\n        is_multiply_prime = true\n\
    \    }\n    return is_multiply_prime", "    var isPrime = true\n    var a = a\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime\
    \ = false\n            a /= i\n        } else {\n            i += 1\n        }\n\
    \    }\n    return isPrime", "    var result = false\n    var primeNumbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var isMultiplyPrime = false\n    var primeNumbers = [Int]()\n    var primeNumbersCount\
    \ = 0\n    var primeNumbersSum = 0\n    var primeNumbersProduct = 1\n    var i\
    \ = 2\n    while i <= a {\n        var isPrime = true\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \      break\n            }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \            primeNumbersCount += 1\n            primeNumbersSum += i\n      \
    \      primeNumbersProduct *= i\n        }\n        i += 1\n    }\n    if primeNumbersCount\
    \ >= 3 && primeNumbersProduct == a {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime", "    var result = false\n    var a = a\n    var\
    \ i = 2\n    var count = 0\n    while i < a {\n        if a % i == 0 {\n     \
    \       a /= i\n            count += 1\n        } else {\n            i += 1\n\
    \        }\n    }\n    if count == 2 {\n        result = true\n    }\n    return\
    \ result", "    var a = a\n    var prime_numbers: [Int] = []\n    var i = 2\n\
    \    while a > 1 {\n        while a % i == 0 {\n            prime_numbers.append(i)\n\
    \            a /= i\n        }\n        i += 1\n    }\n    return prime_numbers.count\
    \ == 3", "    var result = false\n    var primes = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primes.append(i)\n        }\n  \
    \  }\n    for i in 0..<primes.count {\n        for j in 0..<primes.count {\n \
    \           for k in 0..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result", "    var isPrime = true\n\
    \    var number = a\n    var i = 2\n    while i < number {\n        if number\
    \ % i == 0 {\n            number /= i\n            isPrime = false\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return isPrime", "    var\
    \ result = false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n     \
    \   if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n    }\n\
    \    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var result = false\n    var a = a\n    var primes = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            primes.append(i)\n        }\n  \
    \  }\n    for i in primes {\n        if a % i == 0 {\n            a /= i\n   \
    \     }\n    }\n    if a == 1 {\n        result = true\n    }\n    return result",
  "    var isPrime = true\n    var i = 2\n    while i < a {\n        if a % i == 0\
    \ {\n            isPrime = false\n        }\n        i += 1\n    }\n    return\
    \ isPrime", "    var isPrime = true\n    var count = 0\n    for i in 2...a {\n\
    \        if a % i == 0 {\n            for j in 2...i {\n                if i %\
    \ j == 0 {\n                    isPrime = false\n                }\n         \
    \   }\n            if isPrime {\n                count += 1\n            }\n \
    \           isPrime = true\n        }\n    }\n    if count == 3 {\n        return\
    \ true\n    }\n    return false", "    var isPrime = true\n    var num = a\n \
    \   var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n         \
    \   isPrime = false\n            break\n        }\n        i += 1\n    }\n   \
    \ return isPrime", "    var isPrime = true\n    var primeNumbers = [Int]()\n \
    \   var number = a\n    for i in 2...number {\n        isPrime = true\n      \
    \  for j in 2..<i {\n            if i % j == 0 {\n                isPrime = false\n\
    \            }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \            if number % i == 0 {\n                number /= i\n            }\n\
    \        }\n    }\n    return primeNumbers.count == 3", "    var isMultiplyPrime\
    \ = false\n    var a = a\n    var primeNumbers = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n\
    \    }\n    for i in primeNumbers {\n        if a % i == 0 {\n            a /=\
    \ i\n        }\n    }\n    if a == 1 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime", "    var result = false\n    var primeNumbers =\
    \ [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var a = a\n    var primes = [Int]()\n    while a > 1 {\n        for i in 2...a\
    \ {\n            if a % i == 0 {\n                primes.append(i)\n         \
    \       a /= i\n                break\n            }\n        }\n    }\n    return\
    \ primes.count == 3"]
stop_tokens:
- "\n}"
