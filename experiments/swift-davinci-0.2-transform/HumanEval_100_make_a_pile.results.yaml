language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    while stones.last! > 1 {\n        stones.append(stones.last!\
    \ % 2 == 0 ? stones.last! / 2 : stones.last! / 2 + 1)\n    }\n    return stones.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp60tkbb31/tmp60tkbb31.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b213a53bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b213a232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b213a232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b213a2317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60tkbb31                        0x000055ab01bf2572 <unavailable> + 5490

    5    libc.so.6                          0x00002b213a727460 __libc_start_main +
    245

    6    tmp60tkbb31                        0x000055ab01bf21b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n\n    while i > 1 {\n       \
    \ i = i % 2 == 0 ? i / 2 : i / 2 + 1\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphuq018v2/tmphuq018v2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba09c12ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba09be25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba09be25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba09be247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphuq018v2                        0x0000559cd303c472 <unavailable> + 5234

    5    libc.so.6                          0x00002ba09c31a460 __libc_start_main +
    245

    6    tmphuq018v2                        0x0000559cd303c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n\n    while i > 1 {\n       \
    \ i = i % 2 == 0 ? i / 2 : i / 2 + 1\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphuq018v2/tmphuq018v2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba09c12ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba09be25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba09be25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba09be247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphuq018v2                        0x0000559cd303c472 <unavailable> + 5234

    5    libc.so.6                          0x00002ba09c31a460 __libc_start_main +
    245

    6    tmphuq018v2                        0x0000559cd303c0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        result.append(i\
    \ * 2 - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpryms3bbg/tmpryms3bbg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd941aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd93ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd93ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd93ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryms3bbg                        0x000055e2947205c2 <unavailable> + 5570

    5    libc.so.6                          0x00002abd9439a460 __libc_start_main +
    245

    6    tmpryms3bbg                        0x000055e294720209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var n = n\n    while n > 1 {\n       \
    \ n = n % 2 == 0 ? n / 2 : n / 2 + 1\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpboy5g2mq/tmpboy5g2mq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57e6c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57e698eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57e698e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57e698d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboy5g2mq                        0x000055d22ec16472 <unavailable> + 5234

    5    libc.so.6                          0x00002b57e6e83460 __libc_start_main +
    245

    6    tmpboy5g2mq                        0x000055d22ec160b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        result.append(i\
    \ * 2 - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpryms3bbg/tmpryms3bbg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd941aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd93ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd93ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd93ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryms3bbg                        0x000055e2947205c2 <unavailable> + 5570

    5    libc.so.6                          0x00002abd9439a460 __libc_start_main +
    245

    6    tmpryms3bbg                        0x000055e294720209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n\n    while i > 1 {\n       \
    \ i = i % 2 == 0 ? i / 2 : (i + 1) / 2\n        result.append(i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfjajmmug/tmpfjajmmug.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27154e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27151e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27151e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27151df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjajmmug                        0x0000559d276af472 <unavailable> + 5234

    5    libc.so.6                          0x00002b27156d5460 __libc_start_main +
    245

    6    tmpfjajmmug                        0x0000559d276af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       if next % 2 == 0 {\n            next -= 1\n        } else {\n        \
    \    next -= 2\n        }\n        result.append(next)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4msywn5p/tmp4msywn5p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478fdacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478faa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478faa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478faa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4msywn5p                        0x00005568c34b2472 <unavailable> + 5234

    5    libc.so.6                          0x00002b478ff98460 __libc_start_main +
    245

    6    tmp4msywn5p                        0x00005568c34b20b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        current = current % 2 == 0 ? current / 2 : (current + 1) / 2\n  \
    \      result.append(current)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpxo239tk9/tmpxo239tk9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996d8b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996d5aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996d5aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996d5a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo239tk9                        0x000055804ef14472 <unavailable> + 5234

    5    libc.so.6                          0x00002b996da9f460 __libc_start_main +
    245

    6    tmpxo239tk9                        0x000055804ef140b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var number = n\n    while number >\
    \ 0 {\n        result.append(number)\n        number = number % 2 == 0 ? number\
    \ + 2 : number + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level.isMultiple(of: 2) ? level\
    \ + 1 : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : (next + 1) / 2\n        stones.append(next)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpd33emnfs/tmpd33emnfs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec6e764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec6e45bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec6e45b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec6e45a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd33emnfs                        0x00005576e6c30472 <unavailable> + 5234

    5    libc.so.6                          0x00002aec6e950460 __libc_start_main +
    245

    6    tmpd33emnfs                        0x00005576e6c300b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var n = n\n    while n > 1 {\n       \
    \ n = n % 2 == 0 ? n / 2 : (n + 1) / 2\n        result.append(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp34u8jqjt/tmp34u8jqjt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edbab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edb7a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edb7a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edb7a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34u8jqjt                        0x00005603873bb472 <unavailable> + 5234

    5    libc.so.6                          0x00002b3edbc9e460 __libc_start_main +
    245

    6    tmp34u8jqjt                        0x00005603873bb0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        stones.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = n % 2 == 0 ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = n % 2 == 0 ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = next_odd_or_even(n:\
    \ current)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn_y2nk0f.swift:17:19: error: cannot find 'next_odd_or_even' in\
    \ scope\n        current = next_odd_or_even(n: current)\n                  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = n % 2 == 0 ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 1\n    while i <= n {\n  \
    \      result.append(i)\n        i += (i % 2 == 0) ? 2 : 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpl2yymsbs/tmpl2yymsbs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cf94a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cf919db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cf919d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cf919c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2yymsbs                        0x00005618e841e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b1cf9692460 __libc_start_main +
    245

    6    tmpl2yymsbs                        0x00005618e841e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = (current % 2 == 0)\
    \ ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        stones.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   pile.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = (current % 2 == 0)\
    \ ? current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = n\n    while level > 0 {\n\
    \        pile.append(level)\n        level = level % 2 == 0 ? level + 1 : level\
    \ + 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var next = n\n    while next > 0 {\n\
    \        result.append(next)\n        next = next % 2 == 0 ? next + 1 : next +\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : (next + 1) / 2\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpv3hjjv8z/tmpv3hjjv8z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc19523c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc1921ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc1921a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc192197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3hjjv8z                        0x000055cece32b472 <unavailable> + 5234

    5    libc.so.6                          0x00002acc1970f460 __libc_start_main +
    245

    6    tmpv3hjjv8z                        0x000055cece32b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var stones = n\n    while stones > 0\
    \ {\n        pile.append(stones)\n        stones = stones % 2 == 0 ? stones +\
    \ 2 : stones + 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        result.append(i\
    \ * 2 - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpryms3bbg/tmpryms3bbg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd941aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd93ea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd93ea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd93ea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryms3bbg                        0x000055e2947205c2 <unavailable> + 5570

    5    libc.so.6                          0x00002abd9439a460 __libc_start_main +
    245

    6    tmpryms3bbg                        0x000055e294720209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (1...n).map { n in\n        n % 2 == 0 ? n + 1 : n +\
    \ 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpmllylds_/tmpmllylds_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac599359c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac599050b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac599050988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac59904f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmllylds_                        0x000055aca1223552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac599545460 __libc_start_main +
    245

    6    tmpmllylds_                        0x000055aca1223199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones += 1\n        } else {\n            stones += 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current += 1\n        } else {\n\
    \            current += 2\n        }\n        result.append(current)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        stones.append(next)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp279kdmr9/tmp279kdmr9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84813edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84810e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84810e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84810e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp279kdmr9                        0x00005626025ce472 <unavailable> + 5234

    5    libc.so.6                          0x00002b84815d9460 __libc_start_main +
    245

    6    tmp279kdmr9                        0x00005626025ce0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var current = n\n    while current > 1\
    \ {\n        current = current.isMultiple(of: 2) ? current / 2 : (current + 1)\
    \ / 2\n        result.append(current)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwgvvb1_c/tmpwgvvb1_c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af77925fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af778f56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af778f56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af778f557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgvvb1_c                        0x0000556bb74a2572 <unavailable> + 5490

    5    libc.so.6                          0x00002af77944b460 __libc_start_main +
    245

    6    tmpwgvvb1_c                        0x0000556bb74a21b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       if next % 2 == 0 {\n            next -= 1\n        } else {\n        \
    \    next -= 2\n        }\n        result.append(next)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp4msywn5p/tmp4msywn5p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478fdacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478faa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478faa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478faa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4msywn5p                        0x00005568c34b2472 <unavailable> + 5234

    5    libc.so.6                          0x00002b478ff98460 __libc_start_main +
    245

    6    tmp4msywn5p                        0x00005568c34b20b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        stones.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = num % 2 == 0 ? num + 1 : num + 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   pile.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next.isMultiple(of: 2) ? next / 2 : (next + 1) / 2\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpw9b34x5l/tmpw9b34x5l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9691c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9691972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9691972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96919717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9b34x5l                        0x000056259bc00572 <unavailable> + 5490

    5    libc.so.6                          0x00002b9691e67460 __libc_start_main +
    245

    6    tmpw9b34x5l                        0x000056259bc001b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = (n % 2 == 0) ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var num = n\n    while num > 0 {\n\
    \        result.append(num)\n        num = (num % 2 == 0) ? num + 1 : num + 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    var i = n\n    while i > 1 {\n        i\
    \ = i % 2 == 0 ? i / 2 : i / 2 + 1\n        pile.append(i)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpdy9bti48/tmpdy9bti48.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d1b7e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d1b4dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d1b4df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d1b4de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy9bti48                        0x000055f952c4a472 <unavailable> + 5234

    5    libc.so.6                          0x00002b1d1b9d4460 __libc_start_main +
    245

    6    tmpdy9bti48                        0x000055f952c4a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824502
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        result.append(level)\n        level = level.isMultiple(of: 2) ? level\
    \ + 1 : level + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    for i in 1...n {\n        pile.append(i\
    \ * 2 - 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpu2tf2w1j/tmpu2tf2w1j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e883aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e880a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e880a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e880a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2tf2w1j                        0x0000559746f885c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b1e8859a460 __libc_start_main +
    245

    6    tmpu2tf2w1j                        0x0000559746f88209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824502
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var next = n\n    while next > 1 {\n \
    \       next = next % 2 == 0 ? next / 2 : next / 2 + 1\n        result.append(next)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcuvdo0t/tmppcuvdo0t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f277c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f277c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f277c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcuvdo0t                        0x000055a591058472 <unavailable> + 5234

    5    libc.so.6                          0x00002b7f27cbc460 __libc_start_main +
    245

    6    tmppcuvdo0t                        0x000055a5910580b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var n = n\n    while n > 0 {\n   \
    \     result.append(n)\n        n = n % 2 == 0 ? n + 1 : n + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = n\n    while level > 0\
    \ {\n        stones.append(level)\n        level = level % 2 == 0 ? level + 1\
    \ : level + 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    for i in 1...n {\n        stones.append(i)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpovfdckq9/tmpovfdckq9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d1384ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d13541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d13541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d135407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovfdckq9                        0x0000561feccaa5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b9d13a36460 __libc_start_main +
    245

    6    tmpovfdckq9                        0x0000561feccaa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824502
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [n]\n    var current = n\n    while current > 1\
    \ {\n        if current % 2 == 0 {\n            current += 1\n        } else {\n\
    \            current += 2\n        }\n        stones.append(current)\n    }\n\
    \    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824507
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var stones = n\n    while stones >\
    \ 0 {\n        result.append(stones)\n        if stones % 2 == 0 {\n         \
    \   stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpjfalosk4/tmpjfalosk4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840c080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840bd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840bd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840bd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfalosk4                        0x00005583b3ba84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b840c26c460 __libc_start_main +
    245

    6    tmpjfalosk4                        0x00005583b3ba8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824501
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var current = n\n    while current\
    \ > 0 {\n        result.append(current)\n        current = current % 2 == 0 ?\
    \ current + 1 : current + 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var i = n\n    while i > 0 {\n   \
    \     result.append(i)\n        i = (i % 2 == 0) ? i + 1 : i + 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824506
