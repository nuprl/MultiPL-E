name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"\
  c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n///\
  \ >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test:\
  \ \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String\
  \ : Int]\nfunc histogram(test: String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var dict = [String : Int]()\n    let arr = test.split(separator:\
    \ \" \")\n    for i in arr {\n        if let count = dict[String(i)] {\n     \
    \       dict[String(i)] = count + 1\n        } else {\n            dict[String(i)]\
    \ = 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    var max = 0\n    for letter in test.components(separatedBy: \" \") {\n  \
    \      if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n      \
    \  if histogram[letter]! > max {\n            max = histogram[letter]!\n     \
    \   }\n    }\n    var result = [String : Int]()\n    for (letter, count) in histogram\
    \ {\n        if count == max {\n            result[letter] = count\n        }\n\
    \    }\n    return result", "    var histogram = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = histogram[String(letter)] {\n            histogram[String(letter)] =\
    \ count + 1\n        } else {\n            histogram[String(letter)] = 1\n   \
    \     }\n    }\n    return histogram", "    var dict = [String : Int]()\n    let\
    \ letters = test.split(separator: \" \")\n    for letter in letters {\n      \
    \  if let count = dict[String(letter)] {\n            dict[String(letter)] = count\
    \ + 1\n        } else {\n            dict[String(letter)] = 1\n        }\n   \
    \ }\n    return dict", "    var histogram = [String : Int]()\n    let words =\
    \ test.components(separatedBy: \" \")\n    for word in words {\n        if let\
    \ count = histogram[word] {\n            histogram[word] = count + 1\n       \
    \ } else {\n            histogram[word] = 1\n        }\n    }\n    return histogram",
  "    var dict: [String : Int] = [:]\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let value = dict[String(char)] {\n            dict[String(char)]\
    \ = value + 1\n            if value + 1 > max {\n                max = value +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result: [String : Int] = [:]\n    for (key, value) in dict {\n \
    \       if value == max {\n            result[key] = value\n        }\n    }\n\
    \    return result", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    var max = 0\n    for i in arr {\n        if dict[i] == nil {\n \
    \           dict[i] = 1\n        } else {\n            dict[i]! += 1\n       \
    \ }\n        if dict[i]! > max {\n            max = dict[i]!\n        }\n    }\n\
    \    var result = [String : Int]()\n    for (key, value) in dict {\n        if\
    \ value == max {\n            result[key] = value\n        }\n    }\n    return\
    \ result", "    var histogram = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.components(separatedBy: \" \") {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter]! > max {\n  \
    \          max = histogram[letter]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in histogram {\n        if value == max {\n \
    \           result[key] = value\n        }\n    }\n    return result", "    var\
    \ dict = [String : Int]()\n    let testArray = test.components(separatedBy: \"\
    \ \")\n    for item in testArray {\n        if dict[item] == nil {\n         \
    \   dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n\
    \    }\n    return dict", "    var dict = [String : Int]()\n    let letters =\
    \ test.split(separator: \" \")\n    for letter in letters {\n        if let count\
    \ = dict[String(letter)] {\n            dict[String(letter)] = count + 1\n   \
    \     } else {\n            dict[String(letter)] = 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \        if dict[i]! > max {\n            max = dict[i]!\n        }\n    }\n \
    \   var result = [String : Int]()\n    for (key, value) in dict {\n        if\
    \ value == max {\n            result[key] = value\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    var max = 0\n    for char in test.characters {\n   \
    \     if char != \" \" {\n            if let count = dict[String(char)] {\n  \
    \              dict[String(char)] = count + 1\n                if count + 1 >\
    \ max {\n                    max = count + 1\n                }\n            }\
    \ else {\n                dict[String(char)] = 1\n                if 1 > max {\n\
    \                    max = 1\n                }\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in dict {\n    \
    \    if value == max {\n            result[key] = value\n        }\n    }\n  \
    \  return result", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    let letters = test.components(separatedBy:\
    \ \" \")\n    var dict = [String : Int]()\n    for letter in letters {\n     \
    \   if let count = dict[letter] {\n            dict[letter] = count + 1\n    \
    \    } else {\n            dict[letter] = 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    var max = 0\n    for letter in test.split(separator: \" \") {\n        if\
    \ let count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    var finalResult = [String : Int]()\n    for (letter, count) in result {\n\
    \        if count == max {\n            finalResult[letter] = count\n        }\n\
    \    }\n    return finalResult", "    var histogram = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = dict[letter] {\n        \
    \    dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict", "    var histogram = [String : Int]()\n \
    \   let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if histogram[letter] == nil {\n            histogram[letter] = 1\n\
    \        } else {\n            histogram[letter]! += 1\n        }\n    }\n   \
    \ return histogram", "    var dict = [String : Int]()\n    var max = 0\n    for\
    \ letter in test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          dict[String(letter)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    let letters = test.components(separatedBy: \" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n       \
    \ if result[letter]! > max {\n            max = result[letter]!\n        }\n \
    \   }\n    for (key, value) in result {\n        if value != max {\n         \
    \   result.removeValue(forKey: key)\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dict[item] {\n     \
    \       dict[item] = count + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for i in array {\n        if\
    \ dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]\
    \ = dict[i]! + 1\n        }\n    }\n    return dict", "    let letters = test.components(separatedBy:\
    \ \" \")\n    var histogram = [String : Int]()\n    for letter in letters {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var result = [String : Int]()\n    let letters =\
    \ test.components(separatedBy: \" \")\n    for letter in letters {\n        if\
    \ let count = result[letter] {\n            result[letter] = count + 1\n     \
    \   } else {\n            result[letter] = 1\n        }\n    }\n    return result",
  "    var dict = [String : Int]()\n    let array = test.split(separator: \" \")\n\
    \    for i in array {\n        if dict[String(i)] == nil {\n            dict[String(i)]\
    \ = 1\n        } else {\n            dict[String(i)]! += 1\n        }\n    }\n\
    \    return dict", "    let letters = test.split(separator: \" \")\n    var dict\
    \ = [String : Int]()\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    let array = test.split(separator: \" \")\n    for i\
    \ in array {\n        if let count = dict[String(i)] {\n            dict[String(i)]\
    \ = count + 1\n        } else {\n            dict[String(i)] = 1\n        }\n\
    \    }\n    return dict", "    var histogram = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = histogram[String(letter)] {\n            histogram[String(letter)] =\
    \ count + 1\n        } else {\n            histogram[String(letter)] = 1\n   \
    \     }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var result: [String : Int] = [:]\n    let words = test.split(separator: \" \"\
    )\n    for word in words {\n        if let count = result[String(word)] {\n  \
    \          result[String(word)] = count + 1\n        } else {\n            result[String(word)]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let words = test.components(separatedBy: \" \")\n    for word in words {\n\
    \        if let count = result[word] {\n            result[word] = count + 1\n\
    \        } else {\n            result[word] = 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.components(separatedBy: \" \") {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n            if count + 1 > max {\n\
    \                max = count + 1\n            }\n        } else {\n          \
    \  result[letter] = 1\n            if 1 > max {\n                max = 1\n   \
    \         }\n        }\n    }\n    return result.filter { $0.value == max }",
  "    var result = [String : Int]()\n    let letters = test.split(separator: \" \"\
    )\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var dict = [String : Int]()\n    let array = test.components(separatedBy: \"\
    \ \")\n    for i in array {\n        if let value = dict[i] {\n            dict[i]\
    \ = value + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n \
    \   return dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    for letter in test.split(separator: \" \") {\n        if\
    \ let count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    for (key, value) in result {\n        if value != max {\n            result.removeValue(forKey:\
    \ key)\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let array\
    \ = test.components(separatedBy: \" \")\n    for letter in array {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict", " \
    \   var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for letter in test.components(separatedBy: \" \") {\n  \
    \      if let count = dict[letter] {\n            dict[letter] = count + 1\n \
    \       } else {\n            dict[letter] = 1\n        }\n        if dict[letter]!\
    \ > max {\n            max = dict[letter]!\n        }\n    }\n    var result =\
    \ [String : Int]()\n    for (key, value) in dict {\n        if value == max {\n\
    \            result[key] = value\n        }\n    }\n    return result", "    var\
    \ histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    var max = 0\n    for char in test.split(separator: \"\
    \ \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    return dict.filter { $0.value == max }", "    var result = [String :\
    \ Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var result = [String : Int]()\n    var max = 0\n\
    \    for letter in test.components(separatedBy: \" \") {\n        if let count\
    \ = result[letter] {\n            result[letter] = count + 1\n            if count\
    \ + 1 > max {\n                max = count + 1\n            }\n        } else\
    \ {\n            result[letter] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    var final = [String : Int]()\n\
    \    for (key, value) in result {\n        if value == max {\n            final[key]\
    \ = value\n        }\n    }\n    return final", "    var histogram = [String :\
    \ Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = dict[letter] {\n            dict[letter] = count + 1\n      \
    \  } else {\n            dict[letter] = 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let array = test.components(separatedBy: \"\
    \ \")\n    for element in array {\n        if dict[element] == nil {\n       \
    \     dict[element] = 1\n        } else {\n            dict[element]! += 1\n \
    \       }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if result[letter] == nil {\n            result[letter] = 1\n        }\
    \ else {\n            result[letter]! += 1\n        }\n    }\n    return result",
  "    var result = [String : Int]()\n    var max = 0\n    var maxChars = [String]()\n\
    \    let chars = test.split(separator: \" \")\n    for char in chars {\n     \
    \   if let count = result[String(char)] {\n            result[String(char)] =\
    \ count + 1\n            if count + 1 > max {\n                max = count + 1\n\
    \                maxChars = [String(char)]\n            } else if count + 1 ==\
    \ max {\n                maxChars.append(String(char))\n            }\n      \
    \  } else {\n            result[String(char)] = 1\n            if max == 0 {\n\
    \                max = 1\n                maxChars = [String(char)]\n        \
    \    }\n        }\n    }\n    return maxChars.reduce(into: [String : Int]()) {\
    \ (result, char) in\n        result[char] = max\n    }", "    var result = [String\
    \ : Int]()\n    let letters = test.split(separator: \" \")\n    for letter in\
    \ letters {\n        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n        } else {\n            result[String(letter)] = 1\n    \
    \    }\n    }\n    return result", "    var dict = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = dict[letter] {\n            dict[letter] = count + 1\n      \
    \  } else {\n            dict[letter] = 1\n        }\n    }\n    return dict",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = dict[String(letter)] {\n            dict[String(letter)]\
    \ = count + 1\n        } else {\n            dict[String(letter)] = 1\n      \
    \  }\n    }\n    return dict", "    var histogram = [String : Int]()\n    let\
    \ letters = test.split(separator: \" \")\n    for letter in letters {\n      \
    \  if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    var maxCount\
    \ = 0\n    for char in test.characters {\n        if char != \" \" {\n       \
    \     if let count = dict[String(char)] {\n                dict[String(char)]\
    \ = count + 1\n                if count + 1 > maxCount {\n                   \
    \ maxCount = count + 1\n                }\n            } else {\n            \
    \    dict[String(char)] = 1\n                if 1 > maxCount {\n             \
    \       maxCount = 1\n                }\n            }\n        }\n    }\n   \
    \ var result = [String : Int]()\n    for (key, value) in dict {\n        if value\
    \ == maxCount {\n            result[key] = value\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var histogram = [String : Int]()\n \
    \   let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let array\
    \ = test.components(separatedBy: \" \")\n    for letter in array {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict", " \
    \   var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var dict = [String : Int]()\n    var max = 0\n    for\
    \ letter in test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          dict[String(letter)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (letter, count) in dict {\n        if count == max {\n            result[letter]\
    \ = count\n        }\n    }\n    return result", "    var dict: [String : Int]\
    \ = [:]\n    let array = test.split(separator: \" \")\n    for i in array {\n\
    \        if dict[String(i)] == nil {\n            dict[String(i)] = 1\n      \
    \  } else {\n            dict[String(i)]! += 1\n        }\n    }\n    return dict",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    for letter in test.split(separator: \" \") {\n        if\
    \ let count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter { $0.value == max }", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for letter in test.components(separatedBy: \" \") {\n  \
    \      if let count = dict[letter] {\n            dict[letter] = count + 1\n \
    \       } else {\n            dict[letter] = 1\n        }\n        if dict[letter]!\
    \ > max {\n            max = dict[letter]!\n        }\n    }\n    var result =\
    \ [String : Int]()\n    for (key, value) in dict {\n        if value == max {\n\
    \            result[key] = value\n        }\n    }\n    return result", "    var\
    \ dict = [String : Int]()\n    let array = test.split(separator: \" \")\n    for\
    \ i in array {\n        if dict[String(i)] == nil {\n            dict[String(i)]\
    \ = 1\n        } else {\n            dict[String(i)]! += 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let letters = test.split(separator: \" \"\
    )\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    let letters = test.components(separatedBy:\
    \ \" \")\n    var histogram = [String : Int]()\n    for letter in letters {\n\
    \        if histogram[letter] == nil {\n            histogram[letter] = 1\n  \
    \      } else {\n            histogram[letter]! += 1\n        }\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if dict[String(letter)] == nil {\n            dict[String(letter)] =\
    \ 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n   \
    \ }\n    return dict", "    var dict = [String : Int]()\n    var max = 0\n   \
    \ var maxKeys = [String]()\n    let array = test.components(separatedBy: \" \"\
    )\n    for i in array {\n        if dict[i] == nil {\n            dict[i] = 1\n\
    \        } else {\n            dict[i]! += 1\n        }\n        if dict[i]! >\
    \ max {\n            max = dict[i]!\n            maxKeys = [i]\n        } else\
    \ if dict[i]! == max {\n            maxKeys.append(i)\n        }\n    }\n    for\
    \ i in maxKeys {\n        dict[i] = max\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = dict[letter] {\n        \
    \    dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = dict[letter] {\n            dict[letter] = count + 1\n\
    \        } else {\n            dict[letter] = 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if result[letter] == nil {\n            result[letter] = 1\n    \
    \    } else {\n            result[letter]! += 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    var finalResult = [String\
    \ : Int]()\n    for (key, value) in result {\n        if value == max {\n    \
    \        finalResult[key] = value\n        }\n    }\n    return finalResult",
  "    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = result[word] {\n   \
    \         result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    for char in test.characters {\n        if char != \" \" {\n            if\
    \ let count = dict[String(char)] {\n                dict[String(char)] = count\
    \ + 1\n            } else {\n                dict[String(char)] = 1\n        \
    \    }\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if result[i] == nil {\n            result[i]\
    \ = 1\n        } else {\n            result[i] = result[i]! + 1\n        }\n \
    \   }\n    return result", "    var dict = [String : Int]()\n    var max = 0\n\
    \    for char in test.characters {\n        if char != \" \" {\n            if\
    \ let count = dict[String(char)] {\n                dict[String(char)] = count\
    \ + 1\n                if count + 1 > max {\n                    max = count +\
    \ 1\n                }\n            } else {\n                dict[String(char)]\
    \ = 1\n                if 1 > max {\n                    max = 1\n           \
    \     }\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = dict[String(letter)] {\n            dict[String(letter)]\
    \ = count + 1\n        } else {\n            dict[String(letter)] = 1\n      \
    \  }\n    }\n    return dict", "    var dict = [String : Int]()\n    let array\
    \ = test.split(separator: \" \")\n    for char in array {\n        if let count\
    \ = dict[String(char)] {\n            dict[String(char)] = count + 1\n       \
    \ } else {\n            dict[String(char)] = 1\n        }\n    }\n    return dict",
  "    var result = [String : Int]()\n    let words = test.split(separator: \" \"\
    )\n    for word in words {\n        if result[String(word)] == nil {\n       \
    \     result[String(word)] = 1\n        } else {\n            result[String(word)]!\
    \ += 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for i in array {\n        if\
    \ dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]\
    \ = dict[i]! + 1\n        }\n    }\n    return dict", "    var dict = [String\
    \ : Int]()\n    let array = test.components(separatedBy: \" \")\n    for i in\
    \ array {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", " \
    \   var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if result[word] == nil {\n        \
    \    result[word] = 1\n        } else {\n            result[word]! += 1\n    \
    \    }\n    }\n    return result", "    var result = [String : Int]()\n    let\
    \ letters = test.split(separator: \" \")\n    for letter in letters {\n      \
    \  if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n        } else {\n            result[String(letter)] = 1\n    \
    \    }\n    }\n    return result", "    var histogram = [String : Int]()\n   \
    \ let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let arr =\
    \ test.components(separatedBy: \" \")\n    for item in arr {\n        if let count\
    \ = dict[item] {\n            dict[item] = count + 1\n        } else {\n     \
    \       dict[item] = 1\n        }\n    }\n    return dict", "    var dict = [String\
    \ : Int]()\n    let array = test.components(separatedBy: \" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in dict {\n    \
    \    if value == max {\n            result[key] = value\n        }\n    }\n  \
    \  return result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for i in array {\n        if\
    \ let count = dict[i] {\n            dict[i] = count + 1\n        } else {\n \
    \           dict[i] = 1\n        }\n    }\n    return dict", "    var dict = [String\
    \ : Int]()\n    let array = test.components(separatedBy: \" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if let count = dict[letter] {\n \
    \           dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    var maxCount = 0\n    for letter in test.split(separator: \" \") {\n    \
    \    let count = result[String(letter)] ?? 0\n        result[String(letter)] =\
    \ count + 1\n        maxCount = max(maxCount, count + 1)\n    }\n    return result.filter\
    \ { $0.value == maxCount }", "    var result = [String : Int]()\n    let testArray\
    \ = test.components(separatedBy: \" \")\n    for letter in testArray {\n     \
    \   if let count = result[letter] {\n            result[letter] = count + 1\n\
    \        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var result: [String : Int] = [:]\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var result = [String : Int]()\n    var max = 0\n    for\
    \ letter in test.components(separatedBy: \" \") {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n            if result[letter]! >\
    \ max {\n                max = result[letter]!\n            }\n        } else\
    \ {\n            result[letter] = 1\n        }\n    }\n    var maxResult = [String\
    \ : Int]()\n    for (key, value) in result {\n        if value == max {\n    \
    \        maxResult[key] = value\n        }\n    }\n    return maxResult", "  \
    \  var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if result[letter] == nil {\n            result[letter] = 1\n    \
    \    } else {\n            result[letter]! += 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var dict = [String : Int]()\n    let array = test.components(separatedBy: \"\
    \ \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let arr = test.split(separator: \" \")\n    for i in arr {\n        if dict[String(i)]\
    \ == nil {\n            dict[String(i)] = 1\n        } else {\n            dict[String(i)]!\
    \ += 1\n        }\n    }\n    var max = 0\n    for i in dict {\n        if i.value\
    \ > max {\n            max = i.value\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for i in dict {\n        if i.value == max {\n            result[i.key]\
    \ = i.value\n        }\n    }\n    return result", "    var result = [String :\
    \ Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ words = test.split(separator: \" \")\n    for word in words {\n        if result[String(word)]\
    \ == nil {\n            result[String(word)] = 1\n        } else {\n         \
    \   result[String(word)]! += 1\n        }\n    }\n    return result", "    var\
    \ histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for item in array {\n        if let count = result[item] {\n            result[item]\
    \ = count + 1\n        } else {\n            result[item] = 1\n        }\n   \
    \ }\n    return result", "    var histogram = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = histogram[letter] {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var histogram = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = histogram[String(letter)] {\n            histogram[String(letter)] =\
    \ count + 1\n        } else {\n            histogram[String(letter)] = 1\n   \
    \     }\n    }\n    return histogram", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for letter in array {\n   \
    \     if let count = dict[letter] {\n            dict[letter] = count + 1\n  \
    \      } else {\n            dict[letter] = 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    var maxValue = 0\n    for letter in test.split(separator:\
    \ \" \") {\n        if dict[String(letter)] == nil {\n            dict[String(letter)]\
    \ = 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n \
    \       if dict[String(letter)]! > maxValue {\n            maxValue = dict[String(letter)]!\n\
    \        }\n    }\n    var result = [String : Int]()\n    for (key, value) in\
    \ dict {\n        if value == maxValue {\n            result[key] = value\n  \
    \      }\n    }\n    return result", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if result[letter] == nil {\n            result[letter] = 1\n        }\
    \ else {\n            result[letter]! += 1\n        }\n    }\n    return result",
  "    var dict = [String : Int]()\n    let words = test.components(separatedBy: \"\
    \ \")\n    for word in words {\n        if let count = dict[word] {\n        \
    \    dict[word] = count + 1\n        } else {\n            dict[word] = 1\n  \
    \      }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if result[letter] == nil {\n            result[letter] = 1\n        }\
    \ else {\n            result[letter]! += 1\n        }\n    }\n    return result",
  "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var histogram = [String : Int]()\n \
    \   let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let letters = test.split(separator: \" \"\
    )\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    let arr = test.components(separatedBy: \" \")\n    for i in arr {\n     \
    \   if dict[i] == nil {\n            dict[i] = 1\n        } else {\n         \
    \   dict[i]! += 1\n        }\n    }\n    return dict", "    var histogram: [String\
    \ : Int] = [:]\n    let letters = test.components(separatedBy: \" \")\n    for\
    \ letter in letters {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    var max = 0\n    var maxKeys = [String]()\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n                maxKeys = [String(char)]\n            } else if count + 1\
    \ == max {\n                maxKeys.append(String(char))\n            }\n    \
    \    } else {\n            dict[String(char)] = 1\n            if maxKeys.isEmpty\
    \ {\n                maxKeys = [String(char)]\n            }\n        }\n    }\n\
    \    for key in dict.keys {\n        if !maxKeys.contains(key) {\n           \
    \ dict[key] = 0\n        }\n    }\n    return dict", "    var dict = [String :\
    \ Int]()\n    let arr = test.split(separator: \" \")\n    for i in arr {\n   \
    \     if let count = dict[String(i)] {\n            dict[String(i)] = count +\
    \ 1\n        } else {\n            dict[String(i)] = 1\n        }\n    }\n   \
    \ return dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    let letters = test.split(separator: \" \")\n    for\
    \ letter in letters {\n        if let count = dict[String(letter)] {\n       \
    \     dict[String(letter)] = count + 1\n        } else {\n            dict[String(letter)]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for char in test.characters {\n        if char != \" \"\
    \ {\n            if let count = dict[String(char)] {\n                dict[String(char)]\
    \ = count + 1\n                if count + 1 > max {\n                    max =\
    \ count + 1\n                }\n            } else {\n                dict[String(char)]\
    \ = 1\n                if 1 > max {\n                    max = 1\n           \
    \     }\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    for char in test.characters {\n        if char != \" \"\
    \ {\n            if let count = result[String(char)] {\n                result[String(char)]\
    \ = count + 1\n                if count + 1 > max {\n                    max =\
    \ count + 1\n                }\n            } else {\n                result[String(char)]\
    \ = 1\n                if 1 > max {\n                    max = 1\n           \
    \     }\n            }\n        }\n    }\n    return result.filter { $0.1 == max\
    \ }", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    for letter in test.split(separator: \" \") {\n        if\
    \ let count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter { $0.value == max }", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for letter in array\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = dict[letter] {\n        \
    \    dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    var max = 0\n    for letter in test.split(separator: \" \") {\n        if\
    \ let count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter({ $0.value == max })", "    var dict = [String : Int]()\n\
    \    var max = 0\n    var maxLetters = [String]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(letter)] {\n            dict[String(letter)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n                maxLetters = [String(letter)]\n            } else if count\
    \ + 1 == max {\n                maxLetters.append(String(letter))\n          \
    \  }\n        } else {\n            dict[String(letter)] = 1\n            if max\
    \ == 0 {\n                max = 1\n                maxLetters = [String(letter)]\n\
    \            }\n        }\n    }\n    var result = [String : Int]()\n    for letter\
    \ in maxLetters {\n        result[letter] = max\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict", "    var dict = [String : Int]()\n    let array = test.split(separator:\
    \ \" \")\n    for item in array {\n        if let count = dict[String(item)] {\n\
    \            dict[String(item)] = count + 1\n        } else {\n            dict[String(item)]\
    \ = 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    for letter in test.split(separator: \" \") {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var result = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let value = result[item] {\n   \
    \         result[item] = value + 1\n            if value + 1 > max {\n       \
    \         max = value + 1\n            }\n        } else {\n            result[item]\
    \ = 1\n            if 1 > max {\n                max = 1\n            }\n    \
    \    }\n    }\n    var result2 = [String : Int]()\n    for item in result {\n\
    \        if item.value == max {\n            result2[item.key] = item.value\n\
    \        }\n    }\n    return result2", "    var dict = [String : Int]()\n   \
    \ let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = dict[letter] {\n            dict[letter] = count +\
    \ 1\n        } else {\n            dict[letter] = 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in dict {\n    \
    \    if value == max {\n            result[key] = value\n        }\n    }\n  \
    \  return result", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for letter in array {\n        if dict[letter] == nil {\n            dict[letter]\
    \ = 1\n        } else {\n            dict[letter]! += 1\n        }\n    }\n  \
    \  return dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    var maxCount = 0\n    var maxLetters = [String]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n            if count + 1 > maxCount {\n                maxCount\
    \ = count + 1\n                maxLetters = [letter]\n            } else if count\
    \ + 1 == maxCount {\n                maxLetters.append(letter)\n            }\n\
    \        } else {\n            histogram[letter] = 1\n            if maxCount\
    \ == 0 {\n                maxCount = 1\n                maxLetters = [letter]\n\
    \            }\n        }\n    }\n    for letter in maxLetters {\n        histogram[letter]\
    \ = maxCount\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if result[letter] == nil {\n           \
    \ result[letter] = 1\n        } else {\n            result[letter]! += 1\n   \
    \     }\n    }\n    return result", "    var dictionary = [String : Int]()\n \
    \   let array = test.split(separator: \" \")\n    for letter in array {\n    \
    \    if let count = dictionary[String(letter)] {\n            dictionary[String(letter)]\
    \ = count + 1\n        } else {\n            dictionary[String(letter)] = 1\n\
    \        }\n    }\n    return dictionary", "    var dict = [String : Int]()\n\
    \    for char in test.split(separator: \" \") {\n        if let count = dict[String(char)]\
    \ {\n            dict[String(char)] = count + 1\n        } else {\n          \
    \  dict[String(char)] = 1\n        }\n    }\n    return dict", "    var dict =\
    \ [String : Int]()\n    let array = test.components(separatedBy: \" \")\n    for\
    \ letter in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict", "    var result = [String : Int]()\n    var max = 0\n \
    \   for letter in test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var histogram = [String : Int]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var dict = [String : Int]()\n  \
    \  var max = 0\n    var maxKeys = [String]()\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n                maxKeys = [String(char)]\n            } else if count + 1\
    \ == max {\n                maxKeys.append(String(char))\n            }\n    \
    \    } else {\n            dict[String(char)] = 1\n            if max == 0 {\n\
    \                max = 1\n                maxKeys = [String(char)]\n         \
    \   }\n        }\n    }\n    var result = [String : Int]()\n    for key in maxKeys\
    \ {\n        result[key] = max\n    }\n    return result", "    var result = [String\
    \ : Int]()\n    let array = test.components(separatedBy: \" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item]! += 1\n        }\n    }\n    return\
    \ result", "    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if result[String(letter)] == nil {\n            result[String(letter)]\
    \ = 1\n        } else {\n            result[String(letter)]! += 1\n        }\n\
    \    }\n    return result", "    var histogram = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = histogram[letter] {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if let count = dict[i] {\n            dict[i]\
    \ = count + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n \
    \   return dict", "    var histogram = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = histogram[word] {\n\
    \            histogram[word] = count + 1\n        } else {\n            histogram[word]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    let arr = test.components(separatedBy: \" \")\n    for i in arr {\n     \
    \   if let count = dict[i] {\n            dict[i] = count + 1\n        } else\
    \ {\n            dict[i] = 1\n        }\n    }\n    return dict", "    var dict:\
    \ [String : Int] = [:]\n    let array = test.components(separatedBy: \" \")\n\
    \    for letter in array {\n        if let count = dict[letter] {\n          \
    \  dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict"]
stop_tokens:
- "\n}"
