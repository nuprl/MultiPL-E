language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = Int(round(Double(n + m) / 2))\n    return\
    \ .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpa52b05e7.swift:19:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824787
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = Int(round(Double(sum) / Double(m - n + 1)))\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpkvj14w5j.swift:22:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824887
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmprstwn3bi.swift:20:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let bin = String(avg, radix: 2)\n    return .success(\"\
    0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3bdqn5p3/tmp3bdqn5p3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edd414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edd10bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edd10b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edd10a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bdqn5p3                        0x000055cad6395fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b3edd600460 __libc_start_main +
    245

    6    tmp3bdqn5p3                        0x000055cad6395779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = n + m\n    let avg = sum / 2\n \
    \   let binary = String(avg, radix: 2)\n    return .success(\"0b\\(binary)\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmprx4ks4hd/tmprx4ks4hd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9225650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9225347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9225347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92253467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprx4ks4hd                        0x0000555e6b9d3eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b922583c460 __libc_start_main +
    245

    6    tmprx4ks4hd                        0x0000555e6b9d3649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n + m) / 2\n    let binary\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpzr1zcdcr/tmpzr1zcdcr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6ea38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6e72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6e72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6e72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr1zcdcr                        0x0000558b6eaa6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0f6ec24460 __libc_start_main +
    245

    6    tmpzr1zcdcr                        0x0000558b6eaa6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n + m) / 2\n    return .success(\"\
    0b\\(String(average, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpgc6i3ozn/tmpgc6i3ozn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad21eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad21be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad21be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad21be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgc6i3ozn                        0x000055a1f3463eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002aad220db460 __libc_start_main +
    245

    6    tmpgc6i3ozn                        0x000055a1f3463649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    let avg = (n + m)\
    \ / 2\n    let rounded = Int(round(Double(avg)))\n    let binary = String(rounded,\
    \ radix: 2)\n    return n > m ? .failure(-1) : .success(\"0b\\(binary)\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpa6cidx6h.swift:19:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(avg)))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1659824887
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmprstwn3bi.swift:20:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let bin = String(avg, radix: 2)\n    return .success(\"\
    0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3bdqn5p3/tmp3bdqn5p3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edd414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edd10bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edd10b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edd10a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bdqn5p3                        0x000055cad6395fe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b3edd600460 __libc_start_main +
    245

    6    tmp3bdqn5p3                        0x000055cad6395779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    return .success(\"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"\
    0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpt8cgwstw/tmpt8cgwstw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdd3285c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdd2f7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdd2f7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdd2f7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8cgwstw                        0x0000559cb53a7635 <unavailable> + 5685

    5    libc.so.6                          0x00002acdd3471460 __libc_start_main +
    245

    6    tmpt8cgwstw                        0x0000559cb53a7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n + m) / 2\n    let binary\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpzr1zcdcr/tmpzr1zcdcr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6ea38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6e72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6e72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6e72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr1zcdcr                        0x0000558b6eaa6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0f6ec24460 __libc_start_main +
    245

    6    tmpzr1zcdcr                        0x0000558b6eaa6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n + m) / 2\n    let binary\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpzr1zcdcr/tmpzr1zcdcr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6ea38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6e72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6e72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6e72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr1zcdcr                        0x0000558b6eaa6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0f6ec24460 __libc_start_main +
    245

    6    tmpzr1zcdcr                        0x0000558b6eaa6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmplj5ete7j/tmplj5ete7j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29de7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29de4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29de4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29de4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj5ete7j                        0x00005565fed47eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b29de9a3460 __libc_start_main +
    245

    6    tmplj5ete7j                        0x00005565fed47649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let average = (n + m) / 2\n    let binary\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpzr1zcdcr/tmpzr1zcdcr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6ea38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6e72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6e72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6e72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzr1zcdcr                        0x0000558b6eaa6eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0f6ec24460 __libc_start_main +
    245

    6    tmpzr1zcdcr                        0x0000558b6eaa6649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = Int(round(Double(sum) / Double(m - n + 1)))\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpzbk6du5_.swift:22:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824787
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    return .success(String(format: \"0b%b\", (n + m)\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpuurwhixd.swift:19:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(String(format:\
    \ \"0b%b\", (n + m) / 2))\n                          ^~~~~~~\n               \
    \            repeating       count: \n"
  stdout: ''
  timestamp: 1659824887
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum\
    \ / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvrsp1bsa/tmpvrsp1bsa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1dd3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1dd0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1dd0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1dd0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrsp1bsa                        0x000055fed7c578b5 <unavailable> + 6325

    5    libc.so.6                          0x00002ad1dd5e7460 __libc_start_main +
    245

    6    tmpvrsp1bsa                        0x000055fed7c574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(\"\
    0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7iw7hbtj/tmp7iw7hbtj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718937cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7189073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7189073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71890727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iw7hbtj                        0x00005608ff0fbfe8 <unavailable> + 8168

    5    libc.so.6                          0x00002b7189568460 __libc_start_main +
    245

    6    tmp7iw7hbtj                        0x00005608ff0fb779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpxkf7zatx/tmpxkf7zatx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8baf5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8baf298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8baf298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8baf2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkf7zatx                        0x0000558ceff74eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8baf78d460 __libc_start_main +
    245

    6    tmpxkf7zatx                        0x0000558ceff74649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpkmopxucq/tmpkmopxucq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab489c1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab489916b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab489916988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4899157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmopxucq                        0x00005622aa39ceb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ab489e0b460 __libc_start_main +
    245

    6    tmpkmopxucq                        0x00005622aa39c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let\
    \ avg = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3mjd3abh/tmp3mjd3abh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5076c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5073bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5073ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5073b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mjd3abh                        0x000055cc0a8da775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac5078af460 __libc_start_main +
    245

    6    tmp3mjd3abh                        0x000055cc0a8da379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n:\
    \ 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"\
    0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc\
    \ rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    if n > m {\n     \
    \   return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp3qcaw1i0/tmp3qcaw1i0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d506ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qcaw1i0                        0x00005560644318b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b92d525a460 __libc_start_main +
    245

    6    tmp3qcaw1i0                        0x00005560644314b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824788
