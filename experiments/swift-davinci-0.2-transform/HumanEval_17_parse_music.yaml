name: HumanEval_17_parse_music
language: swift
prompt: "\n/// Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n/// Your task is to parse this string and return list of\
  \ integers corresponding to how many beats does each\n/// not last.\n/// Here is\
  \ a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts\
  \ two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
  \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc\
  \ parse_music(music_string: String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as\
  \ [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
  \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .|\
  \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"\
  o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
completions: ["    var beats = [Int]()\n    let notes = music_string.split(separator:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats", "    var result: [Int] = []\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"|\":\n            result.append(2)\n        case \".\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats", " \
    \   var beats = [Int]()\n    var note = \"\"\n    for char in music_string {\n\
    \        if char == \" \" {\n            if note == \"o\" {\n                beats.append(4)\n\
    \            } else if note == \"o|\" {\n                beats.append(2)\n   \
    \         } else if note == \".|\" {\n                beats.append(1)\n      \
    \      }\n            note = \"\"\n        } else {\n            note += String(char)\n\
    \        }\n    }\n    return beats", "    let beats = [4, 2, 1]\n    var result\
    \ = [Int]()\n    var i = 0\n    while i < music_string.count {\n        let index\
    \ = music_string.index(music_string.startIndex, offsetBy: i)\n        let char\
    \ = music_string[index]\n        if char == \"o\" {\n            result.append(beats[0])\n\
    \            i += 1\n        } else if char == \"o\" && music_string[index] ==\
    \ \"|\" {\n            result.append(beats[1])\n            i += 2\n        }\
    \ else if char == \".\" && music_string[index] == \"|\" {\n            result.append(beats[2])\n\
    \            i += 2\n        }\n    }\n    return result", "    var beats = [Int]()\n\
    \    var beat = 0\n    for char in music_string {\n        if char == \"o\" {\n\
    \            beat = 4\n        } else if char == \"|\" {\n            beat = beat\
    \ / 2\n        } else if char == \".\" {\n            beat = beat / 2\n      \
    \  }\n        beats.append(beat)\n    }\n    return beats", "    var result =\
    \ [Int]()\n    let music_array = music_string.split(separator: \" \")\n    for\
    \ note in music_array {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result", "    var beats = [Int]()\n    var music_string = music_string\n   \
    \ while music_string.count > 0 {\n        if music_string.hasPrefix(\"o o\") {\n\
    \            beats.append(4)\n            beats.append(4)\n            music_string.removeFirst(3)\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            beats.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            beats.append(1)\n            music_string.removeFirst(2)\n\
    \        } else {\n            music_string.removeFirst()\n        }\n    }\n\
    \    return beats", '    return [Int]()', "    let notes = music_string.split(separator:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats", " \
    \   let music_string = music_string.replacingOccurrences(of: \" \", with: \"\"\
    )\n    let music_string = music_string.replacingOccurrences(of: \"o\", with: \"\
    4\")\n    let music_string = music_string.replacingOccurrences(of: \"o|\", with:\
    \ \"2\")\n    let music_string = music_string.replacingOccurrences(of: \".|\"\
    , with: \"1\")\n    let music_string = music_string.replacingOccurrences(of: \"\
    |\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o\", with: \"4\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o|\", with: \"2\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".|\", with: \"1\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"|\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o\", with: \"4\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o|\", with: \"2\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".|\", with: \"1\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"|\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".\", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_string = music_string.replacing", "    return\
    \ music_string.components(separatedBy: \" \").map {\n        switch $0 {\n   \
    \     case \"o\":\n            return 4\n        case \"o|\":\n            return\
    \ 2\n        case \".|\":\n            return 1\n        default:\n          \
    \  return 0\n        }\n    }", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var result: [Int] = []\n    for note in notes {\n        switch\
    \ note {\n        case \"o\":\n            result.append(4)\n        case \"o|\"\
    :\n            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            result.append(0)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result", "    var beats\
    \ = [Int]()\n    let notes = music_string.components(separatedBy: \" \")\n   \
    \ for note in notes {\n        switch note {\n        case \"o\":\n          \
    \  beats.append(4)\n        case \"o|\":\n            beats.append(2)\n      \
    \  case \".|\":\n            beats.append(1)\n        default:\n            print(\"\
    Invalid note\")\n        }\n    }\n    return beats", "    var result = [Int]()\n\
    \    var music_string = music_string.replacingOccurrences(of: \" \", with: \"\"\
    )\n    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\"\
    ) {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result", "    var beats = [Int]()\n    var notes\
    \ = music_string.components(separatedBy: \" \")\n    for note in notes {\n   \
    \     switch note {\n        case \"o\":\n            beats.append(4)\n      \
    \  case \"o|\":\n            beats.append(2)\n        case \".|\":\n         \
    \   beats.append(1)\n        default:\n            print(\"Invalid note\")\n \
    \       }\n    }\n    return beats", "    let notes = music_string.split(separator:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats"]
stop_tokens:
- "\n}"
