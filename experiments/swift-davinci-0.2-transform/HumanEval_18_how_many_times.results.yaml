language: swift
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let stringLength\
    \ = string.count\n    let substringLength = substring.count\n    var count = 0\n\
    \    var i = 0\n    while i < stringLength {\n        let startIndex = string.index(string.startIndex,\
    \ offsetBy: i)\n        let endIndex = string.index(string.startIndex, offsetBy:\
    \ i + substringLength)\n        let range = startIndex..<endIndex\n        if\
    \ string[range] == substring {\n            count += 1\n            i += substringLength\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aad42fa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad42ca0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aad42ca0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aad42ca013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aad42c9fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aad42dd3b0d <unavailable> + 2693901

    6    tmpge4djt8o                        0x000056125f6cfaa7 <unavailable> + 6823

    7    tmpge4djt8o                        0x000056125f6cf72b <unavailable> + 5931

    8    libc.so.6                          0x00002aad43195460 __libc_start_main +
    245

    9    tmpge4djt8o                        0x000056125f6cf239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let stringLength\
    \ = string.count\n    let substringLength = substring.count\n    var count = 0\n\
    \    var index = 0\n    while index < stringLength {\n        let startIndex =\
    \ string.index(string.startIndex, offsetBy: index)\n        let endIndex = string.index(string.startIndex,\
    \ offsetBy: index + substringLength)\n        if string[startIndex..<endIndex]\
    \ == substring {\n            count += 1\n            index += substringLength\n\
    \        } else {\n            index += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b73b8046c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73b7d3d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73b7d3d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73b7d3d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73b7d3cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b73b7e70b0d <unavailable> + 2693901

    6    tmp09ygk_4z                        0x0000560433794a97 <unavailable> + 6807

    7    tmp09ygk_4z                        0x000056043379472b <unavailable> + 5931

    8    libc.so.6                          0x00002b73b8232460 __libc_start_main +
    245

    9    tmp09ygk_4z                        0x0000560433794239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ startIndex = string.startIndex\n    while let range = string.range(of: substring,\
    \ options: [], range: startIndex..<string.endIndex, locale: nil) {\n        count\
    \ += 1\n        startIndex = range.upperBound\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ufw2cbq.swift:15:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3ufw2cbq.swift:15:109: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex) {\n        count\
    \ += 1\n        startIndex = range.upperBound\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppcr594lz.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n        count += 1\n        startIndex = range.upperBound\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2cb8fky6.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp2cb8fky6.swift:12:61: error: cannot infer contextual base in\
    \ reference to member 'caseInsensitive'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp2cb8fky6.swift:12:123: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                               ^\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard string.count >= substring.count\
    \ else { return 0 }\n    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        let range = string.range(of: substring,\
    \ range: index..<string.endIndex)\n        if let range = range {\n          \
    \  count += 1\n            index = range.upperBound\n        } else {\n      \
    \      break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpamdixzbo.swift:15:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgsmfgg.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index != string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmplc6lo7qx.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let substringRange = nsString.range(of: substring)\n\
    \    if substringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let distance = substringRange.location + substringRange.length\n    let nextString\
    \ = nsString.substring(from: distance)\n    return 1 + how_many_times(string:\
    \ nextString, substring: substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_ib1988y.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmp_ib1988y.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ substringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1r514ngi.swift:16:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex) {\n        count\
    \ += 1\n        startIndex = range.upperBound\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppcr594lz.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1r514ngi.swift:16:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex) {\n        count\
    \ += 1\n        startIndex = range.upperBound\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppcr594lz.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex) {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgnqm766l.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgnqm766l.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ start = string.startIndex\n    while let range = string.range(of: substring,\
    \ range: start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6ba60k21.swift:15:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    let end = string.endIndex\n    while\
    \ start < end {\n        let range = string.range(of: substring, range: start..<end)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpahl5na9b.swift:14:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: start..<end)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let substringRange = nsString.range(of: substring)\n\
    \    if substringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let distance = substringRange.location + substringRange.length\n    let range\
    \ = NSRange(location: distance, length: nsString.length - distance)\n    return\
    \ 1 + how_many_times(string: nsString.substring(with: range), substring: substring)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4vu_np8.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmpj4vu_np8.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ substringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n\
    /tmp/tmpj4vu_np8.swift:16:17: error: cannot find 'NSRange' in scope\n    let range\
    \ = NSRange(location: distance, length: nsString.length - distance)\n        \
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    guard\
    \ string.count >= substring.count else { return 0 }\n    \n    let string = string.lowercased()\n\
    \    let substring = substring.lowercased()\n    \n    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        let\
    \ range = string.range(of: substring, options: .caseInsensitive, range: index..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       index = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgsanq6a0.swift:20:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpgsanq6a0.swift:20:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: index..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpgsanq6a0.swift:20:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: index..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfuskalkc.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    var count = 0\n    var index =\
    \ string.startIndex\n    while index < string.endIndex {\n        if string[index]\
    \ == substring[substring.startIndex] {\n            let endIndex = string.index(index,\
    \ offsetBy: substring.count)\n            if endIndex <= string.endIndex && string[index..<endIndex]\
    \ == substring {\n                count += 1\n                index = endIndex\n\
    \            } else {\n                index = string.index(after: index)\n  \
    \          }\n        } else {\n            index = string.index(after: index)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b27debb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27de8a8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27de8a8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27de8a813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27de8a7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b27de9dbb0d <unavailable> + 2693901

    6    tmpfcsnlt0_                        0x0000560d00c81e1e <unavailable> + 7710

    7    tmpfcsnlt0_                        0x0000560d00c81a1b <unavailable> + 6683

    8    libc.so.6                          0x00002b27ded9d460 __libc_start_main +
    245

    9    tmpfcsnlt0_                        0x0000560d00c81529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let substringRange = nsString.range(of: substring)\n\
    \    if substringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let index = string.index(string.startIndex, offsetBy: substringRange.location\
    \ + substringRange.length)\n    return 1 + how_many_times(string: String(string[index...]),\
    \ substring: substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp978vt40l.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmp978vt40l.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ substringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n\
    /tmp/tmp978vt40l.swift:16:52: error: no exact matches in call to subscript \n\
    \    return 1 + how_many_times(string: String(string[index...]), substring: substring)\n\
    \                                                   ^\n/tmp/tmp978vt40l.swift:16:52:\
    \ note: found candidate with type '(String.Index) -> Character'\n    return 1\
    \ + how_many_times(string: String(string[index...]), substring: substring)\n \
    \                                                  ^\n/tmp/tmp978vt40l.swift:16:52:\
    \ note: found candidate with type '(Range<String.Index>) -> Substring'\n    return\
    \ 1 + how_many_times(string: String(string[index...]), substring: substring)\n\
    \                                                   ^\n/tmp/tmp978vt40l.swift:16:52:\
    \ note: found candidate with type '(()) -> String.SubSequence' (aka '(()) -> Substring')\n\
    \    return 1 + how_many_times(string: String(string[index...]), substring: substring)\n\
    \                                                   ^\n/tmp/tmp978vt40l.swift:16:52:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> String.SubSequence'\
    \ (aka '((UnboundedRange_) -> ()) -> Substring')\n    return 1 + how_many_times(string:\
    \ String(string[index...]), substring: substring)\n                          \
    \                         ^\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgsmfgg.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start_index = string.startIndex\n    while start_index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n            count += 1\n            start_index = range.upperBound\n    \
    \    } else {\n            break\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp02jk3h1w.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: start_index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ start = string.startIndex\n    while let range = string.range(of: substring,\
    \ range: start..<string.endIndex) {\n        count += 1\n        start = range.upperBound\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6ba60k21.swift:15:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n        count += 1\n        startIndex = range.upperBound\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2cb8fky6.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmp2cb8fky6.swift:12:61: error: cannot infer contextual base in\
    \ reference to member 'caseInsensitive'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp2cb8fky6.swift:12:123: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                               ^\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpj1qgejy0/tmpj1qgejy0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac421743c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac42143ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac42143a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4214397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1qgejy0                        0x00005626836c5372 <unavailable> + 4978

    5    libc.so.6                          0x00002ac42192f460 __libc_start_main +
    245

    6    tmpj1qgejy0                        0x00005626836c4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpj1qgejy0/tmpj1qgejy0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac421743c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac42143ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac42143a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4214397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1qgejy0                        0x00005626836c5372 <unavailable> + 4978

    5    libc.so.6                          0x00002ac42192f460 __libc_start_main +
    245

    6    tmpj1qgejy0                        0x00005626836c4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let substringRange = nsString.range(of: substring)\n\
    \    if substringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let distance = nsString.length - substringRange.location\n    let nextRange\
    \ = NSRange(location: substringRange.location + substringRange.length, length:\
    \ distance - substringRange.length)\n    return 1 + how_many_times(string: nsString.substring(with:\
    \ nextRange), substring: substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp23ikrnml.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmp23ikrnml.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ substringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n\
    /tmp/tmp23ikrnml.swift:16:21: error: cannot find 'NSRange' in scope\n    let nextRange\
    \ = NSRange(location: substringRange.location + substringRange.length, length:\
    \ distance - substringRange.length)\n                    ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while startIndex < string.endIndex\
    \ {\n        let range = string.range(of: substring, range: startIndex..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            startIndex = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxrv0iu5m.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: startIndex..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard string.count >= substring.count\
    \ else { return 0 }\n    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: index..<string.endIndex, locale: nil)\n  \
    \      if let range = range {\n            count += 1\n            index = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkqq3gfsk.swift:15:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpkqq3gfsk.swift:15:59: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: index..<string.endIndex, locale: nil)\n  \
    \                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpkqq3gfsk.swift:15:116:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: index..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                              ^\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgnqm766l.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: start..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard string.count >= substring.count\
    \ else { return 0 }\n    var count = 0\n    var index = string.startIndex\n  \
    \  while index < string.endIndex {\n        let range = string.range(of: substring,\
    \ options: [], range: index..<string.endIndex, locale: nil)\n        if let range\
    \ = range {\n            count += 1\n            index = range.upperBound\n  \
    \      } else {\n            break\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpo8kb21nt.swift:15:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpo8kb21nt.swift:15:102:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: index..<string.endIndex, locale: nil)\n     \
    \                                                                            \
    \                    ^\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        if string.hasPrefix(substring,\
    \ startingAt: index) {\n            count += 1\n            index = string.index(index,\
    \ offsetBy: substring.count)\n        } else {\n            index = string.index(after:\
    \ index)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1r514ngi.swift:16:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgsmfgg.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wy9al7y.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            result\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp4nhirrn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824851
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1r82yqn.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while start < string.endIndex {\n\
    \        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgsmfgg.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7x4b3lej.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            index = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp72ac4aq.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824790
