language: swift
name: HumanEval_93_encode
results:
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  var encoded = \"\"\n    for letter in letters {\n        if let index = vowels.firstIndex(of:\
    \ letter.lowercased()) {\n            encoded += vowels[(index + 2) % vowels.count].uppercased()\n\
    \        } else {\n            encoded += letter.uppercased()\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7rzxaf3z/tmp7rzxaf3z.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b748b25ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b748af55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b748af55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b748af547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rzxaf3z                        0x000055b37e5509d7 <unavailable> + 6615

    5    libc.so.6                          0x00002b748b44a460 __libc_start_main +
    245

    6    tmp7rzxaf3z                        0x000055b37e550619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  encoded.append(vowels2[vowels.firstIndex(of: char)!])\n        } else if vowels2.contains(char)\
    \ {\n            encoded.append(vowels[vowels2.firstIndex(of: char)!])\n     \
    \   } else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2b32oaru/tmp2b32oaru.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b280c129c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b280be20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b280be20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b280be1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b32oaru                        0x00005625a26e26b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b280c315460 __libc_start_main +
    245

    6    tmp2b32oaru                        0x00005625a26e22f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for char in message {\n        if vowels.contains(char) {\n           \
    \ encodedMessage.append(char.next(2))\n        } else {\n            encodedMessage.append(char.swapCase())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2392ob0e.swift:17:40: error: value of type 'Character' has no member\
    \ 'next'\n            encodedMessage.append(char.next(2))\n                  \
    \                ~~~~ ^~~~\n/tmp/tmp2392ob0e.swift:19:40: error: value of type\
    \ 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.firstIndex(of: String(letter).lowercased())!.encodedOffset\
    \ + 2)\n            encodedMessage += String(alphabet[index]).uppercased()\n \
    \       } else {\n            encodedMessage += String(letter).uppercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkmr50dza.swift:18:144: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count - alphabet.count\
    \ + alphabet.firstIndex(of: String(letter).lowercased())!.encodedOffset + 2)\n\
    \                                                                            \
    \                                                                   ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp36quf7v1.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + (ascii < 91 ? 32\
    \ : -32)\n            let newChar = Character(UnicodeScalar(newAscii)!)\n    \
    \        encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzpyf6hxd.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            let index\
    \ = alphabet.firstIndex(of: character)!\n            encodedMessage.append(alphabet[index\
    \ + 2])\n        } else {\n            encodedMessage.append(character)\n    \
    \    }\n    }\n    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7ik39526/tmp7ik39526.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13539dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13536d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13536d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13536d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ik39526                        0x0000560b21134907 <unavailable> + 6407

    5    libc.so.6                          0x00002b1353bca460 __libc_start_main +
    245

    6    tmp7ik39526                        0x0000560b21134549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2anvugsd/tmp2anvugsd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba837b91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba837888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba837888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8378877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2anvugsd                        0x00005596bbf20727 <unavailable> + 5927

    5    libc.so.6                          0x00002ba837d7d460 __libc_start_main +
    245

    6    tmp2anvugsd                        0x00005596bbf20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpe5f8aoz0.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     let index = vowels.firstIndex(of: String(char).lowercased())!\n        \
    \    let nextIndex = (index + 2) % vowels.count\n            result += String(vowels[nextIndex]).uppercased()\n\
    \        } else {\n            result += String(char).uppercased()\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpm58wpq8h/tmpm58wpq8h.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af99eeebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af99ebe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af99ebe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af99ebe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm58wpq8h                        0x0000560d0d97b9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002af99f0d7460 __libc_start_main +
    245

    6    tmpm58wpq8h                        0x0000560d0d97b639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ alphabet.firstIndex(of: letter)!\n            let newIndex = index + 2\n   \
    \         let newLetter = alphabet[newIndex]\n            encodedMessage.append(newLetter)\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdmqctx18/tmpdmqctx18.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca547e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca544ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca544dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca544dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmqctx18                        0x0000559b441cd827 <unavailable> + 6183

    5    libc.so.6                          0x00002aca549d2460 __libc_start_main +
    245

    6    tmpdmqctx18                        0x0000559b441cd469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppvayyxm9.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpygvvmise/tmpygvvmise.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f583fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f580f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f580f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f580f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygvvmise                        0x000055612ca57727 <unavailable> + 5927

    5    libc.so.6                          0x00002b9f585e7460 __libc_start_main +
    245

    6    tmpygvvmise                        0x000055612ca57369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtt5qxuy.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            let newChar = alphabet[newIndex]\n\
    \            if vowels.contains(newChar) {\n                encodedMessage +=\
    \ newChar.uppercased()\n            } else {\n                encodedMessage +=\
    \ newChar\n            }\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6l8mhlwi.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if let asciiValue = char.asciiValue {\n         \
    \   if asciiValue >= 65 && asciiValue <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n  \
    \              encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n\
    \            } else {\n                encodedMessage.append(char)\n         \
    \   }\n        }\n    }\n    for vowel in vowels {\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpesro25sc.swift:18:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmpesro25sc.swift:20:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ - 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmpesro25sc.swift:27:41: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n              \
    \           ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxrf5207.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cybbik6.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp6_0zh7_m/tmp6_0zh7_m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87f9e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87f9af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87f9af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87f9af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_0zh7_m                        0x000055e96ceb6727 <unavailable> + 5927

    5    libc.so.6                          0x00002b87f9fee460 __libc_start_main +
    245

    6    tmp6_0zh7_m                        0x000055e96ceb6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpo09o2n4p/tmpo09o2n4p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75d490c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75d187b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab75d187988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab75d1867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo09o2n4p                        0x000056539eb4c727 <unavailable> + 5927

    5    libc.so.6                          0x00002ab75d67c460 __libc_start_main +
    245

    6    tmpo09o2n4p                        0x000056539eb4c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let lowerChar = String(char).lowercased()\n\
    \        if vowels.contains(lowerChar) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: lowerChar)! + 2)\n            encodedMessage +=\
    \ String(letters[index]).uppercased()\n        } else {\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpordl1jx1.swift:19:97: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: lowerChar)! + 2)\n                             \
    \                                                                   ^\n/tmp/tmpordl1jx1.swift:19:87:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: lowerChar)! + 2)\n                             \
    \                                                         ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3xe01fm7.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encoded.append(newChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyp6tnfr4.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpurddqf4r.swift:37:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpurddqf4r.swift:15:25: note: to match this opening\
    \ '{'\n    for char in message {\n                        ^\n/tmp/tmpurddqf4r.swift:37:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpurddqf4r.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpurddqf4r.swift:17:1123: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Bool'\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n                    \
    \                                   "
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).lowercased() == \"z\" ? \"b\" : String(char).lowercased()\
    \ == \"y\" ? \"a\" : String(char).lowercased() == \"x\" ? \"z\" : String(char).lowercased()\
    \ == \"w\" ? \"y\" : String(char).lowercased() == \"v\" ? \"x\" : String(char).lowercased()\
    \ == \"u\" ? \"w\" : String(char).lowercased() == \"t\" ? \"v\" : String(char).lowercased()\
    \ == \"s\" ? \"u\" : String(char).lowercased() == \"r\" ? \"t\" : String(char).lowercased()\
    \ == \"q\" ? \"s\" : String(char).lowercased() == \"p\" ? \"r\" : String(char).lowercased()\
    \ == \"o\" ? \"q\" : String(char).lowercased() == \"n\" ? \"p\" : String(char).lowercased()\
    \ == \"m\" ? \"o\" : String(char).lowercased() == \"l\" ? \"n\" : String(char).lowercased()\
    \ == \"k\" ? \"m\" : String(char).lowercased() == \"j\" ? \"l\" : String(char).lowercased()\
    \ == \"i\" ? \"k\" : String(char).lowercased() == \"h\" ? \"j\" : String(char).lowercased()\
    \ == \"g\" ? \"i\" : String(char).lowercased() == \"f\" ? \"h\" : String(char).lowercased()\
    \ == \"e\" ? \"g\" : String(char).lowercased() == \"d\" ? \"f\" : String(char).lowercased()\
    \ == \"c\" ? \"e\" : String(char).lowercased() == \"b\" ? \"d\" : String(char).lowercased()\
    \ == \"a\" ? \"c\" : \"\"\n        } else {\n            encodedMessage += String\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppn9865rc.swift:39:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmppn9865rc.swift:15:25: note: to match this opening\
    \ '{'\n    for char in message {\n                        ^\n/tmp/tmppn9865rc.swift:39:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmppn9865rc.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmppn9865rc.swift:19:28: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String' and 'String.Type'\n\
    \            encodedMessage += String\n            ~~~~~~~~~~~~~~ ^  ~~~~~~\n\
    /tmp/tmppn9865rc.swift:19:28: note: overloads for '+=' exist with these partially\
    \ matching parameter lists: (inout String, String)\n            encodedMessage\
    \ += String\n                           ^\n/tmp/tmppn9865rc.swift:23:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp36quf7v1.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            encodedMessage.append(vowels[(index\
    \ + 2) % vowels.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqeolds36/tmpqeolds36.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75857cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab758273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab758273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7582727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeolds36                        0x00005614a34b4877 <unavailable> + 6263

    5    libc.so.6                          0x00002ab758768460 __libc_start_main +
    245

    6    tmpqeolds36                        0x00005614a34b44b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newChar = alphabet[(index + 2) % alphabet.count]\n \
    \           encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4oxx1hap/tmp4oxx1hap.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4179ad7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41797ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41797ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41797cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4oxx1hap                        0x000055b4baf74907 <unavailable> + 6407

    5    libc.so.6                          0x00002b4179cc3460 __libc_start_main +
    245

    6    tmp4oxx1hap                        0x000055b4baf74549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ asciiValue = char.asciiValue!\n            let encodedValue = asciiValue + 2\n\
    \            let encodedChar = Character(UnicodeScalar(encodedValue)!)\n     \
    \       encodedMessage.append(encodedChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdguxp6rz.swift:18:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let encodedChar = Character(UnicodeScalar(encodedValue)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = vowels.firstIndex(of: char)!\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            encoded.append(char)\n   \
    \     }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc2zuepy9.swift:19:36: error: instance method 'index(_:offsetBy:)'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n                                   ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n/tmp/tmpc2zuepy9.swift:22:35:\
    \ error: instance method 'index(_:offsetBy:)' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n                                  ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let encodedAscii = ascii + 2\n       \
    \     let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n            encodedMessage.append(encodedChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8ekid3o.swift:18:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  var encoded = [Character]()\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded.append(letter.nextLetter.nextLetter)\n        } else\
    \ {\n            encoded.append(letter.swapCase)\n        }\n    }\n    return\
    \ String(encoded)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3nnfewdp.swift:18:35: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'nextLetter'\n            encoded.append(letter.nextLetter.nextLetter)\n\
    \                           ~~~~~~ ^~~~~~~~~~\n/tmp/tmp3nnfewdp.swift:20:35: error:\
    \ value of type 'String.Element' (aka 'Character') has no member 'swapCase'\n\
    \            encoded.append(letter.swapCase)\n                           ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv1nrzsgi/tmpv1nrzsgi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f98d88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f98a7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f98a7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f98a7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1nrzsgi                        0x00005563e7328907 <unavailable> + 6407

    5    libc.so.6                          0x00002b9f98f74460 __libc_start_main +
    245

    6    tmpv1nrzsgi                        0x00005563e7328549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            let nextIndex =\
    \ vowels.index(after: index)\n            let nextNextIndex = vowels.index(after:\
    \ nextIndex)\n            encodedMessage.append(vowels[nextNextIndex])\n     \
    \   } else if consonants.contains(char) {\n            let index = consonants.firstIndex(of:\
    \ char)!\n            let nextIndex = consonants.index(after: index)\n       \
    \     let nextNextIndex = consonants.index(after: nextIndex)\n            encodedMessage.append(consonants[nextNextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpwwm_1yxg/tmpwwm_1yxg.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a5d891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a5d588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a5d588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a5d5877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwm_1yxg                        0x0000559ed3349727 <unavailable> + 5927

    5    libc.so.6                          0x00002b8a5da7d460 __libc_start_main +
    245

    6    tmpwwm_1yxg                        0x0000559ed3349369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + (ascii < 78 ? 2\
    \ : -24)\n            encoded.append(Character(UnicodeScalar(newAscii)!))\n  \
    \      } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdht3mdxp.swift:18:61: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encoded.append(Character(UnicodeScalar(newAscii)!))\n\
    \                                     ~~~~~~~~~~~~~~~~~~~~~~~^\n             \
    \                                               \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n\
    \            encoded.append(alphabet[index])\n        } else {\n            encoded.append(char.uppercased())\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx6oih3g3.swift:18:149: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n\
    \                                                                            \
    \                                                                        ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in message\
    \ {\n        if let index = alphabet.firstIndex(of: letter) {\n            let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2eg3xcbi/tmp2eg3xcbi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba95f651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba95f348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba95f348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba95f3477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eg3xcbi                        0x0000556bed1b5867 <unavailable> + 6247

    5    libc.so.6                          0x00002ba95f83d460 __libc_start_main +
    245

    6    tmp2eg3xcbi                        0x0000556bed1b54a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter)\n            }\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3366gjes.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtt5qxuy.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = index + 2\n                if newIndex > alphabet.count - 1 {\n \
    \                   encodedMessage.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex - alphabet.count)])\n                } else {\n         \
    \           encodedMessage.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n                }\n            } else {\n           \
    \     encodedMessage.append(alphabet[index].uppercased())\n            }\n   \
    \     }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzd_pkbsp.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            encoded.append(alphabet[alphabet.firstIndex(of:\
    \ char)! + 2])\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpgbzqzbva/tmpgbzqzbva.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eeadf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eeaae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eeaae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eeaae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbzqzbva                        0x00005594119ed907 <unavailable> + 6407

    5    libc.so.6                          0x00002b1eeafdd460 __libc_start_main +
    245

    6    tmpgbzqzbva                        0x00005594119ed549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0wqox0so.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1benokn4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encoded.append(newChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyp6tnfr4.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let encodedChar = alphabet[(index + 2) % alphabet.count]\n\
    \            encodedMessage.append(encodedChar)\n        } else {\n          \
    \  encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpj1p613na/tmpj1p613na.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af75e56fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af75e266b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af75e266988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af75e2657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1p613na                        0x0000559789c91877 <unavailable> + 6263

    5    libc.so.6                          0x00002af75e75b460 __libc_start_main +
    245

    6    tmpj1p613na                        0x0000559789c914b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(char.lowercased() == char ? alphabet[index].uppercased()\
    \ : alphabet[index])\n            }\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv5x5t4s4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n/tmp/tmpv5x5t4s4.swift:22:50: error: binary\
    \ operator '==' cannot be applied to operands of type 'String' and 'Character'\n\
    \                encoded.append(char.lowercased() == char ? alphabet[index].uppercased()\
    \ : alphabet[index])\n                               ~~~~~~~~~~~~~~~~~ ^  ~~~~\n\
    /tmp/tmpv5x5t4s4.swift:22:50: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \         encoded.append(char.lowercased() == char ? alphabet[index].uppercased()\
    \ : alphabet[index])\n                                                 ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = index + 2\n            let newChar = alphabet[newIndex]\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp42re16fr/tmp42re16fr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bb7f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bb7c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bb7c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bb7c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42re16fr                        0x0000557f23168827 <unavailable> + 6183

    5    libc.so.6                          0x00002b9bb812d460 __libc_start_main +
    245

    6    tmp42re16fr                        0x0000557f23168469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         let newIndex = index + 2\n            let newChar = alphabet[newIndex\
    \ % alphabet.count]\n            encodedMessage.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2u8bmy4o.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isLetter {\n        \
    \    let letterIndex = letter.asciiValue! - 65\n            let encodedLetterIndex\
    \ = (letterIndex + 2) % 26\n            let encodedLetter = Character(UnicodeScalar(encodedLetterIndex\
    \ + 65)!)\n            encodedMessage.append(encodedLetter)\n        } else {\n\
    \            encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn3mtkqcf.swift:18:81: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let encodedLetter =\
    \ Character(UnicodeScalar(encodedLetterIndex + 65)!)\n                       \
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n                \
    \                                                                \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let charAscii = char.asciiValue!\n\
    \        if charAscii >= 65 && charAscii <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ + 32)!))\n        } else if charAscii >= 97 && charAscii <= 122 {\n        \
    \    encodedMessage.append(Character(UnicodeScalar(charAscii - 32)!))\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpukg17ybf.swift:17:74: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ + 32)!))\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n/tmp/tmpukg17ybf.swift:19:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            encodedMessage.append(Character(UnicodeScalar(charAscii - 32)!))\n\
    \                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(letter)\n     \
    \   }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7oenn4v1.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxrf5207.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encoded.append(letters[newIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxi_vrfl.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encodedMessage += String(letters[newIndex]).uppercased()\n      \
    \  } else {\n            encodedMessage += String(char)\n        }\n    }\n  \
    \  return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9v_xx6nd.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            let newChar = letters[newIndex]\n            encodedMessage += vowels.contains(char.lowercased())\
    \ ? newChar.uppercased() : newChar\n        } else {\n            encodedMessage\
    \ += char\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp64ht4x4v.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n/tmp/tmp64ht4x4v.swift:22:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            encodedMessage\
    \ += char\n                              ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            let newIndex = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4dkcjsj0/tmp4dkcjsj0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab352e12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab352b09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab352b09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab352b087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dkcjsj0                        0x000055fc4c32f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002ab352ffe460 __libc_start_main +
    245

    6    tmp4dkcjsj0                        0x000055fc4c32f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpo8phxxdb.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n    let\
    \ messageArray = Array(message)\n    var encodedMessage = \"\"\n    for char in\
    \ messageArray {\n        if vowels.contains(char) {\n            let index =\
    \ alphabetArray.firstIndex(of: char)!\n            let newIndex = (index + 2)\
    \ % alphabetArray.count\n            encodedMessage.append(alphabetArray[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp04mg6gcl/tmp04mg6gcl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aab811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aab508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aab508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aab5077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04mg6gcl                        0x00005652ea3d1a57 <unavailable> + 6743

    5    libc.so.6                          0x00002b4aab9fd460 __libc_start_main +
    245

    6    tmp04mg6gcl                        0x00005652ea3d1699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\
    \"\n    for letter in message {\n        if let index = vowels.firstIndex(of:\
    \ letter) {\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if let index = vowels2.firstIndex(of: letter)\
    \ {\n            encoded.append(vowels[vowels.index(vowels.startIndex, offsetBy:\
    \ index)])\n        } else {\n            encoded.append(letter)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp17vjwf63.swift:18:36: error: instance method 'index(_:offsetBy:)'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n                                   ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n/tmp/tmp17vjwf63.swift:20:35:\
    \ error: instance method 'index(_:offsetBy:)' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n                                  ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map {\n        if $0.isLetter {\n            let char = $0.uppercased()\n\
    \            if char.isVowel {\n                let index = char.index(char.startIndex,\
    \ offsetBy: 2)\n                return char[index]\n            } else {\n   \
    \             return char\n            }\n        } else {\n            return\
    \ $0\n        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvp4wp3o7.swift:16:21: error: value of type 'String' has no member\
    \ 'isVowel'\n            if char.isVowel {\n               ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let encodedMessage\
    \ = message.map { (letter) -> Character in\n        if letter.isUppercase {\n\
    \            return letter.lowercased().first!\n        } else if letter.isLowercase\
    \ {\n            return letter.uppercased().first!\n        } else {\n       \
    \     return letter\n        }\n    }\n    return encodedMessage.map { (letter)\
    \ -> Character in\n        if vowels.contains(letter) {\n            let index\
    \ = alphabet.firstIndex(of: letter)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            return alphabet[newIndex]\n        } else {\n    \
    \        return letter\n        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptgllf5wr.swift:24:45: error: declared closure result 'Character'\
    \ is incompatible with contextual type 'String'\n    return encodedMessage.map\
    \ { (letter) -> Character in\n                                            ^~~~~~~~~\n\
    \                                            String\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let lowerChar = char.lowercased()\n\
    \        if lowerChar == \"a\" {\n            encodedMessage += \"c\"\n      \
    \  } else if lowerChar == \"e\" {\n            encodedMessage += \"g\"\n     \
    \   } else if lowerChar == \"i\" {\n            encodedMessage += \"k\"\n    \
    \    } else if lowerChar == \"o\" {\n            encodedMessage += \"q\"\n   \
    \     } else if lowerChar == \"u\" {\n            encodedMessage += \"y\"\n  \
    \      } else if lowerChar == \"y\" {\n            encodedMessage += \"a\"\n \
    \       } else if lowerChar == \"z\" {\n            encodedMessage += \"b\"\n\
    \        } else if lowerChar == \" \" {\n            encodedMessage += \" \"\n\
    \        } else {\n            encodedMessage += String(char.unicodeScalars.first!.value\
    \ + 2)\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0xm4_ow1/tmp0xm4_ow1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0265a86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b026577db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b026577d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b026577c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xm4_ow1                        0x000055b4b665f7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b0265c72460 __libc_start_main +
    245

    6    tmp0xm4_ow1                        0x000055b4b665f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(letter).lowercased())!\n\
    \            let newIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += vowels[newIndex].uppercased()\n        } else {\n            encodedMessage\
    \ += String(letter).uppercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi4gl9il_/tmpi4gl9il_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add695dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add692d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add692d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add692d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4gl9il_                        0x00005614717268e7 <unavailable> + 6375

    5    libc.so.6                          0x00002add697ca460 __libc_start_main +
    245

    6    tmpi4gl9il_                        0x0000561471726529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(letter)\n        }\n    }\n  \
    \  return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3qq1tc9o.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            let newChar = letters[newIndex]\n            if vowels.contains(newChar)\
    \ {\n                encodedMessage.append(newChar.uppercased())\n           \
    \ } else {\n                encodedMessage.append(newChar)\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprqnb6mu_.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            encodedMessage += vowels.contains(char.lowercased())\
    \ ? newChar.uppercased() : newChar\n        } else {\n            encodedMessage\
    \ += char\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxeq8sp_v.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n/tmp/tmpxeq8sp_v.swift:22:31: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       encodedMessage += char\n                              ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.firstIndex(of: String(char).lowercased())!.encodedOffset\
    \ + 2)\n            encoded.append(alphabet[index])\n        } else {\n      \
    \      encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpazjy83iq.swift:18:142: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count - alphabet.count\
    \ + alphabet.firstIndex(of: String(char).lowercased())!.encodedOffset + 2)\n \
    \                                                                            \
    \                                                                ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n\
    \    let messageArray = Array(message)\n    for letter in messageArray {\n   \
    \     if vowels.contains(String(letter).lowercased()) {\n            let index\
    \ = alphabetArray.firstIndex(of: String(letter).lowercased())\n            if\
    \ index! + 2 > alphabetArray.count - 1 {\n                encodedMessage += String(alphabetArray[index!\
    \ + 2 - alphabetArray.count])\n            } else {\n                encodedMessage\
    \ += String(alphabetArray[index! + 2])\n            }\n        } else {\n    \
    \        encodedMessage += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6wr5asb.swift:20:69: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabetArray.firstIndex(of: String(letter).lowercased())\n        \
    \                                                            ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased().next().next()\n\
    \        } else {\n            encodedMessage += String(char).lowercased() ==\
    \ String(char) ? String(char).uppercased() : String(char).lowercased()\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp1v5m_dk.swift:17:98: error: value of type 'String' has no member\
    \ 'next'\n            encodedMessage += String(char).lowercased() == \"u\" ? \"\
    a\" : String(char).lowercased().next().next()\n                              \
    \                                         ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf_s5tcnw.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + 2\n         \
    \   let newChar = Character(UnicodeScalar(asciiValue))\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqboz_1fa/tmpqboz_1fa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adda4275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adda3f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adda3f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adda3f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqboz_1fa                        0x000055899a9d1617 <unavailable> + 5655

    5    libc.so.6                          0x00002adda4461460 __libc_start_main +
    245

    6    tmpqboz_1fa                        0x000055899a9d1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppvayyxm9.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ asciiValue = char.asciiValue!\n            let newAsciiValue = asciiValue +\
    \ 2\n            let newChar = Character(UnicodeScalar(newAsciiValue)!)\n    \
    \        encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbgs7mvu4.swift:18:65: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAsciiValue)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n         \
    \                                                       \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2jmkq09a.swift:17:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            let index = vowels.firstIndex(of: String(char).lowercased())!\n \
    \           let newIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += String(vowels[newIndex]).uppercased()\n        } else {\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpul5rydxk/tmpul5rydxk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7317ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f72e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f72e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f72e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul5rydxk                        0x000055f8c6cfe9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b6f7336a460 __libc_start_main +
    245

    6    tmpul5rydxk                        0x000055f8c6cfe639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            if String(letter).lowercased() == \"u\" {\n                encodedMessage\
    \ += \"a\"\n            } else {\n                encodedMessage += String(letter).uppercased()\n\
    \            }\n        } else {\n            encodedMessage += String(letter).lowercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp82wnxds8/tmp82wnxds8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4975dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4972d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4972d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4972d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82wnxds8                        0x000055c6278226f7 <unavailable> + 5879

    5    libc.so.6                          0x00002af4977c8460 __libc_start_main +
    245

    6    tmp82wnxds8                        0x000055c627822339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let isUpper = ascii >= 65 && ascii <=\
    \ 90\n            let isLower = ascii >= 97 && ascii <= 122\n            if isUpper\
    \ {\n                result.append(Character(UnicodeScalar(ascii + 32)!))\n  \
    \          } else if isLower {\n                result.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2v5yp21.swift:20:66: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                result.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                        ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                 \n/tmp/tmpv2v5yp21.swift:22:66:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                result.append(Character(UnicodeScalar(ascii - 32)!))\n      \
    \                                  ~~~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                                   \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    for letter in message {\n        if vowels.contains(letter) {\n         \
    \   if let index = vowels.firstIndex(of: letter) {\n                let nextIndex\
    \ = (index + 2) % vowels.count\n                encodedMessage.append(vowels[nextIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptd7y2txw/tmptd7y2txw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4e7745c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4e743cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4e743c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4e743b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd7y2txw                        0x00005557a83b6877 <unavailable> + 6263

    5    libc.so.6                          0x00002ac4e7931460 __libc_start_main +
    245

    6    tmptd7y2txw                        0x00005557a83b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            let newChar = letters[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprdf5srpo.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3xe01fm7.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let nextIndex\
    \ = (index + 2) % vowels.count\n            encoded.append(vowels[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvmqrdb_a.swift:18:30: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let nextIndex = (index + 2) % vowels.count\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isUppercase {\n         \
    \   encodedMessage.append(char.lowercased())\n        } else {\n            encodedMessage.append(char.uppercased())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpocjs8np1/tmpocjs8np1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5e863dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5e8334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5e8334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5e83337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocjs8np1                        0x0000556dc82fa517 <unavailable> + 5399

    5    libc.so.6                          0x00002ac5e8829460 __libc_start_main +
    245

    6    tmpocjs8np1                        0x0000556dc82fa159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt2qkd78g.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbo9zxcql.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp28tyum6f.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let nextChar = alphabet[(index + 2) % alphabet.count]\n\
    \            encodedMessage.append(nextChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpckeuag49/tmpckeuag49.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b208930ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2089001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2089001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20890007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckeuag49                        0x0000562beb239877 <unavailable> + 6263

    5    libc.so.6                          0x00002b20894f6460 __libc_start_main +
    245

    6    tmpckeuag49                        0x0000562beb2394b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpo09o2n4p/tmpo09o2n4p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75d490c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75d187b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab75d187988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab75d1867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo09o2n4p                        0x000056539eb4c727 <unavailable> + 5927

    5    libc.so.6                          0x00002ab75d67c460 __libc_start_main +
    245

    6    tmpo09o2n4p                        0x000056539eb4c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            let index = vowels.firstIndex(of: String(char).lowercased())\n  \
    \          let newIndex = (index! + 2) % 5\n            encodedMessage += vowels[newIndex].uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphp4i89g6/tmphp4i89g6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9e91c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9e8ebbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9e8ebb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9e8eba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp4i89g6                        0x000056268f1d5897 <unavailable> + 6295

    5    libc.so.6                          0x00002ae9e93b0460 __libc_start_main +
    245

    6    tmphp4i89g6                        0x000056268f1d54d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            let\
    \ newChar = newIndex > letters.count - 1 ? letters[newIndex - letters.count] :\
    \ letters[newIndex]\n            encodedMessage += vowels.contains(char.lowercased())\
    \ ? newChar.uppercased() : newChar\n        } else {\n            encodedMessage\
    \ += char\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt3vvyx28.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n/tmp/tmpt3vvyx28.swift:22:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            encodedMessage\
    \ += char\n                              ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx1dicb72.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            let index = vowels.firstIndex(of: String(char).lowercased())!\n \
    \           let newIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += vowels[newIndex].uppercased()\n        } else {\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0f2t5aca/tmp0f2t5aca.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59f6bd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59f68c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59f68c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59f68c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f2t5aca                        0x000055660e2808e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b59f6dbd460 __libc_start_main +
    245

    6    tmp0f2t5aca                        0x000055660e280529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpv1nrzsgi/tmpv1nrzsgi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f98d88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f98a7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f98a7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f98a7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1nrzsgi                        0x00005563e7328907 <unavailable> + 6407

    5    libc.so.6                          0x00002b9f98f74460 __libc_start_main +
    245

    6    tmpv1nrzsgi                        0x00005563e7328549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  var encoded = \"\"\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded += String(letter).lowercased() == \"u\" ? \"a\" : String(letters[letters.firstIndex(of:\
    \ letter)! + 2])\n        } else {\n            encoded += String(letter).lowercased()\
    \ == letter ? String(letter).uppercased() : String(letter).lowercased()\n    \
    \    }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgjfieoxr.swift:20:52: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \      encoded += String(letter).lowercased() == letter ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~\n/tmp/tmpgjfieoxr.swift:20:52: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \            encoded += String(letter).lowercased() == letter ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n                                            \
    \       ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if let index = alphabet.firstIndex(of:\
    \ character.lowercased()) {\n            if vowels.contains(character.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(character.uppercased())\n            }\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz4qstikh.swift:17:58: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: character.lowercased()) {\n                \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isUppercase {\n     \
    \       encodedMessage.append(letter.lowercased())\n        } else {\n       \
    \     encodedMessage.append(letter.uppercased())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpktf2wp0c/tmpktf2wp0c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a32298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a31f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a31f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a31f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktf2wp0c                        0x000055f424610517 <unavailable> + 5399

    5    libc.so.6                          0x00002b2a32484460 __libc_start_main +
    245

    6    tmpktf2wp0c                        0x000055f424610159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let isUpper = char.isUpperCase\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            let newChar\
    \ = alphabet[newIndex]\n            encoded += isUpper ? newChar.uppercased()\
    \ : newChar\n        } else {\n            encoded += char\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_j1l4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n/tmp/tmp1dt_j1l4.swift:18:32: error: value\
    \ of type 'Character' has no member 'isUpperCase'\n            let isUpper = char.isUpperCase\n\
    \                          ~~~~ ^~~~~~~~~~~\n/tmp/tmp1dt_j1l4.swift:23:24: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            encoded += char\n                       ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter\
    \ in message {\n        if let asciiValue = letter.asciiValue {\n            if\
    \ asciiValue >= 65 && asciiValue <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n  \
    \              encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    for vowel in vowels {\n        encodedMessage =\
    \ encodedMessage.replacingOccurrences(of: vowel, with: String(vowel.unicodeScalars.first!.value\
    \ + 2))\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptskxuvg9.swift:18:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmptskxuvg9.swift:20:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ - 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmptskxuvg9.swift:27:41: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n              \
    \           ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpoudv3jpd.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if let index = alphabet.firstIndex(of:\
    \ character.lowercased()) {\n            if vowels.contains(character.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprwsproq5.swift:17:58: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: character.lowercased()) {\n                \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        let index = vowels.firstIndex(of: String(char).lowercased())!\n     \
    \       let newIndex = (index + 2) % vowels.count\n            encoded += String(vowels[newIndex]).uppercased()\n\
    \        } else {\n            encoded += String(char).uppercased()\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprrwr3apx/tmprrwr3apx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7254c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72548f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72548f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72548f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrwr3apx                        0x000055c46b5109f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b7254ded460 __libc_start_main +
    245

    6    tmprrwr3apx                        0x000055c46b510639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encoded.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3pfmoplj/tmp3pfmoplj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fbc7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fb975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fb975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fb9747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pfmoplj                        0x0000565321a755c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b24fbe6a460 __libc_start_main +
    245

    6    tmp3pfmoplj                        0x0000565321a75209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpznvk1qwx.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3xbaqk4g/tmp3xbaqk4g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b788c9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788c6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b788c6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b788c6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xbaqk4g                        0x000055bb8e60f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b788cbc8460 __libc_start_main +
    245

    6    tmp3xbaqk4g                        0x000055bb8e60f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4n_2vo0r.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar.uppercased())\n           \
    \ } else {\n                encodedMessage.append(newChar)\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4aptmv41.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let encoded = ascii + 2\n            encodedMessage.append(Character(UnicodeScalar(encoded)!))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqdk8g1br.swift:18:67: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(encoded)!))\n\
    \                                            ~~~~~~~~~~~~~~~~~~~~~~^\n       \
    \                                                           \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp12kjzhua/tmp12kjzhua.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac33988fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac339586561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac339586286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac33958613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac339585bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp12kjzhua                        0x000055cc5e20b292 <unavailable> + 8850

    6    tmp12kjzhua                        0x000055cc5e20a8d6 <unavailable> + 6358

    7    libc.so.6                          0x00002ac339a7b460 __libc_start_main +
    245

    8    tmp12kjzhua                        0x000055cc5e20a5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message\
    \ {\n        if vowels.contains(letter) {\n            let index = alphabet.index(of:\
    \ letter)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n  \
    \          encodedMessage.append(alphabet[newIndex])\n        } else {\n     \
    \       encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpge1hkyqr/tmpge1hkyqr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ad5aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ad2a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ad2a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ad2a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge1hkyqr                        0x00005612fd355947 <unavailable> + 6471

    5    libc.so.6                          0x00002ac3ad79a460 __libc_start_main +
    245

    6    tmpge1hkyqr                        0x00005612fd355589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for character in message {\n        if vowels.contains(character) {\n      \
    \      let index = alphabet.firstIndex(of: character)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpu69au8vt/tmpu69au8vt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ea4d21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ea4a18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ea4a18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ea4a177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu69au8vt                        0x0000559e28b139e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b0ea4f0d460 __libc_start_main +
    245

    6    tmpu69au8vt                        0x0000559e28b13629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            let index\
    \ = alphabet.firstIndex(of: character)!\n            let newIndex = index + 2\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(character)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpasnimxgr/tmpasnimxgr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af352928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af35261fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af35261f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af35261e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasnimxgr                        0x000055d8d0bf0827 <unavailable> + 6183

    5    libc.so.6                          0x00002af352b14460 __libc_start_main +
    245

    6    tmpasnimxgr                        0x000055d8d0bf0469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n  \
    \          let index = vowels.firstIndex(of: letter)!\n            encodedMessage.append(vowels[(index\
    \ + 2) % vowels.count])\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_i58vuar/tmp_i58vuar.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16c8ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16c87c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16c87c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16c87c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_i58vuar                        0x0000557786dbc8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b16c8cbd460 __libc_start_main +
    245

    6    tmp_i58vuar                        0x0000557786dbc519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbo9zxcql.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp36quf7v1.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isLetter {\n        \
    \    if letter.isUppercase {\n                encodedMessage.append(letter.lowercased())\n\
    \            } else {\n                encodedMessage.append(letter.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpiyv583gm/tmpiyv583gm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5b8edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed5b5e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed5b5e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed5b5e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyv583gm                        0x0000562b27b825c7 <unavailable> + 5575

    5    libc.so.6                          0x00002aed5bad9460 __libc_start_main +
    245

    6    tmpiyv583gm                        0x0000562b27b82209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    for char in message {\n        if vowels.contains(char) {\n           \
    \ let index = vowels.firstIndex(of: char)!\n            let nextIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd5e3mnq0.swift:18:30: error: cannot convert value of type 'Set<Character>.Index'\
    \ to expected argument type 'Int'\n            let nextIndex = (index + 2) % vowels.count\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb7mw87j3/tmpb7mw87j3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22293c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22290bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22290bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22290be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7mw87j3                        0x0000563b234ff307 <unavailable> + 4871

    5    libc.so.6                          0x00002b22295b4460 __libc_start_main +
    245

    6    tmpb7mw87j3                        0x0000563b234fef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            if vowels.contains(char.lowercased()) {\n        \
    \        encodedMessage.append(alphabet[newIndex])\n            } else {\n   \
    \             encodedMessage.append(alphabet[newIndex].uppercased())\n       \
    \     }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpoiqd2258.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            let\
    \ newChar = letters[newIndex % letters.count]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf5y02swy.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph3jgu6v6.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ alphabet.firstIndex(of: letter)!\n            let newIndex = index + 2\n   \
    \         encodedMessage.append(alphabet[newIndex])\n        } else {\n      \
    \      encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprmuuj_32/tmprmuuj_32.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b400db88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b400d87fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b400d87f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b400d87e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmuuj_32                        0x00005642538b3827 <unavailable> + 6183

    5    libc.so.6                          0x00002b400dd74460 __libc_start_main +
    245

    6    tmprmuuj_32                        0x00005642538b3469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ alphabet.firstIndex(of: letter)!\n            let newIndex = (index + 2) % 26\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpinzbshoi/tmpinzbshoi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f77a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f7778eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f7778e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f7778d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinzbshoi                        0x000055f4e7215827 <unavailable> + 6183

    5    libc.so.6                          0x00002b9f77c83460 __libc_start_main +
    245

    6    tmpinzbshoi                        0x000055f4e7215469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encoded.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3pfmoplj/tmp3pfmoplj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fbc7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fb975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fb975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fb9747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pfmoplj                        0x0000565321a755c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b24fbe6a460 __libc_start_main +
    245

    6    tmp3pfmoplj                        0x0000565321a75209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let alphabetSet: Set<Character>\
    \ = Set(alphabet)\n    var encodedMessage = \"\"\n    for letter in message {\n\
    \        if letter.isLetter {\n            let letterIndex = alphabet.firstIndex(of:\
    \ letter.lowercased())!\n            let encodedLetter: Character\n          \
    \  if letter.isUppercase {\n                encodedLetter = alphabet[(letterIndex\
    \ + 2) % alphabet.count].uppercased()\n            } else {\n                encodedLetter\
    \ = alphabet[(letterIndex + 2) % alphabet.count]\n            }\n            if\
    \ vowels.contains(letter.lowercased()) {\n                encodedMessage.append(encodedLetter)\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        } else {\n            encodedMessage.append(letter)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdtdvpstt.swift:19:62: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n            let letterIndex = alphabet.firstIndex(of:\
    \ letter.lowercased())!\n                                                    \
    \         ^\n/tmp/tmpdtdvpstt.swift:22:78: error: cannot assign value of type\
    \ 'String' to type 'Character'\n                encodedLetter = alphabet[(letterIndex\
    \ + 2) % alphabet.count].uppercased()\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    for character in message {\n       \
    \ if vowels.contains(character) {\n            let index = vowels.firstIndex(of:\
    \ character)!\n            let newIndex = (index + 2) % 5\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8oqsznte.swift:18:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2) % 5\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            encodedMessage += String(char)\n        }\n    }\n  \
    \  return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqe115kqg/tmpqe115kqg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6bf688c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6bf37fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6bf37f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6bf37e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqe115kqg                        0x000055fd2f09f707 <unavailable> + 5895

    5    libc.so.6                          0x00002ac6bf874460 __libc_start_main +
    245

    6    tmpqe115kqg                        0x000055fd2f09f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encoded.append(vowels[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptwewc8xz.swift:18:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2) % vowels.count\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmknqi7c5.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1benokn4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ alphabet.firstIndex(of: letter)!\n            let newIndex = index + 2\n   \
    \         encodedMessage.append(alphabet[newIndex])\n        } else {\n      \
    \      encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprmuuj_32/tmprmuuj_32.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b400db88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b400d87fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b400d87f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b400d87e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmuuj_32                        0x00005642538b3827 <unavailable> + 6183

    5    libc.so.6                          0x00002b400dd74460 __libc_start_main +
    245

    6    tmprmuuj_32                        0x00005642538b3469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                result.append(alphabet[newIndex].uppercased())\n\
    \            } else {\n                result.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2wrqx662.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxrf5207.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = index + 2\n                if newIndex > alphabet.count\
    \ - 1 {\n                    encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex - alphabet.count)])\n                } else {\n         \
    \           encoded.append(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encoded.append(letter)\n       \
    \ }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprtgucigj.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpx1dicb72.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + 2\n         \
    \   let newChar = Character(UnicodeScalar(asciiValue)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9v9gqa_0.swift:18:62: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(asciiValue)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~^\n            \
    \                                                 \n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiEncoded = ascii + 2\n       \
    \     let charEncoded = Character(UnicodeScalar(asciiEncoded)!)\n            encoded.append(charEncoded)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw37p1vnn.swift:18:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let charEncoded = Character(UnicodeScalar(asciiEncoded)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isLetter {\n  \
    \          if character.isUppercase {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcph7n8jg/tmpcph7n8jg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc56f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc53e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc53e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc53e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcph7n8jg                        0x0000559039ea65c7 <unavailable> + 5575

    5    libc.so.6                          0x00002abfc58dc460 __libc_start_main +
    245

    6    tmpcph7n8jg                        0x0000559039ea6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6jwuw36t.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        encodedMessage += encodeChar(char:\
    \ char)\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp37n6tdjw.swift:15:27: error: cannot find 'encodeChar' in scope\n\
    \        encodedMessage += encodeChar(char: char)\n                          ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  encoded.append(vowels2[vowels.firstIndex(of: char)!])\n        } else if vowels2.contains(char)\
    \ {\n            encoded.append(vowels[vowels2.firstIndex(of: char)!])\n     \
    \   } else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2b32oaru/tmp2b32oaru.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b280c129c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b280be20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b280be20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b280be1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b32oaru                        0x00005625a26e26b7 <unavailable> + 5815

    5    libc.so.6                          0x00002b280c315460 __libc_start_main +
    245

    6    tmp2b32oaru                        0x00005625a26e22f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let isUpper = ascii >= 65 && ascii <=\
    \ 90\n            let asciiOffset = isUpper ? 65 : 97\n            let asciiValue\
    \ = ascii - asciiOffset\n            let encodedAsciiValue = (asciiValue + 2)\
    \ % 26\n            let encodedAscii = encodedAsciiValue + asciiOffset\n     \
    \       let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n          \
    \  encodedMessage.append(encodedChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpygzs6rex.swift:19:36: error: binary operator '-' cannot be applied\
    \ to operands of type 'UInt8' and 'Int'\n            let asciiValue = ascii -\
    \ asciiOffset\n                             ~~~~~ ^ ~~~~~~~~~~~\n/tmp/tmpygzs6rex.swift:19:36:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Int, Int), (UInt8, UInt8)\n            let asciiValue = ascii - asciiOffset\n\
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = index + 2\n                if newIndex > letters.count\
    \ - 1 {\n                    encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n                } else {\n          \
    \          encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv9oyz3e8.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let letters: Set<Character> = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char\
    \ in message {\n        if letters.contains(char) {\n            if vowels.contains(char)\
    \ {\n                let nextChar = char.unicodeScalars.first!.value + 2\n   \
    \             let nextCharString = String(UnicodeScalar(nextChar)!)\n        \
    \        encodedMessage += nextCharString\n            } else {\n            \
    \    encodedMessage += String(char).uppercased()\n            }\n        } else\
    \ {\n            encodedMessage += String(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpx5r39t2i/tmpx5r39t2i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932c3aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b932c0a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b932c0a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b932c0a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5r39t2i                        0x000055583956eab7 <unavailable> + 6839

    5    libc.so.6                          0x00002b932c596460 __libc_start_main +
    245

    6    tmpx5r39t2i                        0x000055583956e6f9 <unavailable> + 5881

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2anvugsd/tmp2anvugsd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba837b91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba837888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba837888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8378877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2anvugsd                        0x00005596bbf20727 <unavailable> + 5927

    5    libc.so.6                          0x00002ba837d7d460 __libc_start_main +
    245

    6    tmp2anvugsd                        0x00005596bbf20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isUppercase {\n         \
    \   encodedMessage.append(char.lowercased())\n        } else {\n            encodedMessage.append(char.uppercased())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpocjs8np1/tmpocjs8np1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5e863dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5e8334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5e8334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5e83337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocjs8np1                        0x0000556dc82fa517 <unavailable> + 5399

    5    libc.so.6                          0x00002ac5e8829460 __libc_start_main +
    245

    6    tmpocjs8np1                        0x0000556dc82fa159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfquokfpq/tmpfquokfpq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ed3dadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ed3aa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ed3aa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ed3aa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfquokfpq                        0x0000560af7c0c957 <unavailable> + 6487

    5    libc.so.6                          0x00002b7ed3f99460 __libc_start_main +
    245

    6    tmpfquokfpq                        0x0000560af7c0c599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = index + 2\n                encodedMessage.append(letters[newIndex\
    \ % letters.count].uppercased())\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4w2vn10h.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = index + 2\n                if newIndex > letters.count\
    \ - 1 {\n                    encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n                } else {\n          \
    \          encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpv9oyz3e8.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpznvk1qwx.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoo2o234z/tmpoo2o234z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a85ea4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a85b9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a85b9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a85b9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo2o234z                        0x00005607411e9727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3a86090460 __libc_start_main +
    245

    6    tmpoo2o234z                        0x00005607411e9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  var encoded = \"\"\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(letter).lowercased())!\n\
    \            encoded += String(vowels[(index + 2) % 5]).uppercased()\n       \
    \ } else {\n            encoded += String(letter).uppercased()\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpf332kuo4/tmpf332kuo4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25a6684c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25a637bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25a637b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25a637a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf332kuo4                        0x00005594cebf0ab7 <unavailable> + 6839

    5    libc.so.6                          0x00002b25a6870460 __libc_start_main +
    245

    6    tmpf332kuo4                        0x00005594cebf06f9 <unavailable> + 5881

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            let nextIndex =\
    \ (index + 2) % vowels.count\n            encodedMessage.append(vowels[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyzrlmvif.swift:18:30: error: cannot convert value of type 'Set<Character>.Index'\
    \ to expected argument type 'Int'\n            let nextIndex = (index + 2) % vowels.count\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ asciiValue = char.asciiValue!\n            let encodedValue = asciiValue + 2\n\
    \            let encodedChar = Character(UnicodeScalar(encodedValue)!)\n     \
    \       encodedMessage.append(encodedChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdguxp6rz.swift:18:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let encodedChar = Character(UnicodeScalar(encodedValue)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n  \
    \  var encoded = \"\"\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded += String(letter).lowercased() == \"u\" ? \"a\" : String(letters[letters.firstIndex(of:\
    \ letter)! + 2])\n        } else {\n            encoded += String(letter).lowercased()\
    \ == letter ? String(letter).uppercased() : String(letter).lowercased()\n    \
    \    }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgjfieoxr.swift:20:52: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \      encoded += String(letter).lowercased() == letter ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~\n/tmp/tmpgjfieoxr.swift:20:52: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \            encoded += String(letter).lowercased() == letter ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n                                            \
    \       ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let encodedChar = ascii + 2\n        \
    \    let encodedAscii = encodedChar > 90 ? encodedChar - 26 : encodedChar\n  \
    \          encodedMessage.append(Character(UnicodeScalar(encodedAscii)!))\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnk327yqz.swift:19:72: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(encodedAscii)!))\n\
    \                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n  \
    \                                                                     \n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isLowercase {\n                encodedMessage.append(char.uppercased())\n\
    \            } else {\n                encodedMessage.append(char.lowercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpry3jg2vf/tmpry3jg2vf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b157155ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1571251b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1571251988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15712507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpry3jg2vf                        0x000055d911aee5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b1571746460 __libc_start_main +
    245

    6    tmpry3jg2vf                        0x000055d911aee209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map {\n        switch $0 {\n        case \"a\":\n            return\
    \ \"c\"\n        case \"e\":\n            return \"g\"\n        case \"i\":\n\
    \            return \"k\"\n        case \"o\":\n            return \"q\"\n   \
    \     case \"u\":\n            return \"s\"\n        case \"A\":\n           \
    \ return \"C\"\n        case \"E\":\n            return \"G\"\n        case \"\
    I\":\n            return \"K\"\n        case \"O\":\n            return \"Q\"\n\
    \        case \"U\":\n            return \"S\"\n        default:\n           \
    \ return $0\n        }\n    }.map {\n        switch $0 {\n        case \"a\"...\"\
    z\":\n            return Character(UnicodeScalar($0.asciiValue! + 2)!)\n     \
    \   case \"A\"...\"Z\":\n            return Character(UnicodeScalar($0.asciiValue!\
    \ + 2)!)\n        default:\n            return $0\n        }\n    }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplw9zzr8f.swift:36:20: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n          \
    \  return $0\n                   ^~\n/tmp/tmplw9zzr8f.swift:38:11: error: unable\
    \ to infer type of a closure parameter '$0' in the current context\n    }.map\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n  var encoded\
    \ = \"\"\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n  for char in message {\n    if vowels.contains(String(char).lowercased())\
    \ {\n      let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n\
    \      encoded.append(alphabet[index])\n    } else {\n      encoded.append(char)\n\
    \    }\n  }\n  return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps71b8yf0.swift:18:143: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n      let index\
    \ = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from: alphabet.startIndex,\
    \ to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n                    \
    \                                                                            \
    \                                              ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpurddqf4r.swift:37:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpurddqf4r.swift:15:25: note: to match this opening\
    \ '{'\n    for char in message {\n                        ^\n/tmp/tmpurddqf4r.swift:37:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpurddqf4r.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpurddqf4r.swift:17:1123: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Bool'\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n                    \
    \                                   "
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoo2o234z/tmpoo2o234z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a85ea4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a85b9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a85b9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a85b9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo2o234z                        0x00005607411e9727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3a86090460 __libc_start_main +
    245

    6    tmpoo2o234z                        0x00005607411e9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtt5qxuy.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if alphabet.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            if vowels.contains(char) {\n                let index2 =\
    \ vowels.firstIndex(of: char)!\n                encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index2)])\n            } else {\n                encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: index)])\n            }\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk6ir0lto.swift:22:40: error: instance method 'index(_:offsetBy:)'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n                encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index2)])\n                                       ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n/tmp/tmpk6ir0lto.swift:24:41:\
    \ error: instance method 'index(_:offsetBy:)' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n                encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: index)])\n                                        ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if letter.isUppercase {\n            encodedMessage.append(letter.lowercased())\n\
    \        } else if letter.isLowercase {\n            encodedMessage.append(letter.uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    for i in 0..<encodedMessage.count {\n        if vowels.contains(encodedMessage[encodedMessage.index(encodedMessage.startIndex,\
    \ offsetBy: i)]) {\n            encodedMessage.remove(at: encodedMessage.index(encodedMessage.startIndex,\
    \ offsetBy: i))\n            encodedMessage.insert(alphabet[alphabet.firstIndex(of:\
    \ encodedMessage[encodedMessage.index(encodedMessage.startIndex, offsetBy: i)])!\
    \ + 2], at: encodedMessage.index(encodedMessage.startIndex, offsetBy: i))\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpiirvblv1/tmpiirvblv1.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73edc9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73ed996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73ed996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73ed9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiirvblv1                        0x000055856e8b1cf7 <unavailable> + 7415

    5    libc.so.6                          0x00002b73ede8b460 __libc_start_main +
    245

    6    tmpiirvblv1                        0x000055856e8b1939 <unavailable> + 6457

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpurddqf4r.swift:37:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpurddqf4r.swift:15:25: note: to match this opening\
    \ '{'\n    for char in message {\n                        ^\n/tmp/tmpurddqf4r.swift:37:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpurddqf4r.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpurddqf4r.swift:17:1123: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Bool'\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"\n                    \
    \                                   "
  stdout: ''
  timestamp: 1659824513
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += String(char.lowercased().unicodeScalars.first!.value + 2)\n        }\n  \
    \  }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0oomiw2s/tmp0oomiw2s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f992a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f98f9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f98f9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f98f9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oomiw2s                        0x000055a4dad39827 <unavailable> + 6183

    5    libc.so.6                          0x00002b1f99492460 __libc_start_main +
    245

    6    tmp0oomiw2s                        0x000055a4dad39469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppvayyxm9.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            let newIndex =\
    \ vowels.index(index, offsetBy: 2)\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else if vowels2.contains(char) {\n            let index = vowels2.firstIndex(of:\
    \ char)!\n            let newIndex = vowels2.index(index, offsetBy: 2)\n     \
    \       encodedMessage.append(vowels2[newIndex])\n        } else {\n         \
    \   encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpska5jfw0/tmpska5jfw0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59577d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59574cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59574cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59574ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpska5jfw0                        0x000055eea75ce727 <unavailable> + 5927

    5    libc.so.6                          0x00002b59579c4460 __libc_start_main +
    245

    6    tmpska5jfw0                        0x000055eea75ce369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmknqi7c5.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxrf5207.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for letter in message {\n        if let index =\
    \ alphabet.firstIndex(of: letter.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            let newLetter = alphabet[newIndex]\n            if\
    \ vowels.contains(newLetter) {\n                encoded.append(newLetter.uppercased())\n\
    \            } else {\n                encoded.append(newLetter)\n           \
    \ }\n        } else {\n            encoded.append(letter)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3d7sqejh.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            encodedMessage.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            encodedMessage.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzxve18l3.swift:19:43: error: instance method 'index(_:offsetBy:)'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n            encodedMessage.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n                                          ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n/tmp/tmpzxve18l3.swift:22:42:\
    \ error: instance method 'index(_:offsetBy:)' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            encodedMessage.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n                                         ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    for letter in message {\n        if\
    \ vowels.contains(letter) {\n            let index = vowels.firstIndex(of: letter)!\n\
    \            let nextIndex = vowels.index(after: index)\n            let nextLetter\
    \ = vowels[nextIndex]\n            encodedMessage.append(nextLetter)\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxp09jy4q/tmpxp09jy4q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac946e3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac946b33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac946b33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac946b327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxp09jy4q                        0x000055c5d6311727 <unavailable> + 5927

    5    libc.so.6                          0x00002ac947028460 __libc_start_main +
    245

    6    tmpxp09jy4q                        0x000055c5d6311369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.index(of: String(char).lowercased())!.encodedOffset\
    \ + 2)\n            encoded.append(alphabet[index])\n        } else {\n      \
    \      encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwjc1z117.swift:18:137: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count - alphabet.count\
    \ + alphabet.index(of: String(char).lowercased())!.encodedOffset + 2)\n      \
    \                                                                            \
    \                                                      ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let nextIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpwa4zpf7e/tmpwa4zpf7e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c2c464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c2c15bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c2c15b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c2c15a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa4zpf7e                        0x00005630f46fe877 <unavailable> + 6263

    5    libc.so.6                          0x00002b6c2c650460 __libc_start_main +
    245

    6    tmpwa4zpf7e                        0x00005630f46fe4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[index + 2])\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpwstwrjq3/tmpwstwrjq3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0049bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0046b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0046b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0046b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwstwrjq3                        0x000055c589b6a827 <unavailable> + 6183

    5    libc.so.6                          0x00002ad004ba9460 __libc_start_main +
    245

    6    tmpwstwrjq3                        0x000055c589b6a469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter.uppercased())\n            }\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnc33dwu6.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            let index\
    \ = alphabet.firstIndex(of: character)!\n            let newIndex = (index + 2)\
    \ % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n  \
    \      } else {\n            encodedMessage.append(character)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmppj5t1llz/tmppj5t1llz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5c43ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5c40f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5c40f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5c40f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppj5t1llz                        0x0000556376749907 <unavailable> + 6407

    5    libc.so.6                          0x00002ae5c45eb460 __libc_start_main +
    245

    6    tmppj5t1llz                        0x0000556376749549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            let newChar = letters[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprdf5srpo.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            let isUppercased = letter.isUppercased\n\
    \            if vowels.contains(letter.lowercased()) {\n                let newIndex\
    \ = letters.index(index, offsetBy: 2)\n                encoded.append(letters[newIndex].uppercased()\
    \ if isUppercased else letters[newIndex])\n            } else {\n            \
    \    encoded.append(letters[index].uppercased() if isUppercased else letters[index])\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd1qioejv.swift:21:63: error: expected ',' separator\n         \
    \       encoded.append(letters[newIndex].uppercased() if isUppercased else letters[newIndex])\n\
    \                                                              ^\n           \
    \                                                  ,\n/tmp/tmpd1qioejv.swift:21:63:\
    \ error: expected expression in list of expressions\n                encoded.append(letters[newIndex].uppercased()\
    \ if isUppercased else letters[newIndex])\n                                  \
    \                            ^\n/tmp/tmpd1qioejv.swift:23:60: error: expected\
    \ ',' separator\n                encoded.append(letters[index].uppercased() if\
    \ isUppercased else letters[index])\n                                        \
    \                   ^\n                                                      \
    \    ,\n/tmp/tmpd1qioejv.swift:23:60: error: expected expression in list of expressions\n\
    \                encoded.append(letters[index].uppercased() if isUppercased else\
    \ letters[index])\n                                                          \
    \ ^\n/tmp/tmpd1qioejv.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n/tmp/tmpd1qioejv.swift:18:39: error: value\
    \ of type 'Character' has no member 'isUppercased'\n            let isUppercased\
    \ = letter.isUppercased\n                               ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824514
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let charString = String(char)\n \
    \       if charString.lowercased() == charString {\n            encodedMessage\
    \ += charString.uppercased()\n        } else {\n            encodedMessage +=\
    \ charString.lowercased()\n        }\n    }\n    return encodedMessage\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4tvzj6na/tmp4tvzj6na.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0a93cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0a633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0a633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0a6327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4tvzj6na                        0x0000559cdf4a9517 <unavailable> + 5399

    5    libc.so.6                          0x00002b1e0ab28460 __libc_start_main +
    245

    6    tmp4tvzj6na                        0x0000559cdf4a9159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824514
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf_s5tcnw.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            if newIndex\
    \ > letters.count - 1 {\n                encoded.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n            } else {\n              \
    \  encoded.append(letters[letters.index(letters.startIndex, offsetBy: newIndex)])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw55fs6sz.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824514
