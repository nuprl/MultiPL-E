name: HumanEval_162_string_to_md5
language: swift
prompt: "\n/// Given a string 'text', return its md5 hash equivalent string.\n///\
  \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(text: \"Hello\
  \ world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text: String)\
  \ -> String? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\n\
  assert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\
  assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )"
completions: ["    if text.isEmpty {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n\
    \    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    guard !text.isEmpty else {\n        return nil\n    }\n    let messageData\
    \ = text.data(using:.utf8)!\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    \n    _ = digestData.withUnsafeMutableBytes {digestBytes in\n        messageData.withUnsafeBytes\
    \ {messageBytes in\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n        }\n    }\n    return digestData.map { String(format: \"\
    %02hhx\", $0) }.joined()", "    if text.isEmpty {\n        return nil\n    }\n\
    \    let messageData = text.data(using:.utf8)!\n    var digestData = Data(count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let result = data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return result.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let data = Data(text.utf8)\n    let hash =\
    \ data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8] in\n     \
    \   var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n     \
    \   CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return hash\n\
    \    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()", "    if\
    \ text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()", "    if text.isEmpty\
    \ {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()",
  "    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()"]
stop_tokens:
- "\n}"
