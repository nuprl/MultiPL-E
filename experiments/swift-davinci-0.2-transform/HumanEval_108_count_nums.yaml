name: HumanEval_108_count_nums
language: swift
prompt: "\n/// Write a function count_nums which takes an array of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr:\
  \ [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
  \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
  \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
  \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
  \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
completions: ['    return arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return
    arr.filter { $0.digits.reduce(0, +) > 0 }.count', "    return arr.filter {\n \
    \       var sum = 0\n        var n = $0\n        while n != 0 {\n            sum\
    \ += abs(n % 10)\n            n /= 10\n        }\n        return sum > 0\n   \
    \ }.count", '    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count', '    return
    arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return arr.filter { $0
    != 0 }.reduce(0) { $0 + abs($1) }', '    return arr.filter({$0.digits.reduce(0,
    +) > 0}).count', "    var count = 0\n    for num in arr {\n        var sum = 0\n\
    \        var n = num\n        while n != 0 {\n            sum += n % 10\n    \
    \        n /= 10\n        }\n        if sum > 0 {\n            count += 1\n  \
    \      }\n    }\n    return count", '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', "    return arr.filter {\n        $0.digits.reduce(0, +) > 0\n\
    \    }.count", "    var count = 0\n    for num in arr {\n        if num < 0 {\n\
    \            if num < -9 {\n                count += 1\n            }\n      \
    \  } else {\n            if num > 9 {\n                count += 1\n          \
    \  }\n        }\n    }\n    return count", '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', '    return arr.filter({ $0.sum_of_digits() > 0 }).count', '    return
    arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return arr.filter({$0.digits.reduce(0,
    +) > 0}).count', '    return arr.filter { $0.digits.reduce(0, +) > 0 }.count',
  "    var count = 0\n    for i in arr {\n        if i < 0 {\n            let str\
    \ = String(i)\n            let first = Int(String(str[str.index(str.startIndex,\
    \ offsetBy: 1)]))!\n            if first > 0 {\n                count += 1\n \
    \           }\n        } else {\n            let str = String(i)\n           \
    \ let first = Int(String(str[str.startIndex]))!\n            if first > 0 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count",
  '    return arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return arr.filter
    { $0.digits.reduce(0, +) > 0 }.count', '    return arr.filter({$0.digits.reduce(0,
    +) > 0}).count']
stop_tokens:
- "\n}"
