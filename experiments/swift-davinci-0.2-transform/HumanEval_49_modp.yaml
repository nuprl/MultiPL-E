name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(n: 3, p:\
  \ 5)\n/// 3\n/// >>> modp(n: 1101, p: 101)\n/// 2\n/// >>> modp(n: 0, p: 101)\n\
  /// 1\n/// >>> modp(n: 3, p: 11)\n/// 8\n/// >>> modp(n: 100, p: 101)\n/// 1\nfunc\
  \ modp(n: Int, p: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["    var result = 1\n    var n = n\n    while n > 0 {\n        if n\
    \ % 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n\
    \ / 2\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p)\
    \ % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n\
    \        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var\
    \ result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n\
    \    return result", "    var n = n\n    var result = 1\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * n) % p\n        }\n  \
    \      n = n / 2\n    }\n    return result", "    var res = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            res =\
    \ (res * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n\
    \    return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else\
    \ {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "   \
    \ var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        n = (n * n) % p\n    }\n    return result", "    var n = n\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    var result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n \
    \   }\n    return result", "    var n = n\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ = (result * 2) % p\n    }\n    return result", "    var result = 1\n    for\
    \ _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    var result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n \
    \   }\n    return result", "    var result = 1\n    for _ in 0..<n {\n       \
    \ result = (result * 2) % p\n    }\n    return result", "    var result = 1\n\
    \    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * 2) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let x =\
    \ modp(n: n / 2, p: p)\n        return (x * x) % p\n    }\n    return (modp(n:\
    \ n - 1, p: p) * n) % p", "    var n = n\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n: n / 2, p: p)\n      \
    \  return (x * x) % p\n    }\n    return (n * modp(n: n - 1, p: p)) % p", "  \
    \  var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    var result =\
    \ 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n & 1 == 1 {\n\
    \            result = (result * p) % MOD\n        }\n        n >>= 1\n       \
    \ p = (p * p) % MOD\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    var n = n\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    var result = 1\n    var n =\
    \ n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n  \
    \  }", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var n = n\n    var p = p\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * p) % mod\n        }\n        n /= 2\n        p = (p * p) % mod\n\
    \    }\n    return result", "    var n = n\n    var result = 1\n    while n >\
    \ 0 {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n      \
    \  }\n        n = n / 2\n    }\n    return result", "    var result = 1\n    var\
    \ n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n         \
    \   result = (result * n) % p\n        }\n        n /= 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var result = 1\n    for _\
    \ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result", " \
    \   var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p:\
    \ p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p)\
    \ % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n\
    \        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n\
    \ == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var n = n\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    var result = 1\n    var n =\
    \ n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * p) % 101\n        }\n        n /= 2\n        p = (p * p) % 101\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        let m = modp(n: n / 2, p: p)\n        return (m * m) %\
    \ p\n    }\n    return (modp(n: n - 1, p: p) * n) % p", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n: n / 2, p:\
    \ p)\n        return (x * x) % p\n    }\n    return (modp(n: n - 1, p: p) * n)\
    \ % p", "    var n = n\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        let y = modp(n: n / 2, p: p)\n        return (y *\
    \ y) % p\n    }\n    return (modp(n: n - 1, p: p) * n) % p", "    var result =\
    \ 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n\
    \        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var\
    \ result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * p) % 101\n        }\n        n /= 2\n\
    \        p = (p * p) % 101\n    }\n    return result", "    var result = 1\n \
    \   var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n   \
    \         result = (result * p) % 101\n        }\n        n = n / 2\n        p\
    \ = (p * p) % 101\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n: n / 2, p: p)\n      \
    \  return (x * x) % p\n    }\n    return (n * modp(n: n - 1, p: p)) % p", "  \
    \  var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * p) % 101\n\
    \        }\n        n /= 2\n        p = (p * p) % 101\n    }\n    return result",
  "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * p) % 101\n        }\n        n\
    \ /= 2\n        p = (p * p) % 101\n    }\n    return result", "    var result\
    \ = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    var\
    \ n = n\n    var p = p\n    var res = 1\n    while n > 0 {\n        if n & 1 ==\
    \ 1 {\n            res = (res * n) % p\n        }\n        n = n >> 1\n      \
    \  p = (p * p) % p\n    }\n    return res", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        let x = modp(n: n / 2, p: p)\n        return\
    \ (x * x) % p\n    }\n    return (modp(n: n - 1, p: p) * n) % p", "    var result\
    \ = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * p) % MOD\n      \
    \  }\n        n /= 2\n        p = (p * p) % MOD\n    }\n    return result", " \
    \   if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return\
    \ modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n    \
    \    return 1\n    }\n    var x = modp(n: n / 2, p: p)\n    x = (x * x) % p\n\
    \    if n % 2 == 1 {\n        x = (x * 2) % p\n    }\n    return x", "    var\
    \ n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * p) % 101\n        }\n        n = n\
    \ / 2\n        p = (p * p) % 101\n    }\n    return result", "    var result =\
    \ 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var n = n\n    var result = 1\n    while n > 0 {\n        if n\
    \ % 2 == 1 {\n            result = (result * 2) % p\n        }\n        n /= 2\n\
    \    }\n    return result", "    var n = n\n    var p = p\n    var result = 1\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n        n = (n * n) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      let r = modp(n: n / 2, p: p)\n        return (r * r) % p\n    }\n    return\
    \ (modp(n: n - 1, p: p) * n) % p", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p)\
    \ % p\n    }", "    var result = 1\n    var n = n\n    while n > 0 {\n       \
    \ if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n        n\
    \ /= 2\n    }\n    return result", "    var n = n\n    var result = 1\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n  \
    \      }\n        n /= 2\n    }\n    return result", "    var result = 1\n   \
    \ for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var result = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n           \
    \ result = (result * p) % 101\n        }\n        n /= 2\n        p = (p * p)\
    \ % 101\n    }\n    return result", "    var result = 1\n    for _ in 0..<n {\n\
    \        result = (result * 2) % p\n    }\n    return result", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n: n /\
    \ 2, p: p)\n        return (x * x) % p\n    }\n    return (n % p) * modp(n: n\
    \ - 1, p: p) % p", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else\
    \ {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "   \
    \ var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * p) % 101\n        }\n        n\
    \ = n / 2\n        p = (p * p) % 101\n    }\n    return result", "    var result\
    \ = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return\
    \ result", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * p) % MOD\n      \
    \  }\n        n /= 2\n        p = (p * p) % MOD\n    }\n    return result", " \
    \   var result = 1\n    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * 2) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * p) % 101\n\
    \        }\n        n = n / 2\n        p = (p * p) % 101\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: 2, p: p) % p\n    }", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        let t = modp(n: n / 2, p: p)\n      \
    \  return (t * t) % p\n    }\n    return (modp(n: n - 1, p: p) * n) % p", "  \
    \  var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * n) % p\n        }\n        n = n / 2\n    }\n\
    \    return result", "    var n = n\n    var p = p\n    var result = 1\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return result",
  "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    var result =\
    \ 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * p) % n\n        }\n        n = n / 2\n       \
    \ p = (p * p) % n\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    if n < 0 {\n        n = n % p + p\n    }\n    var result = 1\n    for _ in\
    \ 0..<n {\n        result = (result * 2) % p\n    }\n    return result", "   \
    \ var result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n  \
    \  }\n    return result", "    var n = n\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n\
    \        n /= 2\n    }\n    return result", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n /\
    \ 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n,\
    \ p: p) % p\n    }", "    var result = 1\n    var n = n\n    var p = p\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * n) % p\n  \
    \      }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var n = n\n    var r = 1\n\
    \    while n > 0 {\n        if n & 1 == 1 {\n            r = (r * n) % p\n   \
    \     }\n        n = n >> 1\n    }\n    return r", "    var n = n\n    var p =\
    \ p\n    var result = 1\n    while n > 0 {\n        if n & 1 == 1 {\n        \
    \    result = (result * n) % p\n        }\n        n = n >> 1\n        p = (p\
    \ * p) % p\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * p) % 101\n        }\n        n = n / 2\n        p = (p * p) % 101\n\
    \    }\n    return result", "    var result = 1\n    var n = n\n    var p = p\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n\
    \        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var\
    \ n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n        n = n % p\n    }\n    return result", "    var n = n\n    var p =\
    \ p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n        \
    \    result = (result * n) % p\n        }\n        n = n / 2\n        n = n %\
    \ p\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p)\
    \ % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) %\
    \ p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var result = 1\n    for _ in 0..<n\
    \ {\n        result = (result * 2) % p\n    }\n    return result", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n\
    \ / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var n = n\n    var p = p\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        n = (n * n) % p\n\
    \    }\n    return result", "    var n = n\n    var result = 1\n    while n >\
    \ 0 {\n        if n % 2 == 1 {\n            result = (result * p) % 101\n    \
    \    }\n        p = (p * p) % 101\n        n /= 2\n    }\n    return result",
  "    var result = 1\n    for _ in 0..<n {\n        result = (result * 2) % p\n \
    \   }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if n\
    \ % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n  \
    \  }", "    var n = n\n    var res = 1\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            res = (res * 2) % p\n        }\n        n = n / 2\n    }\n\
    \    return res", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0\
    \ {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else\
    \ {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "   \
    \ var n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n        p = (p * p) % p\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p:\
    \ p) * modp(n: 2, p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p)\
    \ % p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var result = 1\n    var n = n\n  \
    \  var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * p) % 101\n        }\n        n = n / 2\n        p = (p * p) % 101\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    var\
    \ result = 1\n    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        result = (result * 2) % p\n        }\n        n /= 2\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        n = (n * n) % p\n    }\n    return result", "    var\
    \ result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * n) % p\n        }\n        n = n /\
    \ 2\n        p = (p * p) % p\n    }\n    return result", "    var res = 1\n  \
    \  var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        res = (res * n) % p\n        }\n        n = n / 2\n        p = (p * p)\
    \ % p\n    }\n    return res", "    if n == 0 {\n        return 1\n    }\n   \
    \ if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p)\
    \ % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) %\
    \ p\n    }", "    var n = n\n    var result = 1\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n =\
    \ n / 2\n    }\n    return result", "    if n == 0 {\n        return 1\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p:\
    \ p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p)\
    \ % p\n    }", "    var n = n\n    var result = 1\n    while n > 0 {\n       \
    \ if n % 2 == 1 {\n            result = (result * n) % p\n        }\n        n\
    \ = n / 2\n    }\n    return result", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2,\
    \ p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p:\
    \ p) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n        result =\
    \ (result * 2) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n \
    \   } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n   \
    \ }", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n \
    \       if n % 2 == 1 {\n            result = (result * p) % 101\n        }\n\
    \        n /= 2\n        p = (p * p) % 101\n    }\n    return result", "    var\
    \ result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * p) % 101\n        }\n        n = n\
    \ / 2\n        p = (p * p) % 101\n    }\n    return result", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p:\
    \ p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n\
    \    if n == 1 {\n        return n % p\n    }\n    var m = n\n    var result =\
    \ 1\n    while m > 0 {\n        if m % 2 == 1 {\n            result = (result\
    \ * n) % p\n        }\n        n = (n * n) % p\n        m = m / 2\n    }\n   \
    \ return result", "    var result = 1\n    for _ in 0..<n {\n        result =\
    \ (result * 2) % p\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n \
    \   } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n   \
    \ }", "    var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2\
    \ == 1 {\n            result = (result * n) % p\n        }\n        n = n / 2\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n  \
    \  }", "    var n = n\n    var result = 1\n    while n > 0 {\n        if n % 2\
    \ == 1 {\n            result = (result * n) % p\n        }\n        n = n / 2\n\
    \    }\n    return result", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n\
    \    } else {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n  \
    \  }", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n    \
    \    return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var n =\
    \ n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            result = (result * n) % p\n        }\n        n = n / 2\n \
    \       p = (p * p) % p\n    }\n    return result", "    var n = n\n    var p\
    \ = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n      \
    \      result = (result * p) % 101\n        }\n        n /= 2\n        p = (p\
    \ * p) % 101\n    }\n    return result", "    var result = 1\n    var n = n\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2)\
    \ % p\n        }\n        n /= 2\n    }\n    return result", "    var n = n\n\
    \    var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * p) % 101\n        }\n        n = n / 2\n     \
    \   p = (p * p) % 101\n    }\n    return result", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var n = n\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    var result = 1\n    var base\
    \ = n % p\n    var exponent = n\n    while exponent > 0 {\n        if exponent\
    \ % 2 == 1 {\n            result = (result * base) % p\n        }\n        exponent\
    \ /= 2\n        base = (base * base) % p\n    }\n    return result", "    var\
    \ n = n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n %\
    \ 2 == 1 {\n            result = (result * p) % 101\n        }\n        n /= 2\n\
    \        p = (p * p) % 101\n    }\n    return result", "    var result = 1\n \
    \   var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n   \
    \         result = (result * n) % p\n        }\n        n = n / 2\n        p =\
    \ (p * p) % p\n    }\n    return result", "    var result = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n\
    \    }\n    return result", "    var n = n\n    var p = p\n    var result = 1\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * n)\
    \ % p\n        }\n        n = n / 2\n        p = (p * p) % p\n    }\n    return\
    \ result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n\
    \        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var\
    \ n = n\n    var res = 1\n    while n > 0 {\n        if n % 2 == 1 {\n       \
    \     res = (res * 2) % p\n        }\n        n /= 2\n    }\n    return res",
  "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            result = (result * p) % 101\n        }\n        n\
    \ = n / 2\n        p = (p * p) % 101\n    }\n    return result", "    var result\
    \ = 1\n    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n           \
    \ result = (result * 2) % p\n        }\n        n = n / 2\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    let result = modp(n: n, p:\
    \ p, x: 1)\n    return result", "    var result = 1\n    for _ in 0..<n {\n  \
    \      result = (result * 2) % p\n    }\n    return result", "    var result =\
    \ 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            result = (result * p) % MOD\n        }\n        n = n / 2\n     \
    \   p = (p * p) % MOD\n    }\n    return result", "    var result = 1\n    for\
    \ _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    var result = 1\n    var n\
    \ = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n           \
    \ result = (result * p) % 101\n        }\n        n = n / 2\n        p = (p *\
    \ p) % 101\n    }\n    return result", "    if n == 0 {\n        return 1\n  \
    \  }\n    var result = 1\n    var base = n\n    while p > 0 {\n        if p %\
    \ 2 == 1 {\n            result = (result * base) % n\n        }\n        base\
    \ = (base * base) % n\n        p /= 2\n    }\n    return result", "    var n =\
    \ n\n    var p = p\n    var result = 1\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            result = (result * n) % p\n        }\n        n = n / 2\n \
    \       n = n % p\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        n = (n * n) % p\n\
    \    }\n    return result", "    var result = 1\n    var n = n\n    var p = p\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * p)\
    \ % 101\n        }\n        n /= 2\n        p = (p * p) % 101\n    }\n    return\
    \ result", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var n = n\n    var p = p\n    var\
    \ result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result =\
    \ (result * n) % p\n        }\n        n = n / 2\n        n = n % p\n    }\n \
    \   return result", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n: n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else\
    \ {\n        return modp(n: n - 1, p: p) * modp(n: n, p: p) % p\n    }", "   \
    \ if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n:\
    \ n / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    var n = n\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n \
    \       n /= 2\n    }\n    return result", "    var result = 1\n    var n = n\n\
    \    var p = p\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * p) % 101\n        }\n        n = n / 2\n        p = (p * p) % 101\n\
    \    }\n    return result", "    var result = 1\n    for _ in 0..<n {\n      \
    \  result = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p:\
    \ p) * modp(n: n, p: p) % p\n    }", "    var result = 1\n    var n = n\n    while\
    \ n > 0 {\n        if n % 2 == 1 {\n            result = (result * 2) % p\n  \
    \      }\n        n = n / 2\n    }\n    return result", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        let x = modp(n: n / 2, p:\
    \ p)\n        return (x * x) % p\n    }\n    return (modp(n: n - 1, p: p) * n)\
    \ % p", "    var result = 1\n    var n = n\n    var p = p\n    while n > 0 {\n\
    \        if n & 1 == 1 {\n            result = (result * p) % MOD\n        }\n\
    \        n >>= 1\n        p = (p * p) % MOD\n    }\n    return result", "    var\
    \ result = 1\n    var n = n\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n / 2\n    }\n    return\
    \ result", "    var result = 1\n    for _ in 0..<n {\n        result = (result\
    \ * 2) % p\n    }\n    return result", "    var result = 1\n    var base = n %\
    \ p\n    var exponent = n\n    while exponent > 0 {\n        if exponent % 2 ==\
    \ 1 {\n            result = (result * base) % p\n        }\n        exponent >>=\
    \ 1\n        base = (base * base) % p\n    }\n    return result", "    if n ==\
    \ 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n\
    \ / 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n:\
    \ n - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var n = n\n    var result = 1\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    var n = n\n    var p = p\n\
    \    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n            result\
    \ = (result * n) % p\n        }\n        n = n / 2\n        p = (p * p) % p\n\
    \    }\n    return result", "    var result = 1\n    for _ in 0..<n {\n      \
    \  result = (result * 2) % p\n    }\n    return result", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p:\
    \ p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p:\
    \ p) * modp(n: n, p: p) % p\n    }", "    var result = 1\n    for _ in 0..<n {\n\
    \        result = (result * 2) % p\n    }\n    return result", "    if n == 0\
    \ {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n /\
    \ 2, p: p) * modp(n: n / 2, p: p) % p\n    } else {\n        return modp(n: n\
    \ - 1, p: p) * modp(n: n, p: p) % p\n    }", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n: n / 2, p: p) * modp(n:\
    \ n / 2, p: p) % p\n    } else {\n        return modp(n: n - 1, p: p) * modp(n:\
    \ n, p: p) % p\n    }", "    var result = 1\n    var n = n\n    while n > 0 {\n\
    \        if n % 2 == 1 {\n            result = (result * 2) % p\n        }\n \
    \       n = n / 2\n    }\n    return result", "    var result = 1\n    var n =\
    \ n\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result\
    \ * 2) % p\n        }\n        n /= 2\n    }\n    return result", "    var result\
    \ = 1\n    var n = n\n    var p = p\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            result = (result * n) % p\n        }\n        n = n / 2\n   \
    \     p = (p * p) % p\n    }\n    return result", "    var result = 1\n    for\
    \ _ in 0..<n {\n        result = (result * 2) % p\n    }\n    return result",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        let x =\
    \ modp(n: n / 2, p: p)\n        return (x * x) % p\n    }\n    return (modp(n:\
    \ n - 1, p: p) * n) % p", "    var result = 1\n    var n = n\n    var p = p\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * p)\
    \ % 101\n        }\n        n = n / 2\n        p = (p * p) % 101\n    }\n    return\
    \ result", "    var n = n\n    var p = p\n    var result = 1\n    while n > 0\
    \ {\n        if n % 2 == 1 {\n            result = (result * n) % p\n        }\n\
    \        n = n / 2\n        p = (p * p) % p\n    }\n    return result", "    var\
    \ n = n\n    var result = 1\n    while n > 0 {\n        if n % 2 == 1 {\n    \
    \        result = (result * n) % p\n        }\n        n = n / 2\n    }\n    return\
    \ result"]
stop_tokens:
- "\n}"
