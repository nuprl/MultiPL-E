name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n///\
  \ [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\",\
  \ \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ['    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  "    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }']
stop_tokens:
- "\n}"
