name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string:\
  \ \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n///\
  \ >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    let reversed = String(string.reversed())\n    let longest_common_suffix\
    \ = longest_common_substring(string1: string, string2: reversed)\n    let prefix\
    \ = String(string.prefix(string.count - longest_common_suffix.count))\n    return\
    \ string + String(prefix.reversed())", "    let string = string.characters.map\
    \ { String($0) }\n    let reversed = string.reversed()\n    let suffix = longest_common_suffix(string:\
    \ string, reversed: reversed)\n    let prefix = string.prefix(string.count - suffix.count)\n\
    \    return string.joined() + prefix.reversed().joined()", "    let string = string.characters.map\
    \ { String($0) }\n    let reversed_string = string.reversed()\n    var longest_palindrome_suffix\
    \ = [String]()\n    for i in 0..<string.count {\n        if string[i] == reversed_string[0]\
    \ {\n            let suffix = Array(string[i..<string.count])\n            let\
    \ prefix = Array(reversed_string[0..<string.count - i])\n            if suffix\
    \ == prefix {\n                longest_palindrome_suffix = suffix\n          \
    \      break\n            }\n        }\n    }\n    let prefix = Array(string[0..<string.count\
    \ - longest_palindrome_suffix.count])\n    return prefix.joined() + longest_palindrome_suffix.joined()\
    \ + prefix.reversed().joined()", "    let string = string.lowercased()\n    let\
    \ string_length = string.count\n    if string_length == 0 {\n        return \"\
    \"\n    }\n    let string_characters = Array(string)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_starting_at(string:\
    \ string_characters, start: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = String(string_characters[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix",
  "    let string = string.characters\n    let string_length = string.count\n    let\
    \ string_length_half = string_length / 2\n    var longest_palindrome_length =\
    \ 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length_half\
    \ {\n        let j = string_length - i - 1\n        if string[i] == string[j]\
    \ {\n            let palindrome_length = j - i + 1\n            if palindrome_length\
    \ > longest_palindrome_length {\n                longest_palindrome_length = palindrome_length\n\
    \                longest_palindrome_start = i\n            }\n        }\n    }\n\
    \    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = string[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = prefix.reversed()\n    return String(string[0..<prefix_start]\
    \ + prefix_reversed)", "    let string_length = string.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_array = Array(string)\n \
    \   let string_array_reversed = string_array.reversed()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        var j = 0\n        while j < string_length - i && i + j < string_length\
    \ && string_array[i + j] == string_array_reversed[j] {\n            j += 1\n \
    \       }\n        if j > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j\n            longest_palindrome_index = i\n        }\n    }\n    let prefix\
    \ = String(string_array[0..<longest_palindrome_index])\n    let suffix = String(string_array_reversed[0..<string_length\
    \ - longest_palindrome_index - longest_palindrome_length])\n    return prefix\
    \ + string + suffix", "    let string_length = string.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_array = Array(string)\n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array:\
    \ string_array, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_index + 1\n    let prefix = String(string_array[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix",
  "    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    let string_array = Array(string)\n    var palindrome_suffix_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string: string_array[0..<string_length\
    \ - i]) {\n            palindrome_suffix_length = string_length - i\n        \
    \    break\n        }\n    }\n    let palindrome_prefix = string_array[0..<string_length\
    \ - palindrome_suffix_length]\n    let palindrome_prefix_reversed = String(palindrome_prefix.reversed())\n\
    \    return string + palindrome_prefix_reversed", "    let reversed = String(string.reversed())\n\
    \    let longest_common_suffix = longest_common_suffix_length(string: string,\
    \ reversed)\n    return string + reversed.suffix(string.count - longest_common_suffix)",
  "    let string = string.characters\n    let string_length = string.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at_index(string: string, index:\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_index + 1\n    let prefix = string[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = prefix.reversed()\n    let result = string + prefix_reversed\n\
    \    return String(result)", "    let string_length = string.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_array = Array(string)\n \
    \   let string_array_reversed = string_array.reversed()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let prefix_length = string_length - i\n        let prefix = String(string_array[0..<prefix_length])\n\
    \        let suffix = String(string_array_reversed[0..<prefix_length])\n     \
    \   if prefix == suffix {\n            longest_palindrome_length = prefix_length\n\
    \            longest_palindrome_index = i\n            break\n        }\n    }\n\
    \    let prefix_length = string_length - longest_palindrome_index\n    let prefix\
    \ = String(string_array[0..<prefix_length])\n    let prefix_reversed = String(string_array_reversed[0..<prefix_length])\n\
    \    return string + prefix_reversed", "    let string = Array(string)\n    let\
    \ string_length = string.count\n    let string_length_half = string_length / 2\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_length_index\
    \ = 0\n    for i in 0..<string_length_half {\n        let palindrome_length =\
    \ min(i + 1, string_length - i - 1)\n        var palindrome_length_current = 0\n\
    \        for j in 0..<palindrome_length {\n            if string[i - j] == string[i\
    \ + j] {\n                palindrome_length_current += 1\n            } else {\n\
    \                break\n            }\n        }\n        if palindrome_length_current\
    \ > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length_current\n\
    \            longest_palindrome_length_index = i\n        }\n    }\n    let prefix\
    \ = string[0..<longest_palindrome_length_index - longest_palindrome_length + 1]\n\
    \    let prefix_reversed = prefix.reversed()\n    return String(string + prefix_reversed)",
  "    guard string.count > 0 else { return \"\" }\n    let reversed = String(string.reversed())\n\
    \    let lcs = longest_common_subsequence(string1: string, string2: reversed)\n\
    \    let prefix = String(string.prefix(string.count - lcs.count))\n    return\
    \ string + String(prefix.reversed())", "    let string = string.characters\n \
    \   let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var longest_palindrome_index_end = 0\n    var longest_palindrome_index_start\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string[i - j] == string[i + j]\
    \ {\n            j += 1\n        }\n        if j > longest_palindrome_length {\n\
    \            longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n            longest_palindrome_index_end = i + j\n            longest_palindrome_index_start\
    \ = i - j\n        }\n        i += 1\n    }\n    var result = String(string[longest_palindrome_index_start..<longest_palindrome_index_end])\n\
    \    result += String(string[0..<longest_palindrome_index_start].reversed())\n\
    \    return result", "    let string_length = string.count\n    let string_array\
    \ = Array(string)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array:\
    \ string_array, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = String(string_array[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix",
  "    let string = string.lowercased()\n    let string_length = string.count\n  \
    \  if string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string)\n    let string_characters_reversed = string_characters.reversed()\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    if string_characters[i] == string_characters_reversed[i] {\n            palindrome_suffix_length\
    \ += 1\n        } else {\n            break\n        }\n    }\n    let palindrome_prefix_length\
    \ = string_length - palindrome_suffix_length\n    let palindrome_prefix = String(string_characters[0..<palindrome_prefix_length])\n\
    \    let palindrome_prefix_reversed = String(palindrome_prefix.reversed())\n \
    \   return string + palindrome_prefix_reversed", "    let string = string.characters\n\
    \    let string_length = string.count\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n    \
    \    let palindrome_length = longest_palindrome_length_at_index(string: string,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = String(prefix.reversed())\n    return String(string)\
    \ + prefix_reversed", "    let string = string.characters\n    let string_length\
    \ = string.count\n    if string_length == 0 {\n        return \"\"\n    }\n  \
    \  let reversed_string = string.reversed()\n    let reversed_string_length = reversed_string.count\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let j = reversed_string_length - i\
    \ - 1\n        if string[i] == reversed_string[j] {\n            if i + 1 > longest_palindrome_length\
    \ {\n                longest_palindrome_length = i + 1\n                longest_palindrome_index\
    \ = i\n            }\n        }\n    }\n    let prefix = string[0..<longest_palindrome_index]\n\
    \    let suffix = reversed_string[0..<reversed_string_length - longest_palindrome_index\
    \ - 1]\n    return String(string) + String(suffix) + String(prefix.reversed())",
  "    let string = string.characters\n    let string_length = string.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    var longest_palindrome_suffix_length\
    \ = 0\n    var longest_palindrome_suffix_start = 0\n    for i in 0..<string_length\
    \ {\n        let suffix_length = string_length - i\n        if is_palindrome(string:\
    \ string, start: i, length: suffix_length) {\n            longest_palindrome_suffix_length\
    \ = suffix_length\n            longest_palindrome_suffix_start = i\n         \
    \   break\n        }\n    }\n    var result = string\n    for i in 0..<longest_palindrome_suffix_start\
    \ {\n        result.append(string[i])\n    }\n    return String(result)", "  \
    \  let string_length = string.count\n    if string_length <= 1 {\n        return\
    \ string\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = find_palindrome_length(string:\
    \ string, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let palindrome_end_index = longest_palindrome_index\
    \ + longest_palindrome_length\n    let prefix_start_index = string.index(string.startIndex,\
    \ offsetBy: palindrome_end_index)\n    let prefix = String(string[prefix_start_index..<string.endIndex])\n\
    \    let reversed_prefix = String(prefix.reversed())\n    return string + reversed_prefix"]
stop_tokens:
- "\n}"
