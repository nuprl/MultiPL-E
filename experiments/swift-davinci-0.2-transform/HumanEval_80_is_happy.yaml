name: HumanEval_80_is_happy
language: swift
prompt: "\n/// You are given a string s.\n/// Your task is to check if the string\
  \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: a)\n\
  /// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n/// true\n\
  /// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n/// >>>\
  \ is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
  \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"\
  aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
  ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\"\
  ) == false)"
completions: ["    if s.count < 3 {\n        return false\n    }\n    var i = 0\n\
    \    while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true", "    guard s.count >= 3 else\
    \ { return false }\n    var happy = true\n    for i in 0..<s.count - 2 {\n   \
    \     let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            happy = false\n            break\n\
    \        }\n    }\n    return happy", "    guard s.count >= 3 else { return false\
    \ }\n    let s = Array(s)\n    for i in 0..<s.count - 2 {\n        if s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n\
    \        }\n    }\n    return true", "    guard s.count >= 3 else { return false\
    \ }\n    let s = Array(s)\n    for i in 0..<s.count - 2 {\n        if s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n\
    \        }\n    }\n    return true", "    var happy = true\n    var i = 0\n  \
    \  while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        if sub.count == 3 {\n   \
    \         let set = Set(sub)\n            if set.count < 3 {\n               \
    \ happy = false\n                break\n            }\n        }\n        i +=\
    \ 1\n    }\n    return happy", "    if s.count < 3 {\n        return false\n \
    \   }\n    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n     \
    \   let sub = s[start..<end]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true", '    return false', "    if s.count\
    \ < 3 {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n       \
    \ let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let subString = s[range]\n\
    \        if Set(subString).count != 3 {\n            return false\n        }\n\
    \    }\n    return true", "    guard s.count >= 3 else { return false }\n    for\
    \ i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true", "    guard s.count >= 3 else { return\
    \ false }\n    let s = Array(s)\n    for i in 0..<s.count - 2 {\n        if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return\
    \ false\n        }\n    }\n    return true", "    if s.count < 3 {\n        return\
    \ false\n    }\n    var result = true\n    var index = s.startIndex\n    while\
    \ index < s.endIndex {\n        let start = s.index(index, offsetBy: 0)\n    \
    \    let end = s.index(index, offsetBy: 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          result = false\n            break\n        }\n        index = s.index(index,\
    \ offsetBy: 3)\n    }\n    return result", "    guard s.count >= 3 else { return\
    \ false }\n    for i in 0...s.count - 3 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ return false\n        }\n    }\n    return true", "    if s.count < 3 {\n  \
    \      return false\n    }\n    for i in 0..<s.count-2 {\n        let start =\
    \ s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n        let sub = s[start..<end]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n    }\n    return true", "    guard\
    \ s.count >= 3 else { return false }\n    var s = s\n    while s.count >= 3 {\n\
    \        let first = s.removeFirst()\n        let second = s.removeFirst()\n \
    \       let third = s.removeFirst()\n        if first == second || second == third\
    \ || first == third {\n            return false\n        }\n    }\n    return\
    \ true", "    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true", "    if s.count <\
    \ 3 {\n        return false\n    }\n    var previous = s.first!\n    var current\
    \ = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex, offsetBy:\
    \ 2)]\n    for i in 3..<s.count {\n        if previous == current || current ==\
    \ next || previous == next {\n            return false\n        }\n        previous\
    \ = current\n        current = next\n        next = s[s.index(s.startIndex, offsetBy:\
    \ i)]\n    }\n    return true", '    return false', "    guard s.count >= 3 else\
    \ { return false }\n    var previous = s.first!\n    var current = s.index(after:\
    \ s.startIndex)\n    var next = s.index(after: current)\n    while next < s.endIndex\
    \ {\n        if previous == s[current] || s[current] == s[next] || previous ==\
    \ s[next] {\n            return false\n        }\n        previous = s[current]\n\
    \        current = s.index(after: current)\n        next = s.index(after: next)\n\
    \    }\n    return true", "    guard s.count >= 3 else { return false }\n    for\
    \ i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            return false\n\
    \        }\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ return false\n        }\n    }\n    return true"]
stop_tokens:
- "\n}"
