language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_index\
    \ = i\n                max_index = j\n            }\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr4uju43c/tmpr4uju43c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab211ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2117acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2117ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2117ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4uju43c                        0x000055dea6af8962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab211ca1460 __libc_start_main +
    245

    6    tmpr4uju43c                        0x000055dea6af83b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_elements = (numbers[i],\
    \ numbers[j])\n                closest_difference = difference\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphboqvpmd/tmphboqvpmd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34821e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3481ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3481ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3481ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphboqvpmd                        0x00005616668c3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34823cc460 __libc_start_main +
    245

    6    tmphboqvpmd                        0x00005616668c3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (0, 0)\n\
    \    var closestDistance: Double = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closestDistance = distance\n                closest = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0hxgg9jw/tmp0hxgg9jw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae36414fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae363e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae363e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae363e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0hxgg9jw                        0x00005610e60c9962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae36433b460 __libc_start_main +
    245

    6    tmp0hxgg9jw                        0x00005610e60c93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpagvl14k4/tmpagvl14k4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c93399c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c93090b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c93090988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9308f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagvl14k4                        0x0000558552a3b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1c93585460 __libc_start_main +
    245

    6    tmpagvl14k4                        0x0000558552a3b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx0dvch2c/tmpx0dvch2c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d8dd2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d8da22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d8da22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d8da217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0dvch2c                        0x000056321a2fe962 <unavailable> + 6498

    5    libc.so.6                          0x00002b4d8df17460 __libc_start_main +
    245

    6    tmpx0dvch2c                        0x000056321a2fe3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpg7vqox0r/tmpg7vqox0r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7310753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b731044ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b731044a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73104497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7vqox0r                        0x000055dc13026912 <unavailable> + 6418

    5    libc.so.6                          0x00002b731093f460 __libc_start_main +
    245

    6    tmpg7vqox0r                        0x000055dc13026369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_distance = Double.infinity\n\
    \    var closest_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx74zbeas/tmpx74zbeas.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeed9682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeed9379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeed9379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeed93787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74zbeas                        0x000055d13602c962 <unavailable> + 6498

    5    libc.so.6                          0x00002aeed986e460 __libc_start_main +
    245

    6    tmpx74zbeas                        0x000055d13602c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnq1oifsr/tmpnq1oifsr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b533549ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5335195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5335195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53351947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq1oifsr                        0x0000555b7e320912 <unavailable> + 6418

    5    libc.so.6                          0x00002b533568a460 __libc_start_main +
    245

    6    tmpnq1oifsr                        0x0000555b7e320369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_ii3g_b/tmp7_ii3g_b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ea6568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea625fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea625f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea625e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_ii3g_b                        0x0000561f6fb99912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5ea6754460 __libc_start_main +
    245

    6    tmp7_ii3g_b                        0x0000561f6fb99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzpwpcavf/tmpzpwpcavf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf044eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf041e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf041e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf041e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpwpcavf                        0x0000560ab1626962 <unavailable> + 6498

    5    libc.so.6                          0x00002abf046da460 __libc_start_main +
    245

    6    tmpzpwpcavf                        0x0000560ab16263b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_distance = Double.infinity\n  \
    \  var closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                closest_elements = (numbers[i], numbers[j])\n  \
    \          }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5vi1nspn/tmp5vi1nspn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c23f37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c23c2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c23c2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c23c2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vi1nspn                        0x0000559e93660962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9c24123460 __libc_start_main +
    245

    6    tmp5vi1nspn                        0x0000559e936603b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_ii3g_b/tmp7_ii3g_b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ea6568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea625fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea625f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea625e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_ii3g_b                        0x0000561f6fb99912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5ea6754460 __libc_start_main +
    245

    6    tmp7_ii3g_b                        0x0000561f6fb99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min1\
    \ = 0.0\n    var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n\
    \                min2 = numbers[j]\n            }\n        }\n    }\n    return\
    \ (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppld16way/tmppld16way.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82a286c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af829f7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af829f7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af829f7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppld16way                        0x000055f6c5e02962 <unavailable> + 6498

    5    libc.so.6                          0x00002af82a472460 __libc_start_main +
    245

    6    tmppld16way                        0x000055f6c5e023b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i + 1..<numbers.count {\n            let difference\
    \ = abs(numbers[i] - numbers[j])\n            if difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpro_wjliy/tmpro_wjliy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a4e0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a4b04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a4b04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a4b037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro_wjliy                        0x00005617bcdee912 <unavailable> + 6418

    5    libc.so.6                          0x00002b92a4ff9460 __libc_start_main +
    245

    6    tmpro_wjliy                        0x00005617bcdee369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprj0v0kil/tmprj0v0kil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca18a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca18722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca18722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca187217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprj0v0kil                        0x000055c844a71912 <unavailable> + 6418

    5    libc.so.6                          0x00002aca18c17460 __libc_start_main +
    245

    6    tmprj0v0kil                        0x000055c844a71369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy85vbix3/tmpy85vbix3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00c8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00c5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00c5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00c5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy85vbix3                        0x0000557853e1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad00cae6460 __libc_start_main +
    245

    6    tmpy85vbix3                        0x0000557853e1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: Implement me!\n    return (0.0,\
    \ 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphayntvym/tmphayntvym.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8cd171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8cce68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8cce68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8cce677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphayntvym                        0x0000556de828748e <unavailable> + 5262

    5    libc.so.6                          0x00002ad8cd35d460 __libc_start_main +
    245

    6    tmphayntvym                        0x0000556de8287049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj2dso435/tmpj2dso435.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce4c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce4906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce4906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce49057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2dso435                        0x000055c6684e6912 <unavailable> + 6418

    5    libc.so.6                          0x00002adce4dfb460 __libc_start_main +
    245

    6    tmpj2dso435                        0x000055c6684e6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minDiffElements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                minDiffElements = (numbers[i], numbers[j])\n            }\n \
    \       }\n    }\n    return minDiffElements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp43nlii5n/tmp43nlii5n.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e45f01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e45bf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e45bf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e45bf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43nlii5n                        0x0000561ff5a19962 <unavailable> + 6498

    5    libc.so.6                          0x00002b8e460ed460 __libc_start_main +
    245

    6    tmp43nlii5n                        0x0000561ff5a193b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_ii3g_b/tmp7_ii3g_b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ea6568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea625fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea625f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea625e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_ii3g_b                        0x0000561f6fb99912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5ea6754460 __libc_start_main +
    245

    6    tmp7_ii3g_b                        0x0000561f6fb99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_diff_pair = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j\
    \ in (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_diff_pair = (numbers[i], numbers[j])\n            }\n        }\n \
    \   }\n    return min_diff_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpolb0lrhs/tmpolb0lrhs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c4a568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c4a25fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c4a25f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c4a25e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolb0lrhs                        0x00005586b2741962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1c4a754460 __libc_start_main +
    245

    6    tmpolb0lrhs                        0x00005586b27413b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ closest_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff {\n                min_diff =\
    \ diff\n                closest_pair = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2e3dlcp8/tmp2e3dlcp8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae55f556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae55f24db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae55f24d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae55f24c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2e3dlcp8                        0x000055f15b334962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae55f742460 __libc_start_main +
    245

    6    tmp2e3dlcp8                        0x000055f15b3343b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy85vbix3/tmpy85vbix3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00c8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00c5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00c5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00c5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy85vbix3                        0x0000557853e1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad00cae6460 __libc_start_main +
    245

    6    tmpy85vbix3                        0x0000557853e1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_ii3g_b/tmp7_ii3g_b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ea6568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea625fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea625f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea625e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_ii3g_b                        0x0000561f6fb99912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5ea6754460 __libc_start_main +
    245

    6    tmp7_ii3g_b                        0x0000561f6fb99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n       \
    \ for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9styd_p6/tmp9styd_p6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b987509bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9874d92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9874d92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9874d917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9styd_p6                        0x000055b89a063962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9875287460 __libc_start_main +
    245

    6    tmp9styd_p6                        0x000055b89a0633b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min1\
    \ = 0.0\n    var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n\
    \                min2 = numbers[j]\n            }\n        }\n    }\n    return\
    \ (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppld16way/tmppld16way.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82a286c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af829f7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af829f7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af829f7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppld16way                        0x000055f6c5e02962 <unavailable> + 6498

    5    libc.so.6                          0x00002af82a472460 __libc_start_main +
    245

    6    tmppld16way                        0x000055f6c5e023b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpejbu1x8h/tmpejbu1x8h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2e925ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2e8f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2e8f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2e8f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejbu1x8h                        0x0000558851691912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2e944a460 __libc_start_main +
    245

    6    tmpejbu1x8h                        0x0000558851691369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk6krv2ms/tmpk6krv2ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44b33aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44b30a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44b30a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44b30a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6krv2ms                        0x00005650d0da2912 <unavailable> + 6418

    5    libc.so.6                          0x00002b44b3596460 __libc_start_main +
    245

    6    tmpk6krv2ms                        0x00005650d0da2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var result\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                result = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0wm4r8np/tmp0wm4r8np.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c2e049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c2dd40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c2dd40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c2dd3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wm4r8np                        0x000055ecdd77b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1c2e235460 __libc_start_main +
    245

    6    tmp0wm4r8np                        0x000055ecdd77b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n       \
    \     let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnq1oifsr/tmpnq1oifsr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b533549ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5335195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5335195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53351947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq1oifsr                        0x0000555b7e320912 <unavailable> + 6418

    5    libc.so.6                          0x00002b533568a460 __libc_start_main +
    245

    6    tmpnq1oifsr                        0x0000555b7e320369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nchdv1_/tmp7nchdv1_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac15a5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac15a2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac15a2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac15a2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nchdv1_                        0x0000560f890d5912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac15a7e3460 __libc_start_main +
    245

    6    tmp7nchdv1_                        0x0000560f890d5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n       \
    \ for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9styd_p6/tmp9styd_p6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b987509bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9874d92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9874d92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9874d917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9styd_p6                        0x000055b89a063962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9875287460 __libc_start_main +
    245

    6    tmp9styd_p6                        0x000055b89a0633b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortedNumbers = numbers.sorted()\n\
    \    var closest = (sortedNumbers[0], sortedNumbers[1])\n    var closestDiff =\
    \ abs(sortedNumbers[0] - sortedNumbers[1])\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        let diff = abs(sortedNumbers[i] - sortedNumbers[i + 1])\n   \
    \     if diff < closestDiff {\n            closestDiff = diff\n            closest\
    \ = (sortedNumbers[i], sortedNumbers[i + 1])\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (0, 0)\n\
    \    var closest_difference: Double = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvhn1wfq9/tmpvhn1wfq9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a78848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a7853fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a7853f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a7853e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhn1wfq9                        0x000055938e072962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2a78a34460 __libc_start_main +
    245

    6    tmpvhn1wfq9                        0x000055938e0723b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk6krv2ms/tmpk6krv2ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44b33aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44b30a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44b30a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44b30a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6krv2ms                        0x00005650d0da2912 <unavailable> + 6418

    5    libc.so.6                          0x00002b44b3596460 __libc_start_main +
    245

    6    tmpk6krv2ms                        0x00005650d0da2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3nwxosbz/tmp3nwxosbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af686b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68688bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68688b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68688a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nwxosbz                        0x000055cf6ea93912 <unavailable> + 6418

    5    libc.so.6                          0x00002af686d80460 __libc_start_main +
    245

    6    tmp3nwxosbz                        0x000055cf6ea93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortedNumbers = numbers.sorted()\n\
    \    var closest: (Double, Double) = (sortedNumbers[0], sortedNumbers[1])\n  \
    \  var closestDifference = abs(sortedNumbers[0] - sortedNumbers[1])\n    for i\
    \ in 0..<sortedNumbers.count - 1 {\n        let difference = abs(sortedNumbers[i]\
    \ - sortedNumbers[i + 1])\n        if difference < closestDifference {\n     \
    \       closestDifference = difference\n            closest = (sortedNumbers[i],\
    \ sortedNumbers[i + 1])\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff {\n                min_diff =\
    \ diff\n                min_pair = (numbers[i], numbers[j])\n            }\n \
    \       }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnuyra1ze/tmpnuyra1ze.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2764b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2761afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2761af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2761ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuyra1ze                        0x000055750768f962 <unavailable> + 6498

    5    libc.so.6                          0x00002ad2766a4460 __libc_start_main +
    245

    6    tmpnuyra1ze                        0x000055750768f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy85vbix3/tmpy85vbix3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00c8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00c5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00c5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00c5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy85vbix3                        0x0000557853e1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad00cae6460 __libc_start_main +
    245

    6    tmpy85vbix3                        0x0000557853e1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = numbers[0]\n    var max = numbers[0]\n\
    \    for number in numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    return (min, max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwwilwyn6/tmpwwilwyn6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5944b41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5944838b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5944838988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59448377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwilwyn6                        0x000055bcb611064e <unavailable> + 5710

    5    libc.so.6                          0x00002b5944d2d460 __libc_start_main +
    245

    6    tmpwwilwyn6                        0x000055bcb6110209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double)?\n    for i in 0..<numbers.count {\n        for j\
    \ in (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo59kk3c_/tmpo59kk3c_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f74bd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f748cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f748cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f748ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo59kk3c_                        0x000055b13c46e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b3f74dc4460 __libc_start_main +
    245

    6    tmpo59kk3c_                        0x000055b13c46e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let new_diff = abs(numbers[i]\
    \ - numbers[j])\n            if new_diff < diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                diff = new_diff\n            }\n        }\n   \
    \ }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxnjr4vir/tmpxnjr4vir.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f9dabec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f9d7b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f9d7b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f9d7b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnjr4vir                        0x0000556ef3d92912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6f9dcaa460 __libc_start_main +
    245

    6    tmpxnjr4vir                        0x0000556ef3d92369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpejbu1x8h/tmpejbu1x8h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2e925ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2e8f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2e8f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2e8f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejbu1x8h                        0x0000558851691912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad2e944a460 __libc_start_main +
    245

    6    tmpejbu1x8h                        0x0000558851691369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp01ul_1e/tmpp01ul_1e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab8167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab7e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab7e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab7e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp01ul_1e                        0x00005582e2608912 <unavailable> + 6418

    5    libc.so.6                          0x00002abab8353460 __libc_start_main +
    245

    6    tmpp01ul_1e                        0x00005582e2608369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbqwemygk/tmpbqwemygk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b308ae0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b308ab01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b308ab01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b308ab007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqwemygk                        0x000055ad889da912 <unavailable> + 6418

    5    libc.so.6                          0x00002b308aff6460 __libc_start_main +
    245

    6    tmpbqwemygk                        0x000055ad889da369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp95tneja9/tmp95tneja9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fa7811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fa7508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fa7508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fa75077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95tneja9                        0x00005565e2253912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5fa79fd460 __libc_start_main +
    245

    6    tmp95tneja9                        0x00005565e2253369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                result\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppdd6xkil/tmppdd6xkil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b328f5a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b328f29fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b328f29f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b328f29e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdd6xkil                        0x0000555b3ec2f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b328f794460 __libc_start_main +
    245

    6    tmppdd6xkil                        0x0000555b3ec2f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy85vbix3/tmpy85vbix3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00c8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00c5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00c5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00c5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy85vbix3                        0x0000557853e1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad00cae6460 __libc_start_main +
    245

    6    tmpy85vbix3                        0x0000557853e1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let newDistance = abs(numbers[i]\
    \ - numbers[j])\n            if newDistance < distance {\n                distance\
    \ = newDistance\n                closest = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk8u6feze/tmpk8u6feze.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b658739bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6587092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6587092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65870917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8u6feze                        0x0000558143dc3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6587587460 __libc_start_main +
    245

    6    tmpk8u6feze                        0x0000558143dc3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff {\n                min_diff = diff\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6rhwb65o/tmp6rhwb65o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434ebc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b434e8b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b434e8b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b434e8b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rhwb65o                        0x000055a27b584962 <unavailable> + 6498

    5    libc.so.6                          0x00002b434edad460 __libc_start_main +
    245

    6    tmp6rhwb65o                        0x000055a27b5843b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcliizotr/tmpcliizotr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af607724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af60741bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af60741b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af60741a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcliizotr                        0x000055f0f2587912 <unavailable> + 6418

    5    libc.so.6                          0x00002af607910460 __libc_start_main +
    245

    6    tmpcliizotr                        0x000055f0f2587369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minDiffElements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minDiffElements = (numbers[i], numbers[j])\n            }\n        }\n \
    \   }\n    return minDiffElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_q7c_d5s/tmp_q7c_d5s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa1e49bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa1e192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa1e192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa1e1917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q7c_d5s                        0x00005578cdd69962 <unavailable> + 6498

    5    libc.so.6                          0x00002afa1e687460 __libc_start_main +
    245

    6    tmp_q7c_d5s                        0x00005578cdd693b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_elements = (numbers[i],\
    \ numbers[j])\n                closest_difference = difference\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphboqvpmd/tmphboqvpmd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34821e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3481ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3481ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3481ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphboqvpmd                        0x00005616668c3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34823cc460 __libc_start_main +
    245

    6    tmphboqvpmd                        0x00005616668c3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var smallest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       closest_elements = (numbers[i], numbers[j])\n                smallest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr5t0pmxp/tmpr5t0pmxp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27fd29dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27fcf94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27fcf94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27fcf937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5t0pmxp                        0x0000557111e98912 <unavailable> + 6418

    5    libc.so.6                          0x00002b27fd489460 __libc_start_main +
    245

    6    tmpr5t0pmxp                        0x0000557111e98369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy85vbix3/tmpy85vbix3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad00c8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad00c5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad00c5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad00c5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy85vbix3                        0x0000557853e1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad00cae6460 __libc_start_main +
    245

    6    tmpy85vbix3                        0x0000557853e1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuw_ys0nl/tmpuw_ys0nl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac4a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac4736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac4736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac47357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuw_ys0nl                        0x00005589e0c5f962 <unavailable> + 6498

    5    libc.so.6                          0x00002b6ac4c2b460 __libc_start_main +
    245

    6    tmpuw_ys0nl                        0x00005589e0c5f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nchdv1_/tmp7nchdv1_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac15a5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac15a2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac15a2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac15a2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nchdv1_                        0x0000560f890d5912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac15a7e3460 __libc_start_main +
    245

    6    tmp7nchdv1_                        0x0000560f890d5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmph27f2uib/tmph27f2uib.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5bf181c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5bee78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5bee78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5bee777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph27f2uib                        0x000055a4b745b912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab5bf36d460 __libc_start_main +
    245

    6    tmph27f2uib                        0x000055a4b745b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_distance = Double.infinity\n  \
    \  var min_distance_elements = (Double.infinity, Double.infinity)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance\
    \ {\n                min_distance = distance\n                min_distance_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_distance_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqihftbfz/tmpqihftbfz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19ae05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19add53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19add53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19add527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqihftbfz                        0x000055b15e25d962 <unavailable> + 6498

    5    libc.so.6                          0x00002b19ae248460 __libc_start_main +
    245

    6    tmpqihftbfz                        0x000055b15e25d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff {\n                min_diff =\
    \ diff\n                closest_elements = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpptdf1ggk/tmpptdf1ggk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaddcab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaddc7acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaddc7ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaddc7ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptdf1ggk                        0x000055dd58b0c962 <unavailable> + 6498

    5    libc.so.6                          0x00002aaddcca1460 __libc_start_main +
    245

    6    tmpptdf1ggk                        0x000055dd58b0c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa_dm4jxu/tmpa_dm4jxu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afae220fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afae1f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afae1f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afae1f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_dm4jxu                        0x00005564eb883962 <unavailable> + 6498

    5    libc.so.6                          0x00002afae23fb460 __libc_start_main +
    245

    6    tmpa_dm4jxu                        0x00005564eb8833b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzpwpcavf/tmpzpwpcavf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf044eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf041e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf041e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf041e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpwpcavf                        0x0000560ab1626962 <unavailable> + 6498

    5    libc.so.6                          0x00002abf046da460 __libc_start_main +
    245

    6    tmpzpwpcavf                        0x0000560ab16263b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmps719qp7w/tmps719qp7w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4efdd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4efacdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4efacd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4efacc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps719qp7w                        0x00005643b8d70912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba4effc2460 __libc_start_main +
    245

    6    tmps719qp7w                        0x00005643b8d70369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpagvl14k4/tmpagvl14k4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c93399c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c93090b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c93090988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9308f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagvl14k4                        0x0000558552a3b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1c93585460 __libc_start_main +
    245

    6    tmpagvl14k4                        0x0000558552a3b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_distance = Double.infinity\n  \
    \  var min_distance_numbers = (0.0, 0.0)\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                min_distance_numbers = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_distance_numbers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjxcxzhto/tmpjxcxzhto.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23aaba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23aa89fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23aa89f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23aa89e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxcxzhto                        0x000055e1d1dd0962 <unavailable> + 6498

    5    libc.so.6                          0x00002b23aad94460 __libc_start_main +
    245

    6    tmpjxcxzhto                        0x000055e1d1dd03b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var smallest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < smallest_difference {\n         \
    \       closest_elements = (numbers[i], numbers[j])\n                smallest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr5t0pmxp/tmpr5t0pmxp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27fd29dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27fcf94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27fcf94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27fcf937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5t0pmxp                        0x0000557111e98912 <unavailable> + 6418

    5    libc.so.6                          0x00002b27fd489460 __libc_start_main +
    245

    6    tmpr5t0pmxp                        0x0000557111e98369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3_ukaqtw/tmp3_ukaqtw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11ef9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11ec95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11ec95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11ec947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ukaqtw                        0x000055daf0d47912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab11f18a460 __libc_start_main +
    245

    6    tmp3_ukaqtw                        0x000055daf0d47369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff {\n                min_diff = diff\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6rhwb65o/tmp6rhwb65o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434ebc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b434e8b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b434e8b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b434e8b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rhwb65o                        0x000055a27b584962 <unavailable> + 6498

    5    libc.so.6                          0x00002b434edad460 __libc_start_main +
    245

    6    tmp6rhwb65o                        0x000055a27b5843b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_yf928a/tmp7_yf928a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e5616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e530db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e530d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e530c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_yf928a                        0x000055f34aae0912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae8e5802460 __libc_start_main +
    245

    6    tmp7_yf928a                        0x000055f34aae0369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpismri4p5/tmpismri4p5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b576378eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b576378e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b576378d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpismri4p5                        0x000055f44ba04962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5763c83460 __libc_start_main +
    245

    6    tmpismri4p5                        0x000055f44ba043b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmptrsmp712/tmptrsmp712.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac332c12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac332909b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac332909988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3329087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrsmp712                        0x000055d295e3f912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac332dfe460 __libc_start_main +
    245

    6    tmptrsmp712                        0x000055d295e3f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_pair = (numbers[i], numbers[j])\n                closest_distance =\
    \ distance\n            }\n        }\n    }\n    return closest_pair\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpg7vqox0r/tmpg7vqox0r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7310753c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b731044ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b731044a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73104497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7vqox0r                        0x000055dc13026912 <unavailable> + 6418

    5    libc.so.6                          0x00002b731093f460 __libc_start_main +
    245

    6    tmpg7vqox0r                        0x000055dc13026369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo68e69k3/tmpo68e69k3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fc91a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fc8e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fc8e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fc8e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo68e69k3                        0x000055eb63b60912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6fc9393460 __libc_start_main +
    245

    6    tmpo68e69k3                        0x000055eb63b60369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9e3npna/tmpv9e3npna.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b8371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b8068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b8068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b80677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9e3npna                        0x0000562cd2fa3912 <unavailable> + 6418

    5    libc.so.6                          0x00002ad6b855d460 __libc_start_main +
    245

    6    tmpv9e3npna                        0x0000562cd2fa3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj1yvj7ms/tmpj1yvj7ms.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f849ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f8195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f8195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f81947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1yvj7ms                        0x000055c74dc0a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b39f868a460 __libc_start_main +
    245

    6    tmpj1yvj7ms                        0x000055c74dc0a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpofitm167/tmpofitm167.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b7be40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b7bb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b7bb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b7bb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofitm167                        0x0000558494f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b7c02c460 __libc_start_main +
    245

    6    tmpofitm167                        0x0000558494f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5s7eki44/tmp5s7eki44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af581918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58160fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58160f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58160e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s7eki44                        0x0000559ec7ad4912 <unavailable> + 6418

    5    libc.so.6                          0x00002af581b04460 __libc_start_main +
    245

    6    tmp5s7eki44                        0x0000559ec7ad4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_distance = Double.infinity\n  \
    \  var min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n                min_pair = (numbers[i], numbers[j])\n          \
    \  }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7ocpzle2/tmp7ocpzle2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaebf91fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaebf616b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaebf616988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaebf6157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ocpzle2                        0x00005559b68ca962 <unavailable> + 6498

    5    libc.so.6                          0x00002aaebfb0b460 __libc_start_main +
    245

    6    tmp7ocpzle2                        0x00005559b68ca3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013554
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprj0v0kil/tmprj0v0kil.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca18a2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca18722b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca18722988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca187217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprj0v0kil                        0x000055c844a71912 <unavailable> + 6418

    5    libc.so.6                          0x00002aca18c17460 __libc_start_main +
    245

    6    tmprj0v0kil                        0x000055c844a71369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013553
