language: swift
name: HumanEval_159_eat
results:
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if left + eaten >= need {\n        eaten += need\n\
    \        left -= need\n    } else {\n        eaten += left\n        left = 0\n\
    \    }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpsue1bcvn/tmpsue1bcvn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9568fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9568ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9568ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9568ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsue1bcvn                        0x000055e95a050873 <unavailable> + 6259

    5    libc.so.6                          0x00002b9569199460 __libc_start_main +
    245

    6    tmpsue1bcvn                        0x000055e95a04ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpckrbdpr8/tmpckrbdpr8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af821f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af821c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af821c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af821c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckrbdpr8                        0x000055aa0e3ef444 <unavailable> + 5188

    5    libc.so.6                          0x00002af82214e460 __libc_start_main +
    245

    6    tmpckrbdpr8                        0x000055aa0e3ef089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    var result = [Int]()\n    if need > remaining {\n\
    \        total += remaining\n        left = 0\n    } else {\n        total +=\
    \ need\n        left -= need\n    }\n    result.append(total)\n    result.append(left)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >=\
    \ need {\n        return [number, remaining]\n    }\n    if remaining >= need\
    \ - number {\n        return [need, remaining - (need - number)]\n    }\n    return\
    \ [remaining + number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmp7cu2_0nk/tmp7cu2_0nk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a2741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10a2438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10a2438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10a24377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cu2_0nk                        0x00005587a5a0b384 <unavailable> + 4996

    5    libc.so.6                          0x00002b10a292d460 __libc_start_main +
    245

    6    tmp7cu2_0nk                        0x00005587a5a0afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total >= need ? need : total, total >= need ? total\
    \ - need : 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9pea9txo/tmp9pea9txo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9b3524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9b321bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9b321b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9b321a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pea9txo                        0x0000563825341384 <unavailable> + 4996

    5    libc.so.6                          0x00002ac9b3710460 __libc_start_main +
    245

    6    tmp9pea9txo                        0x0000563825340fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = min(total, need)\n    let left = total - eaten\n\
    \    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmptwfuml8l/tmptwfuml8l.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c8416cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c83e63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c83e63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c83e627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwfuml8l                        0x00005579bc3b4424 <unavailable> + 5156

    5    libc.so.6                          0x00002b4c84358460 __libc_start_main +
    245

    6    tmptwfuml8l                        0x00005579bc3b4069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if left >= need {\n        total += need\n    \
    \    left -= need\n    } else {\n        total += left\n        left = 0\n   \
    \ }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if remaining >= need {\n        result.append(number + need)\n\
    \        result.append(remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result: [Int]\
    \ = []\n    if number + remaining >= need {\n        result.append(need)\n   \
    \     result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmprxrgxivr/tmprxrgxivr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76958cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76955c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76955c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76955c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxrgxivr                        0x000056339ed253e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b7695ab7460 __libc_start_main +
    245

    6    tmprxrgxivr                        0x000056339ed25029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var numberOfCarrots = number\n    var numberOfCarrotsNeeded = need\n\
    \    var numberOfCarrotsRemaining = remaining\n    \n    if numberOfCarrotsRemaining\
    \ > numberOfCarrotsNeeded {\n        numberOfCarrots += numberOfCarrotsNeeded\n\
    \        numberOfCarrotsRemaining -= numberOfCarrotsNeeded\n    } else {\n   \
    \     numberOfCarrots += numberOfCarrotsRemaining\n        numberOfCarrotsRemaining\
    \ = 0\n    }\n    \n    result.append(numberOfCarrots)\n    result.append(numberOfCarrotsRemaining)\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    if total >= need {\n        total = need\n    }\n    return\
    \ [total, remaining - (total - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp37maht8x/tmp37maht8x.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b087db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37maht8x                        0x00005560601ee384 <unavailable> + 4996

    5    libc.so.6                          0x00002b087dd5b460 __libc_start_main +
    245

    6    tmp37maht8x                        0x00005560601edfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if left + number >= need {\n        total += need\n\
    \        left -= need\n    } else {\n        total += left\n        left = 0\n\
    \    }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmplrr615sr/tmplrr615sr.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401e369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401e060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401e060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401e05f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplrr615sr                        0x000055de6d25c873 <unavailable> + 6259

    5    libc.so.6                          0x00002b401e555460 __libc_start_main +
    245

    6    tmplrr615sr                        0x000055de6d25bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    var left = 0\n    if total < need {\n        total = number\
    \ + remaining\n        left = 0\n    } else {\n        total = number + need\n\
    \        left = remaining - need\n    }\n    return [total, left]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp3nc8z9yb/tmp3nc8z9yb.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b443b0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b443add1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b443add1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b443add07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nc8z9yb                        0x0000557355744873 <unavailable> + 6259

    5    libc.so.6                          0x00002b443b2c6460 __libc_start_main +
    245

    6    tmp3nc8z9yb                        0x0000557355743fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpckrbdpr8/tmpckrbdpr8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af821f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af821c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af821c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af821c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckrbdpr8                        0x000055aa0e3ef444 <unavailable> + 5188

    5    libc.so.6                          0x00002af82214e460 __libc_start_main +
    245

    6    tmpckrbdpr8                        0x000055aa0e3ef089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    if total >= need {\n        total = need\n    }\n    return\
    \ [total, remaining - (need - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpq9_j9rtx/tmpq9_j9rtx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cc7e5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cc7b56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cc7b56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cc7b557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9_j9rtx                        0x0000556f71e43384 <unavailable> + 4996

    5    libc.so.6                          0x00002b2cc804b460 __libc_start_main +
    245

    6    tmpq9_j9rtx                        0x0000556f71e42fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total - need\n    return [eaten, total - eaten]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpt_thtpox/tmpt_thtpox.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1939da7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1939a9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1939a9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1939a9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_thtpox                        0x000055b030fed384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1939f93460 __libc_start_main +
    245

    6    tmpt_thtpox                        0x000055b030fecfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = min(total, need)\n    let left = max(total - need,\
    \ 0)\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpmfar0f3x/tmpmfar0f3x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac651bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6518a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6518a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6518a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfar0f3x                        0x0000565462457474 <unavailable> + 5236

    5    libc.so.6                          0x00002ac651d98460 __libc_start_main +
    245

    6    tmpmfar0f3x                        0x00005654624570b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var number = number\n    var need = need\n    var remaining = remaining\n\
    \    if number < 0 || need < 0 || remaining < 0 {\n        return result\n   \
    \ }\n    if number > 1000 || need > 1000 || remaining > 1000 {\n        return\
    \ result\n    }\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpoaa0_nh9/tmpoaa0_nh9.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a072e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a06fd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a06fd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a06fd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoaa0_nh9                        0x000055cf8cf4f444 <unavailable> + 5188

    5    libc.so.6                          0x00002b8a074cc460 __libc_start_main +
    245

    6    tmpoaa0_nh9                        0x000055cf8cf4f089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number < 0 || need < 0 || remaining < 0 {\n        return result\n\
    \    }\n    if number > 1000 || need > 1000 || remaining > 1000 {\n        return\
    \ result\n    }\n    if remaining >= need {\n        result.append(number + need)\n\
    \        result.append(remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number < 0 || need < 0 || remaining < 0 {\n        return result\n\
    \    }\n    if number > 1000 || need > 1000 || remaining > 1000 {\n        return\
    \ result\n    }\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmptgjanoyz/tmptgjanoyz.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b465653dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4656234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4656234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46562337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgjanoyz                        0x000055cdcd1db444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4656729460 __libc_start_main +
    245

    6    tmptgjanoyz                        0x000055cdcd1db089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpckrbdpr8/tmpckrbdpr8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af821f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af821c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af821c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af821c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckrbdpr8                        0x000055aa0e3ef444 <unavailable> + 5188

    5    libc.so.6                          0x00002af82214e460 __libc_start_main +
    245

    6    tmpckrbdpr8                        0x000055aa0e3ef089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number >= need {\n        result.append(number)\n        result.append(remaining)\n\
    \    } else {\n        if remaining >= need - number {\n            result.append(need)\n\
    \            result.append(remaining - (need - number))\n        } else {\n  \
    \          result.append(remaining + number)\n            result.append(0)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpl6pxaip4/tmpl6pxaip4.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2bdc01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2bd8f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2bd8f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2bd8f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6pxaip4                        0x000055a730319444 <unavailable> + 5188

    5    libc.so.6                          0x00002ac2bdded460 __libc_start_main +
    245

    6    tmpl6pxaip4                        0x000055a730319089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining < need {\n        result.append(number +\
    \ remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpqszm1mo6/tmpqszm1mo6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b808f391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b808f088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b808f088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b808f0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqszm1mo6                        0x00005639a1baa444 <unavailable> + 5188

    5    libc.so.6                          0x00002b808f57d460 __libc_start_main +
    245

    6    tmpqszm1mo6                        0x00005639a1baa089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpckrbdpr8/tmpckrbdpr8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af821f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af821c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af821c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af821c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckrbdpr8                        0x000055aa0e3ef444 <unavailable> + 5188

    5    libc.so.6                          0x00002af82214e460 __libc_start_main +
    245

    6    tmpckrbdpr8                        0x000055aa0e3ef089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if left >= need {\n        eaten += need\n    \
    \    left -= need\n    } else {\n        eaten += left\n        left = 0\n   \
    \ }\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result: [Int]\
    \ = []\n    let total = number + remaining\n    if total >= need {\n        result.append(need)\n\
    \        result.append(total - need)\n    } else {\n        result.append(total)\n\
    \        result.append(0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpnjqfvj_v/tmpnjqfvj_v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b556ca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b556c75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b556c75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b556c75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjqfvj_v                        0x0000555bb70963e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b556cc54460 __libc_start_main +
    245

    6    tmpnjqfvj_v                        0x0000555bb7096029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total >= need ? need : total, total >= need ? total\
    \ - need : 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp9pea9txo/tmp9pea9txo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9b3524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9b321bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9b321b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9b321a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pea9txo                        0x0000563825341384 <unavailable> + 4996

    5    libc.so.6                          0x00002ac9b3710460 __libc_start_main +
    245

    6    tmp9pea9txo                        0x0000563825340fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpodhds56n/tmpodhds56n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcacffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcaccf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcaccf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcaccf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodhds56n                        0x0000556fbfc9c384 <unavailable> + 4996

    5    libc.so.6                          0x00002adcad1e6460 __libc_start_main +
    245

    6    tmpodhds56n                        0x0000556fbfc9bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpodhds56n/tmpodhds56n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcacffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcaccf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcaccf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcaccf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodhds56n                        0x0000556fbfc9c384 <unavailable> + 4996

    5    libc.so.6                          0x00002adcad1e6460 __libc_start_main +
    245

    6    tmpodhds56n                        0x0000556fbfc9bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpodhds56n/tmpodhds56n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcacffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcaccf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcaccf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcaccf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodhds56n                        0x0000556fbfc9c384 <unavailable> + 4996

    5    libc.so.6                          0x00002adcad1e6460 __libc_start_main +
    245

    6    tmpodhds56n                        0x0000556fbfc9bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = min(total, need)\n    let left = max(total - need,\
    \ 0)\n    return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpmfar0f3x/tmpmfar0f3x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac651bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6518a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6518a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6518a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfar0f3x                        0x0000565462457474 <unavailable> + 5236

    5    libc.so.6                          0x00002ac651d98460 __libc_start_main +
    245

    6    tmpmfar0f3x                        0x00005654624570b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    var left = 0\n    if total >= need {\n        total = need\n\
    \        left = total - need\n    }\n    return [total, left]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpfs_r1bsk/tmpfs_r1bsk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f1d08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f19ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f19ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f19fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfs_r1bsk                        0x000056224f1c7384 <unavailable> + 4996

    5    libc.so.6                          0x00002b40f1ef4460 __libc_start_main +
    245

    6    tmpfs_r1bsk                        0x000056224f1c6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    if total >= need {\n        total = need\n    }\n    return\
    \ [total, remaining - (total - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp37maht8x/tmp37maht8x.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b087db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37maht8x                        0x00005560601ee384 <unavailable> + 4996

    5    libc.so.6                          0x00002b087dd5b460 __libc_start_main +
    245

    6    tmp37maht8x                        0x00005560601edfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number < need {\n        result[0] += min(need -\
    \ number, remaining)\n        result[1] -= min(need - number, remaining)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmp_zu0okdy/tmp_zu0okdy.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ccd17fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ccce76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ccce76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ccce757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zu0okdy                        0x00005598e3507474 <unavailable> + 5236

    5    libc.so.6                          0x00002b0ccd36b460 __libc_start_main +
    245

    6    tmp_zu0okdy                        0x00005598e35070b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >=\
    \ need {\n        return [number, remaining]\n    }\n    let total = number +\
    \ remaining\n    if total >= need {\n        return [need, total - need]\n   \
    \ }\n    return [total, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpd958v39f/tmpd958v39f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeb5374c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeb506bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeb506b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeb506a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd958v39f                        0x0000564ba38af384 <unavailable> + 4996

    5    libc.so.6                          0x00002aeeb5560460 __libc_start_main +
    245

    6    tmpd958v39f                        0x0000564ba38aefc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var number =\
    \ number\n    var remaining = remaining\n    while number < need && remaining\
    \ > 0 {\n        number += 1\n        remaining -= 1\n    }\n    return [number,\
    \ remaining]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpt4cr6tqv/tmpt4cr6tqv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac2a944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac2a63bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac2a63b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac2a63a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4cr6tqv                        0x0000562a154d1384 <unavailable> + 4996

    5    libc.so.6                          0x00002aac2ab30460 __libc_start_main +
    245

    6    tmpt4cr6tqv                        0x0000562a154d0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total - need]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2xn05m6m/tmp2xn05m6m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad936974c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93666bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93666b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93666a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xn05m6m                        0x000056187c81b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ad936b60460 __libc_start_main +
    245

    6    tmp2xn05m6m                        0x000056187c81afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var number =\
    \ number\n    var remaining = remaining\n    var result = [Int]()\n    if number\
    \ + remaining < need {\n        result.append(number + remaining)\n        result.append(0)\n\
    \    } else {\n        result.append(need)\n        result.append(remaining -\
    \ (need - number))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz72v33ew/tmpz72v33ew.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac0103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afabfdfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afabfdfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afabfdf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz72v33ew                        0x000055784180c444 <unavailable> + 5188

    5    libc.so.6                          0x00002afac02ef460 __libc_start_main +
    245

    6    tmpz72v33ew                        0x000055784180c089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpodhds56n/tmpodhds56n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcacffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcaccf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcaccf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcaccf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodhds56n                        0x0000556fbfc9c384 <unavailable> + 4996

    5    libc.so.6                          0x00002adcad1e6460 __libc_start_main +
    245

    6    tmpodhds56n                        0x0000556fbfc9bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    if number >=\
    \ need {\n        return [number, remaining]\n    }\n    if remaining + number\
    \ >= need {\n        return [need, remaining + number - need]\n    }\n    return\
    \ [remaining + number, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpha9ppon3/tmpha9ppon3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b860d735c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b860d42cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b860d42c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b860d42b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpha9ppon3                        0x000055ea0d70a384 <unavailable> + 4996

    5    libc.so.6                          0x00002b860d921460 __libc_start_main +
    245

    6    tmpha9ppon3                        0x000055ea0d709fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let result = total - need\n    return result < 0 ? [total,\
    \ 0] : [need, result]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpukmukqfe/tmpukmukqfe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29c7487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29c717eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29c717e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29c717d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukmukqfe                        0x00005591a60a7384 <unavailable> + 4996

    5    libc.so.6                          0x00002b29c7673460 __libc_start_main +
    245

    6    tmpukmukqfe                        0x00005591a60a6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var remain = remaining\n    if number < need {\n        total += remain\n\
    \        remain = 0\n    } else {\n        remain -= need\n    }\n    return [total,\
    \ remain]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpgv5znasp/tmpgv5znasp.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2184bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2181b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2181b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2181b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgv5znasp                        0x00005598082eb384 <unavailable> + 4996

    5    libc.so.6                          0x00002ba2186a6460 __libc_start_main +
    245

    6    tmpgv5znasp                        0x00005598082eafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var left = remaining\n    if number < need {\n        eaten += min(need -\
    \ number, remaining)\n        left -= min(need - number, remaining)\n    }\n \
    \   return [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpt4jbk4gh/tmpt4jbk4gh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2d2c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2cfbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2cfba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2cfb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4jbk4gh                        0x00005588cc9b3424 <unavailable> + 5156

    5    libc.so.6                          0x00002b7c2d4af460 __libc_start_main +
    245

    6    tmpt4jbk4gh                        0x00005588cc9b3069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total - (need - total), total - need]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpd7fea7g8/tmpd7fea7g8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0098b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0098886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0098886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00988857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7fea7g8                        0x0000563eab9aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b0098d7b460 __libc_start_main +
    245

    6    tmpd7fea7g8                        0x0000563eab9a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return total >= need ? [need, total - need] : [total, 0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpcyw961l7/tmpcyw961l7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3511e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3511b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3511b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3511b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyw961l7                        0x000055df671b7384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3512079460 __libc_start_main +
    245

    6    tmpcyw961l7                        0x000055df671b6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    let total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpx5rt97a0/tmpx5rt97a0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a597dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a594d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a594d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a594d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5rt97a0                        0x00005641b9f29444 <unavailable> + 5188

    5    libc.so.6                          0x00002b6a599ca460 __libc_start_main +
    245

    6    tmpx5rt97a0                        0x00005641b9f29089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpmi8s49a7/tmpmi8s49a7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59122edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5911fe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5911fe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5911fe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmi8s49a7                        0x0000563a4f521444 <unavailable> + 5188

    5    libc.so.6                          0x00002b59124d9460 __libc_start_main +
    245

    6    tmpmi8s49a7                        0x0000563a4f521089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eat = total > need ? need : total\n    return [eat, total\
    \ - eat]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmptfzkfimk/tmptfzkfimk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba4d4fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba4d1f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba4d1f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba4d1f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfzkfimk                        0x0000561de795d384 <unavailable> + 4996

    5    libc.so.6                          0x00002aba4d6e7460 __libc_start_main +
    245

    6    tmptfzkfimk                        0x0000561de795cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013922
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if number < need {\n        if remaining >= need\
    \ - number {\n            total += need - number\n            left -= need - number\n\
    \        } else {\n            total += remaining\n            left = 0\n    \
    \    }\n    }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpi16bgz8t/tmpi16bgz8t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e00aadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e007a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e007a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e007a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi16bgz8t                        0x00005588e2475384 <unavailable> + 4996

    5    libc.so.6                          0x00002b5e00c99460 __libc_start_main +
    245

    6    tmpi16bgz8t                        0x00005588e2474fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining >= need {\n        result[0]\
    \ = need\n        result[1] = remaining - (need - number)\n    } else {\n    \
    \    result[0] = number + remaining\n        result[1] = 0\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp_rvkjnyg/tmp_rvkjnyg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee37dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee37abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee37abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee37abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rvkjnyg                        0x0000562af4b563e4 <unavailable> + 5092

    5    libc.so.6                          0x00002aee37fb2460 __libc_start_main +
    245

    6    tmp_rvkjnyg                        0x0000562af4b56029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if left >= need {\n        total += need\n    \
    \    left -= need\n    } else {\n        total += left\n        left = 0\n   \
    \ }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten = number\n\
    \    var remaining = remaining\n    while eaten < need && remaining > 0 {\n  \
    \      eaten += 1\n        remaining -= 1\n    }\n    return [eaten, remaining]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpedkr10lz/tmpedkr10lz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9075380c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9075077b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9075077988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90750767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedkr10lz                        0x00005622ee4f9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b907556c460 __libc_start_main +
    245

    6    tmpedkr10lz                        0x00005622ee4f8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013922
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let left = total - need\n    return left < 0 ? [total, 0] :\
    \ [need, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpm5cq4jb4/tmpm5cq4jb4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b188040ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1880105b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1880105988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18801047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5cq4jb4                        0x000055daef565384 <unavailable> + 4996

    5    libc.so.6                          0x00002b18805fa460 __libc_start_main +
    245

    6    tmpm5cq4jb4                        0x000055daef564fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013922
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpmi8s49a7/tmpmi8s49a7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59122edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5911fe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5911fe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5911fe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmi8s49a7                        0x0000563a4f521444 <unavailable> + 5188

    5    libc.so.6                          0x00002b59124d9460 __libc_start_main +
    245

    6    tmpmi8s49a7                        0x0000563a4f521089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\
    \ + remaining\n    if total >= need {\n        total = need\n    }\n    return\
    \ [total, remaining - (total - number)]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp37maht8x/tmp37maht8x.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b087db6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087d866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087d866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087d8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37maht8x                        0x00005560601ee384 <unavailable> + 4996

    5    libc.so.6                          0x00002b087dd5b460 __libc_start_main +
    245

    6    tmp37maht8x                        0x00005560601edfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [number, remaining]\n    if number + remaining < need {\n        result[0] =\
    \ number + remaining\n        result[1] = 0\n    } else {\n        result[0] =\
    \ need\n        result[1] = remaining - (need - number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpjzosnmkd/tmpjzosnmkd.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b595e277c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b595df6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b595df6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b595df6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzosnmkd                        0x000055fcdb76d3e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b595e463460 __libc_start_main +
    245

    6    tmpjzosnmkd                        0x000055fcdb76d029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total < need {\n        return [total, 0]\n    } else {\n\
    \        return [need, total - need]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp1i4gupyl/tmp1i4gupyl.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab51efa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab51eca0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab51eca0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab51ec9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1i4gupyl                        0x0000560d117c2384 <unavailable> + 4996

    5    libc.so.6                          0x00002ab51f195460 __libc_start_main +
    245

    6    tmp1i4gupyl                        0x0000560d117c1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    if total >= need {\n        return [need, total - need]\n \
    \   } else {\n        return [total, 0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp92cxyi7a/tmp92cxyi7a.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58084b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58081a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58081a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58081a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92cxyi7a                        0x000055903e706384 <unavailable> + 4996

    5    libc.so.6                          0x00002b580869d460 __libc_start_main +
    245

    6    tmp92cxyi7a                        0x000055903e705fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let eaten = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [eaten, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number >= need {\n        result.append(number)\n        result.append(remaining)\n\
    \    } else {\n        if number + remaining >= need {\n            result.append(need)\n\
    \            result.append(remaining - (need - number))\n        } else {\n  \
    \          result.append(number + remaining)\n            result.append(0)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpfkq8vbup/tmpfkq8vbup.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba641931c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba641628b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba641628988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6416277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkq8vbup                        0x00005567721a6444 <unavailable> + 5188

    5    libc.so.6                          0x00002ba641b1d460 __libc_start_main +
    245

    6    tmpfkq8vbup                        0x00005567721a6089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var carrots =\
    \ number\n    var left = remaining\n    while carrots < need && left > 0 {\n \
    \       carrots += 1\n        left -= 1\n    }\n    return [carrots, left]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpvg7l_rl5/tmpvg7l_rl5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b723e384c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b723e07bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b723e07b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b723e07a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg7l_rl5                        0x00005565048f9384 <unavailable> + 4996

    5    libc.so.6                          0x00002b723e570460 __libc_start_main +
    245

    6    tmpvg7l_rl5                        0x00005565048f8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013922
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let carrots = total - need\n    return carrots >= 0 ? [need,\
    \ carrots] : [total, 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpepno2616/tmpepno2616.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b338097cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3380673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3380673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33806727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepno2616                        0x000055d4190d4384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3380b68460 __libc_start_main +
    245

    6    tmpepno2616                        0x000055d4190d3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total - need]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2xn05m6m/tmp2xn05m6m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad936974c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93666bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93666b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93666a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xn05m6m                        0x000056187c81b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ad936b60460 __libc_start_main +
    245

    6    tmp2xn05m6m                        0x000056187c81afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if need > remaining {\n        total += remaining\n\
    \        left = 0\n    } else {\n        total += need\n        left -= need\n\
    \    }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    var total = number + remaining\n    if total >= need {\n      \
    \  result.append(need)\n        result.append(total - need)\n    } else {\n  \
    \      result.append(total)\n        result.append(0)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) == [11,\
    \ 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
    \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
    \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
    \ 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpckrbdpr8/tmpckrbdpr8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af821f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af821c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af821c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af821c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckrbdpr8                        0x000055aa0e3ef444 <unavailable> + 5188

    5    libc.so.6                          0x00002af82214e460 __libc_start_main +
    245

    6    tmpckrbdpr8                        0x000055aa0e3ef089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var result =\
    \ [Int]()\n    if number >= need {\n        result.append(number)\n        result.append(remaining)\n\
    \    } else {\n        if remaining >= need - number {\n            result.append(need)\n\
    \            result.append(remaining - (need - number))\n        } else {\n  \
    \          result.append(number + remaining)\n            result.append(0)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp5u_f09bz/tmp5u_f09bz.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca4d43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca4a3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca4a3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca4a397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5u_f09bz                        0x00005633a1e8d444 <unavailable> + 5188

    5    libc.so.6                          0x00002b4ca4f2f460 __libc_start_main +
    245

    6    tmp5u_f09bz                        0x00005633a1e8d089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013921
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let left = total - need\n    return [total, left < 0 ? 0 :\
    \ left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need: 6,\
    \ remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) ==\
    \ [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpbymsmacj/tmpbymsmacj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d99efdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d99bf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d99bf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d99bf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbymsmacj                        0x0000555896d31384 <unavailable> + 4996

    5    libc.so.6                          0x00002b9d9a0e9460 __libc_start_main +
    245

    6    tmpbymsmacj                        0x0000555896d30fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    return [total, total - need]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmp2xn05m6m/tmp2xn05m6m.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad936974c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93666bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93666b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93666a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xn05m6m                        0x000056187c81b384 <unavailable> + 4996

    5    libc.so.6                          0x00002ad936b60460 __libc_start_main +
    245

    6    tmp2xn05m6m                        0x000056187c81afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var carrots =\
    \ number\n    var remainingCarrots = remaining\n    while carrots < need && remainingCarrots\
    \ > 0 {\n        carrots += 1\n        remainingCarrots -= 1\n    }\n    return\
    \ [carrots, remainingCarrots]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmplhxasn0s/tmplhxasn0s.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3632f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3632c6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3632c6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3632c6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhxasn0s                        0x000055f5d2785384 <unavailable> + 4996

    5    libc.so.6                          0x00002b3633160460 __libc_start_main +
    245

    6    tmplhxasn0s                        0x000055f5d2784fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz9wr2vgy/tmpz9wr2vgy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845660ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8456305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8456305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84563047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9wr2vgy                        0x000055d5af66d384 <unavailable> + 4996

    5    libc.so.6                          0x00002b84567fa460 __libc_start_main +
    245

    6    tmpz9wr2vgy                        0x000055d5af66cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpc49pxohe/tmpc49pxohe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1108f26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1108c1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1108c1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1108c1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc49pxohe                        0x0000563f5e5f6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b1109112460 __libc_start_main +
    245

    6    tmpc49pxohe                        0x0000563f5e5f5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var total = number\n\
    \    var left = remaining\n    if number < need {\n        total += left\n   \
    \     left = 0\n    } else {\n        left = remaining - (need - number)\n   \
    \ }\n    return [total, left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(eat(number:\
    \ 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining:\
    \ 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\n\
    assert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4,\
    \ need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining:\
    \ 1) == [5, 0])"
  status: Exception
  stderr: 'tmpeg40mw9x/tmpeg40mw9x.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b934b55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b934b255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b934b255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b934b2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg40mw9x                        0x000055aa36dd6384 <unavailable> + 4996

    5    libc.so.6                          0x00002b934b74a460 __libc_start_main +
    245

    6    tmpeg40mw9x                        0x000055aa36dd5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013825
- exit_code: 0
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    return [number\
    \ + min(need, remaining), max(0, remaining - need)]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(eat(number: 5, need: 6, remaining: 10) == [11, 4])\nassert(eat(number:\
    \ 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number: 1, need: 10, remaining:\
    \ 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining: 5) == [7, 0])\n\
    assert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number: 4,\
    \ need: 5, remaining: 1) == [5, 0])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
- exit_code: -4
  program: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n\
    /// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>>\
    \ eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2,\
    \ need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n\
    /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
    \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
    \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <=\
    \ 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\n\
    func eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(eat(number: 5, need:\
    \ 6, remaining: 10) == [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9)\
    \ == [12, 1])\nassert(eat(number: 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number:\
    \ 2, need: 11, remaining: 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining:\
    \ 7) == [9, 2])\nassert(eat(number: 4, need: 5, remaining: 1) == [5, 0])"
  status: Exception
  stderr: 'tmpz63d2kcu/tmpz63d2kcu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07632cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0762fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0762fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0762fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz63d2kcu                        0x000055d9419aa384 <unavailable> + 4996

    5    libc.so.6                          0x00002b07634b9460 __libc_start_main +
    245

    6    tmpz63d2kcu                        0x000055d9419a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013824
