language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted =\
    \ lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n          \
    \  return a < b\n        }\n        return a.count < b.count\n    }\n    var result:\
    \ [String] = []\n    for i in sorted {\n        if i.count % 2 == 0 {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort(by: {$0.count < $1.count})\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1hl61hi4/tmp1hl61hi4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fde4e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fde1dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fde1da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fde1d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hl61hi4                        0x00005558c2459ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b1fde6cf460 __libc_start_main +
    245

    6    tmp1hl61hi4                        0x00005558c24593e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst2: [String] = []\n    var lst3: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            lst2.append(i)\n        }\n    }\n\
    \    lst2.sort()\n    for i in lst2 {\n        if lst3.contains(i) == false {\n\
    \            lst3.append(i)\n        }\n    }\n    return lst3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7bybd5zp/tmp7bybd5zp.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38ecb4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38ec841b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38ec841988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38ec8407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bybd5zp                        0x000055b1e2faa6db <unavailable> + 9947

    5    libc.so.6                          0x00002b38ecd36460 __libc_start_main +
    245

    6    tmp7bybd5zp                        0x000055b1e2fa94f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3e789dc8/tmp3e789dc8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39e24e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39e21dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39e21da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39e21d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e789dc8                        0x000055af8f7d96cb <unavailable> + 9931

    5    libc.so.6                          0x00002b39e26cf460 __libc_start_main +
    245

    6    tmp3e789dc8                        0x000055af8f7d84e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for str in lst {\n        if str.count % 2 == 0 {\n        \
    \    result.append(str)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgrom6jjh/tmpgrom6jjh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f07f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f07c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f07c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f07c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrom6jjh                        0x000055ebc003c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b7f08138460 __libc_start_main +
    245

    6    tmpgrom6jjh                        0x000055ebc003b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var result: [String] = []\n    var i = 0\n    while i < lst.count {\n   \
    \     if lst[i].count % 2 == 0 {\n            result.append(lst[i])\n        \
    \    lst.remove(at: i)\n        } else {\n            i += 1\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpokoa7ycc/tmpokoa7ycc.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b985c1e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b985bed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b985bed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b985bed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokoa7ycc                        0x000056505823560b <unavailable> + 9739

    5    libc.so.6                          0x00002b985c3cc460 __libc_start_main +
    245

    6    tmpokoa7ycc                        0x0000565058234429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst_sorted = [String]()\n    var lst_sorted_sorted = [String]()\n   \
    \ var lst_sorted_sorted_sorted = [String]()\n    var lst_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted = [String]()\n\
    \    var lst_sorted_sorted_sorted_sorted_sorted_sorted = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = [String]()\n    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqly7afe1.swift:33:9: error: type annotation missing in pattern\n\
    \    var lst_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_s\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824776
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    var dict: [Int: [String]] = [:]\n    for word in lst {\n\
    \        if dict[word.count] == nil {\n            dict[word.count] = [word]\n\
    \        } else {\n            dict[word.count]?.append(word)\n        }\n   \
    \ }\n    for (key, value) in dict {\n        if key % 2 == 0 {\n            result.append(contentsOf:\
    \ value)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppm5pp0al/tmppm5pp0al.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67c2f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67c2c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67c2c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67c2c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppm5pp0al                        0x0000561d18b1897b <unavailable> + 10619

    5    libc.so.6                          0x00002b67c3145460 __libc_start_main +
    245

    6    tmppm5pp0al                        0x0000561d18b17799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpz7hz8wd5/tmpz7hz8wd5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76bcf8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76bcc85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76bcc85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76bcc847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7hz8wd5                        0x0000558e289ca53b <unavailable> + 9531

    5    libc.so.6                          0x00002b76bd17a460 __libc_start_main +
    245

    6    tmpz7hz8wd5                        0x0000558e289c9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted =\
    \ lst.sorted(by: { $0.count < $1.count })\n    return sorted.filter({ $0.count\
    \ % 2 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppm0o7h4s/tmppm0o7h4s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac339394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33908bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac33908b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac33908a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppm0o7h4s                        0x000055ba503c7dbf <unavailable> + 7615

    5    libc.so.6                          0x00002ac339580460 __libc_start_main +
    245

    6    tmppm0o7h4s                        0x000055ba503c72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   newList.append(i)\n        }\n    }\n    newList.sort()\n    return newList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpjam9yey5/tmpjam9yey5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47d950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47d647b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47d647988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47d6467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjam9yey5                        0x0000559f5693d67b <unavailable> + 9851

    5    libc.so.6                          0x00002af47db3c460 __libc_start_main +
    245

    6    tmpjam9yey5                        0x0000559f5693c499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2nev7b8x/tmp2nev7b8x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb9e07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb9afeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb9afe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb9afd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nev7b8x                        0x00005585e43785fb <unavailable> + 9723

    5    libc.so.6                          0x00002b7eb9ff3460 __libc_start_main +
    245

    6    tmp2nev7b8x                        0x00005585e4377419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = lst\n    var i = 0\n    while i < newList.count {\n        if newList[i].count\
    \ % 2 != 0 {\n            newList.remove(at: i)\n        } else {\n          \
    \  i += 1\n        }\n    }\n    newList.sort()\n    return newList\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpe_md3i46/tmpe_md3i46.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8f9aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8f9798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8f9798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8f97977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_md3i46                        0x0000555d56e945bb <unavailable> + 9659

    5    libc.so.6                          0x00002af8f9c8d460 __libc_start_main +
    245

    6    tmpe_md3i46                        0x0000555d56e933d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter({$0.count\
    \ % 2 == 0}).sorted(by: {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpw5hilxlz/tmpw5hilxlz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea6f054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea6ed4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea6ed4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea6ed4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5hilxlz                        0x00005587be9addbf <unavailable> + 7615

    5    libc.so.6                          0x00002aea6f240460 __libc_start_main +
    245

    6    tmpw5hilxlz                        0x00005587be9ad2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.removeAll { $0.count % 2 != 0 }\n    lst.sort { $0.count < $1.count }\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpefmd42t7/tmpefmd42t7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f7aa76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f7a76db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f7a76d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f7a76c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefmd42t7                        0x000055af32897def <unavailable> + 7663

    5    libc.so.6                          0x00002b0f7ac62460 __libc_start_main +
    245

    6    tmpefmd42t7                        0x000055af32897319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sortedList\
    \ = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n        \
    \    return a < b\n        }\n        return a.count < b.count\n    }\n    var\
    \ result = [String]()\n    for i in sortedList {\n        if i.count % 2 == 0\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted =\
    \ lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n          \
    \  return a < b\n        }\n        return a.count < b.count\n    }\n    var result:\
    \ [String] = []\n    for i in sorted {\n        if i.count % 2 == 0 {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count == $1.count ? $0 < $1\
    \ : $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n      \
    \      result.append(item)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7esdtbhy/tmp7esdtbhy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0230758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023044fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023044f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023044e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7esdtbhy                        0x0000564754b836cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0230944460 __libc_start_main +
    245

    6    tmp7esdtbhy                        0x0000564754b824e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3e789dc8/tmp3e789dc8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39e24e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39e21dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39e21da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39e21d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e789dc8                        0x000055af8f7d96cb <unavailable> + 9931

    5    libc.so.6                          0x00002b39e26cf460 __libc_start_main +
    245

    6    tmp3e789dc8                        0x000055af8f7d84e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted =\
    \ lst.sorted(by: {$0.count < $1.count})\n    var result = [String]()\n    for\
    \ word in sorted {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp16bvrjr5/tmp16bvrjr5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae78d1b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae78ceb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae78ceb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae78ceaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16bvrjr5                        0x00005585f0ee9f0f <unavailable> + 7951

    5    libc.so.6                          0x00002ae78d3a5460 __libc_start_main +
    245

    6    tmp16bvrjr5                        0x00005585f0ee9439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppvkl5i9x/tmppvkl5i9x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac3420bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac33f02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac33f02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac33f017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvkl5i9x                        0x0000559a90683dbf <unavailable> + 7615

    5    libc.so.6                          0x00002aac343f7460 __libc_start_main +
    245

    6    tmppvkl5i9x                        0x0000559a906832e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n          \
    \  newList.append(i)\n        }\n    }\n    newList.sort()\n    return newList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1x8k_wdk/tmp1x8k_wdk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf99c91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf99988b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf99988988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf999877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1x8k_wdk                        0x000055e13a4e96cb <unavailable> + 9931

    5    libc.so.6                          0x00002adf99e7d460 __libc_start_main +
    245

    6    tmp1x8k_wdk                        0x000055e13a4e84e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    new_lst.sort()\n    var result = [String]()\n    for i in new_lst\
    \ {\n        if i.count % 2 == 0 {\n            result.append(i)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmprje9tucr/tmprje9tucr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff1172fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff11426b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff11426988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff114257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprje9tucr                        0x000056107b1556cb <unavailable> + 9931

    5    libc.so.6                          0x00002aff1191b460 __libc_start_main +
    245

    6    tmprje9tucr                        0x000056107b1544e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sortedList\
    \ = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n        \
    \    return a < b\n        }\n        return a.count < b.count\n    }\n    return\
    \ sortedList.filter { $0.count % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpz7hz8wd5/tmpz7hz8wd5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76bcf8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76bcc85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76bcc85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76bcc847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7hz8wd5                        0x0000558e289ca53b <unavailable> + 9531

    5    libc.so.6                          0x00002b76bd17a460 __libc_start_main +
    245

    6    tmpz7hz8wd5                        0x0000558e289c9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted_lst\
    \ = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n        \
    \    return a < b\n        }\n        return a.count < b.count\n    }\n    var\
    \ result: [String] = []\n    var last_count = 0\n    for word in sorted_lst {\n\
    \        if word.count % 2 == 0 {\n            if word.count != last_count {\n\
    \                result.append(word)\n                last_count = word.count\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3xfwhbxv/tmp3xfwhbxv.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b668c79dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b668c494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b668c494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b668c4937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xfwhbxv                        0x000055c6686faf0f <unavailable> + 7951

    5    libc.so.6                          0x00002b668c989460 __libc_start_main +
    245

    6    tmp3xfwhbxv                        0x000055c6686fa439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sortedList\
    \ = lst.sorted { (s1, s2) -> Bool in\n        if s1.count == s2.count {\n    \
    \        return s1 < s2\n        }\n        return s1.count < s2.count\n    }\n\
    \    return sortedList.filter { $0.count % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst2 = [String]()\n    for i in 0..<lst.count {\n        if lst[i].count\
    \ % 2 == 0 {\n            lst2.append(lst[i])\n        }\n    }\n    lst2.sort()\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpn671fqkj/tmpn671fqkj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba175ed1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba175bc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba175bc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba175bc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn671fqkj                        0x00005599c2b146fb <unavailable> + 9979

    5    libc.so.6                          0x00002ba1760bd460 __libc_start_main +
    245

    6    tmpn671fqkj                        0x00005599c2b13519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newLst:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   newLst.append(i)\n        }\n    }\n    newLst.sort()\n    return newLst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnulxk10r/tmpnulxk10r.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08e1a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08de9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08de9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08de9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnulxk10r                        0x0000556614e4c67b <unavailable> + 9851

    5    libc.so.6                          0x00002ae08e394460 __libc_start_main +
    245

    6    tmpnulxk10r                        0x0000556614e4b499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted {\n        if $0.count == $1.count {\n        \
    \    return $0 < $1\n        }\n        return $0.count < $1.count\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = lst\n    var i = 0\n    while i < new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        } else {\n          \
    \  i += 1\n        }\n    }\n    new_lst.sort()\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpikuybvde/tmpikuybvde.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e3ce80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e3cb77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e3cb77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e3cb767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikuybvde                        0x000056384d0905bb <unavailable> + 9659

    5    libc.so.6                          0x00002b3e3d06c460 __libc_start_main +
    245

    6    tmpikuybvde                        0x000056384d08f3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n     \
    \       result.append(str)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp88m3lpis/tmp88m3lpis.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87e6733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87e642ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87e642a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87e64297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88m3lpis                        0x000055c015bac67b <unavailable> + 9851

    5    libc.so.6                          0x00002b87e691f460 __libc_start_main +
    245

    6    tmp88m3lpis                        0x000055c015bab499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.removeAll(where: { $0.count % 2 != 0 })\n    lst.sort(by: { $0.count\
    \ < $1.count })\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpb97rxeaz/tmpb97rxeaz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fb6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fb3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fb3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fb3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb97rxeaz                        0x0000564f7047ddef <unavailable> + 7663

    5    libc.so.6                          0x00002b70fb8e9460 __libc_start_main +
    245

    6    tmpb97rxeaz                        0x0000564f7047d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst2: [String] = []\n    for i in 0..<lst.count {\n        if lst[i].count\
    \ % 2 == 0 {\n            lst2.append(lst[i])\n        }\n    }\n    lst2.sort()\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpzha5h3yl/tmpzha5h3yl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae73313ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae732e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae732e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae732e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzha5h3yl                        0x0000558ee77716ab <unavailable> + 9899

    5    libc.so.6                          0x00002ae73332a460 __libc_start_main +
    245

    6    tmpzha5h3yl                        0x0000558ee77704c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2nev7b8x/tmp2nev7b8x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb9e07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb9afeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb9afe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb9afd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2nev7b8x                        0x00005585e43785fb <unavailable> + 9723

    5    libc.so.6                          0x00002b7eb9ff3460 __libc_start_main +
    245

    6    tmp2nev7b8x                        0x00005585e4377419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var result = [String]()\n    var i = 0\n    while i < lst.count {\n     \
    \   if lst[i].count % 2 == 0 {\n            result.append(lst[i])\n          \
    \  lst.remove(at: i)\n        } else {\n            i += 1\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmptn86_uk6/tmptn86_uk6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9139d60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9139a57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9139a57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9139a567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn86_uk6                        0x00005601ce7f966b <unavailable> + 9835

    5    libc.so.6                          0x00002b9139f4c460 __libc_start_main +
    245

    6    tmptn86_uk6                        0x00005601ce7f8489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var lst_odd = [String]()\n    var lst_even = [String]()\n    for i in lst\
    \ {\n        if i.count % 2 == 0 {\n            lst_even.append(i)\n        }\
    \ else {\n            lst_odd.append(i)\n        }\n    }\n    lst_even.sort()\n\
    \    lst_odd.sort()\n    lst = lst_even + lst_odd\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpcub9_kmp/tmpcub9_kmp.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d947d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d944ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d944ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d944cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcub9_kmp                        0x00005561ab7969c6 <unavailable> + 6598

    5    libc.so.6                          0x00002b9d949c3460 __libc_start_main +
    245

    6    tmpcub9_kmp                        0x00005561ab796549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    var sorted_lst = lst.sorted(by: { $0.count < $1.count })\n\
    \    for i in 0..<sorted_lst.count {\n        if sorted_lst[i].count % 2 == 0\
    \ {\n            result.append(sorted_lst[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9nmzkpgo/tmp9nmzkpgo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c148abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c145a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c145a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c145a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9nmzkpgo                        0x000055aa2378feef <unavailable> + 7919

    5    libc.so.6                          0x00002b4c14a97460 __libc_start_main +
    245

    6    tmp9nmzkpgo                        0x000055aa2378f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    lst.removeAll(where: { $0.count % 2 != 0 })\n    lst.sort()\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2h9yrcsr/tmp2h9yrcsr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b797c4fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b797c1f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b797c1f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b797c1f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h9yrcsr                        0x0000559f94d4956b <unavailable> + 9579

    5    libc.so.6                          0x00002b797c6e8460 __libc_start_main +
    245

    6    tmp2h9yrcsr                        0x0000559f94d48389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppvkl5i9x/tmppvkl5i9x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac3420bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac33f02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac33f02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac33f017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvkl5i9x                        0x0000559a90683dbf <unavailable> + 7615

    5    libc.so.6                          0x00002aac343f7460 __libc_start_main +
    245

    6    tmppvkl5i9x                        0x0000559a906832e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n      \
    \      result.append(item)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7esdtbhy/tmp7esdtbhy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0230758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023044fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023044f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023044e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7esdtbhy                        0x0000564754b836cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0230944460 __libc_start_main +
    245

    6    tmp7esdtbhy                        0x0000564754b824e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var result: [String] = []\n    for i in 0..<lst.count {\n        if lst[i].count\
    \ % 2 == 0 {\n            result.append(lst[i])\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7et6b2m7/tmp7et6b2m7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ffd036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ffcd2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ffcd2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ffcd2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7et6b2m7                        0x0000559ded0ac6ab <unavailable> + 9899

    5    libc.so.6                          0x00002b8ffd222460 __libc_start_main +
    245

    6    tmp7et6b2m7                        0x0000559ded0ab4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for item in lst {\n        if item.count % 2 == 0 {\n   \
    \         result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyt1cp812/tmpyt1cp812.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e36cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e33c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e33c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e33c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt1cp812                        0x00005601f24955fb <unavailable> + 9723

    5    libc.so.6                          0x00002ac7e38bb460 __libc_start_main +
    245

    6    tmpyt1cp812                        0x00005601f2494419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted =\
    \ lst.sorted(by: { $0.count < $1.count })\n    var result: [String] = []\n   \
    \ for i in sorted {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpz5hre1an/tmpz5hre1an.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5683d76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5683a6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5683a6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5683a6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5hre1an                        0x000055ff7b27eebf <unavailable> + 7871

    5    libc.so.6                          0x00002b5683f62460 __libc_start_main +
    245

    6    tmpz5hre1an                        0x000055ff7b27e3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpz7hz8wd5/tmpz7hz8wd5.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76bcf8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76bcc85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76bcc85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76bcc847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7hz8wd5                        0x0000558e289ca53b <unavailable> + 9531

    5    libc.so.6                          0x00002b76bd17a460 __libc_start_main +
    245

    6    tmpz7hz8wd5                        0x0000558e289c9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let lst = lst.filter\
    \ { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppvkl5i9x/tmppvkl5i9x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac3420bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac33f02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac33f02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac33f017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvkl5i9x                        0x0000559a90683dbf <unavailable> + 7615

    5    libc.so.6                          0x00002aac343f7460 __libc_start_main +
    245

    6    tmppvkl5i9x                        0x0000559a906832e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var odd_length_words\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n    \
    \        odd_length_words.append(word)\n        }\n    }\n    return odd_length_words.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpi8d9y18e/tmpi8d9y18e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19f6d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19f3c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab19f3c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab19f3c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8d9y18e                        0x000056485d9448e6 <unavailable> + 6374

    5    libc.so.6                          0x00002ab19f8be460 __libc_start_main +
    245

    6    tmpi8d9y18e                        0x000056485d944469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    var dict = [Int: [String]]()\n    for word in lst {\n      \
    \  if dict[word.count] == nil {\n            dict[word.count] = [word]\n     \
    \   } else {\n            dict[word.count]?.append(word)\n        }\n    }\n \
    \   for key in dict.keys.sorted() {\n        if key % 2 == 0 {\n            result.append(contentsOf:\
    \ dict[key]!.sorted())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824778
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for str in lst {\n        if str.count % 2 == 0 {\n        \
    \    result.append(str)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgrom6jjh/tmpgrom6jjh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f07f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f07c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f07c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f07c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrom6jjh                        0x000055ebc003c6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b7f08138460 __libc_start_main +
    245

    6    tmpgrom6jjh                        0x000055ebc003b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1zul_3bl/tmp1zul_3bl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c27f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c24eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c24ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c24e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zul_3bl                        0x0000555740222dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b36c29df460 __libc_start_main +
    245

    6    tmp1zul_3bl                        0x00005557402222e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count < $1.count\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824778
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurtkglq4/tmpurtkglq4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad87d862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad87d559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad87d559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad87d5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurtkglq4                        0x00005569d53196cb <unavailable> + 9931

    5    libc.so.6                          0x00002ad87da4e460 __libc_start_main +
    245

    6    tmpurtkglq4                        0x00005569d53184e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result =\
    \ [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n      \
    \      result.append(word)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdyu0msu9/tmpdyu0msu9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b436bfb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b436bca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b436bca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b436bca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyu0msu9                        0x000055838af686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b436c19c460 __libc_start_main +
    245

    6    tmpdyu0msu9                        0x000055838af674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n         \
    \   result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbdboz__u/tmpbdboz__u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7c8b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7c8842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7c8842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7c88417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdboz__u                        0x000055600760267b <unavailable> + 9851

    5    libc.so.6                          0x00002ba7c8d37460 __libc_start_main +
    245

    6    tmpbdboz__u                        0x0000556007601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result:\
    \ [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n   \
    \         result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4usvo9do/tmp4usvo9do.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05790bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0578db4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0578db4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0578db37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4usvo9do                        0x000055c31811067b <unavailable> + 9851

    5    libc.so.6                          0x00002b05792a9460 __libc_start_main +
    245

    6    tmp4usvo9do                        0x000055c31810f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst = lst\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 1 {\n\
    \            lst.remove(at: i)\n        } else {\n            i += 1\n       \
    \ }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpxne8tqf6/tmpxne8tqf6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxne8tqf6                        0x00005625459035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b11c9b5c460 __libc_start_main +
    245

    6    tmpxne8tqf6                        0x00005625459023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst.filter\
    \ { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt5p9nwyb/tmpt5p9nwyb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab964496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96418db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96418d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96418c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5p9nwyb                        0x000055d97ddbe4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab964682460 __libc_start_main +
    245

    6    tmpt5p9nwyb                        0x000055d97ddbd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824777
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
    ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\"\
    , \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        newList.append(word)\n        }\n    }\n    newList.sort()\n    return\
    \ newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmxvqxsbb/tmpmxvqxsbb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b398de2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b398db22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b398db22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b398db217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxvqxsbb                        0x0000562238ee06cb <unavailable> + 9931

    5    libc.so.6                          0x00002b398e017460 __libc_start_main +
    245

    6    tmpmxvqxsbb                        0x0000562238edf4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824778
