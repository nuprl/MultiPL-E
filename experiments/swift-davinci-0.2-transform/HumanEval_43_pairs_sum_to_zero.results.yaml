language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set<Int>()\n    for num in l {\n\
    \        if seen.contains(-num) {\n            return true\n        }\n      \
    \  seen.insert(num)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[i] = 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvjpqicwt/tmpvjpqicwt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b598e1fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b598def1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b598def1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b598def07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjpqicwt                        0x0000558bf6c8d68b <unavailable> + 5771

    5    libc.so.6                          0x00002b598e3e6460 __libc_start_main +
    245

    6    tmpvjpqicwt                        0x0000558bf6c8d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for num in l {\n        if\
    \ dict[num] != nil {\n            return true\n        }\n        dict[-num] =\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmphs_qj3a1/tmphs_qj3a1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacef3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacef0d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacef0d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacef0d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs_qj3a1                        0x00005585794c8585 <unavailable> + 5509

    5    libc.so.6                          0x00002aacef5c8460 __libc_start_main +
    245

    6    tmphs_qj3a1                        0x00005585794c7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for num in l {\n      \
    \  if set.contains(-num) {\n            return true\n        }\n        set.insert(num)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in l {\n        if\
    \ dict[i] != nil {\n            return true\n        }\n        dict[-i] = i\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in l {\n        if\
    \ let _ = dict[i] {\n            return true\n        }\n        dict[-i] = 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set<Int>()\n    for i in l {\n   \
    \     if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmphs_qj3a1/tmphs_qj3a1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacef3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacef0d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacef0d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacef0d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs_qj3a1                        0x00005585794c8585 <unavailable> + 5509

    5    libc.so.6                          0x00002aacef5c8460 __libc_start_main +
    245

    6    tmphs_qj3a1                        0x00005585794c7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set<Int>()\n    for i in l {\n   \
    \     if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n        \
    \    return true\n        }\n        set.insert(i)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        let sum = l[i] + l[j]\n        if sum == 0 {\n\
    \            return true\n        } else if sum < 0 {\n            i += 1\n  \
    \      } else {\n            j -= 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in l {\n        if\
    \ dict[i] != nil {\n            return true\n        }\n        dict[-i] = 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp02sw7tu6/tmp02sw7tu6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc7d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc7a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc7a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc7a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02sw7tu6                        0x000055b5c4e66585 <unavailable> + 5509

    5    libc.so.6                          0x00002aefc7f7c460 __libc_start_main +
    245

    6    tmp02sw7tu6                        0x000055b5c4e65f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmprciq7co9/tmprciq7co9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6f548dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6f5184b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6f5184988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6f51837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprciq7co9                        0x000055dede56c585 <unavailable> + 5509

    5    libc.so.6                          0x00002ac6f5679460 __libc_start_main +
    245

    6    tmprciq7co9                        0x000055dede56bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for num in l {\n      \
    \  if set.contains(-num) {\n            return true\n        }\n        set.insert(num)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp02sw7tu6/tmp02sw7tu6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc7d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc7a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc7a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc7a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02sw7tu6                        0x000055b5c4e66585 <unavailable> + 5509

    5    libc.so.6                          0x00002aefc7f7c460 __libc_start_main +
    245

    6    tmp02sw7tu6                        0x000055b5c4e65f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = []\n    for i in l {\n        if\
    \ seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpwhj8t3ks/tmpwhj8t3ks.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab20c1fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab20bef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab20bef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab20bef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhj8t3ks                        0x0000563f876b6585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab20c3e9460 __libc_start_main +
    245

    6    tmpwhj8t3ks                        0x0000563f876b5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp02sw7tu6/tmp02sw7tu6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc7d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc7a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc7a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc7a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02sw7tu6                        0x000055b5c4e66585 <unavailable> + 5509

    5    libc.so.6                          0x00002aefc7f7c460 __libc_start_main +
    245

    6    tmp02sw7tu6                        0x000055b5c4e65f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for num in l {\n        if\
    \ dict[num] != nil {\n            return true\n        }\n        dict[-num] =\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ i\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for num in l {\n     \
    \   if dict[num] != nil {\n            return true\n        }\n        dict[-num]\
    \ = 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ i\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for num in l {\n      \
    \  if set.contains(-num) {\n            return true\n        }\n        set.insert(num)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp6u7j1q97/tmp6u7j1q97.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b6a4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b6a1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b6a1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b6a1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6u7j1q97                        0x00005562b642d585 <unavailable> + 5509

    5    libc.so.6                          0x00002b4b6a6d2460 __libc_start_main +
    245

    6    tmp6u7j1q97                        0x00005562b642cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp63gx8erw/tmp63gx8erw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63aff74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63afc6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63afc6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63afc6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63gx8erw                        0x00005564bab7d585 <unavailable> + 5509

    5    libc.so.6                          0x00002b63b0160460 __libc_start_main +
    245

    6    tmp63gx8erw                        0x00005564bab7cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Bool] = [:]\n    for i in l {\n      \
    \  if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in l {\n        if\
    \ dict[i] != nil {\n            return true\n        }\n        dict[-i] = i\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            return true\n        }\n        dict[-i] =\
    \ i\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for i in l {\n        if\
    \ dict[i] != nil {\n            return true\n        }\n        dict[-i] = i\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for n in l {\n        if set.contains(-n)\
    \ {\n            return true\n        }\n        set.insert(n)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for x in l {\n       \
    \ if seen.contains(-x) {\n            return true\n        }\n        seen.insert(x)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function!\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpwmy9542q/tmpwmy9542q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ce69fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ce396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0ce396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0ce3957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmy9542q                        0x000055e66e100585 <unavailable> + 5509

    5    libc.so.6                          0x00002af0ce88b460 __libc_start_main +
    245

    6    tmpwmy9542q                        0x000055e66e0fff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set<Int>()\n    for i in l {\n   \
    \     if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for i in 0..<l.count {\n        for j\
    \ in 0..<l.count {\n            if i != j {\n                sum = l[i] + l[j]\n\
    \                if sum == 0 {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: Set<Int> = Set()\n    for i in l {\n        if\
    \ set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = Set()\n    for i in l {\n       \
    \ if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820570
