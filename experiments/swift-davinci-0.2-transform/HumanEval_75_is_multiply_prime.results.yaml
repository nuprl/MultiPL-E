language: swift
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var primeNumbers = [Int]()\n    for i in 2...a {\n       \
    \ if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n    }\n\
    \    for i in primeNumbers {\n        if a % i == 0 {\n            a /= i\n  \
    \      }\n    }\n    if a == 1 {\n        result = true\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpypif_zeq.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiply = false\n\
    \    var isPrime = false\n    var primeNumbers = [Int]()\n    var primeNumbersMultiply\
    \ = [Int]()\n    var primeNumbersMultiply2 = [Int]()\n    var primeNumbersMultiply3\
    \ = [Int]()\n    var primeNumbersMultiply4 = [Int]()\n    var primeNumbersMultiply5\
    \ = [Int]()\n    var primeNumbersMultiply6 = [Int]()\n    var primeNumbersMultiply7\
    \ = [Int]()\n    var primeNumbersMultiply8 = [Int]()\n    var primeNumbersMultiply9\
    \ = [Int]()\n    var primeNumbersMultiply10 = [Int]()\n    var primeNumbersMultiply11\
    \ = [Int]()\n    var primeNumbersMultiply12 = [Int]()\n    var primeNumbersMultiply13\
    \ = [Int]()\n    var primeNumbersMultiply14 = [Int]()\n    var primeNumbersMultiply15\
    \ = [Int]()\n    var primeNumbersMultiply16 = [Int]()\n    var primeNumbersMultiply17\
    \ = [Int]()\n    var primeNumbersMultiply18 = [Int]()\n    var primeNumbersMultiply19\
    \ = [Int]()\n    var primeNumbersMultiply20 = [Int]()\n    var primeNumbersMultiply21\
    \ = [Int]()\n    var primeNumbersMultiply22 = [Int]()\n    var primeNumbersMultiply23\
    \ = [Int]()\n    var primeNumbersMultiply24 = [Int]()\n    var primeNumbersMultiply25\
    \ = [Int]()\n    var primeNumbersMultiply26 = [Int]()\n    var primeNumbersMultiply27\
    \ = [Int]()\n    var primeNumbersMultiply28 = [Int]()\n    var primeNumbersMultiply29\
    \ = [Int]()\n    var primeNumbersMultiply30 = [Int]()\n    var primeNumbersMultiply31\
    \ = [Int]()\n    var primeNumbersMultiply32 = [Int]()\n    var primeNumbersMultiply33\
    \ = [Int]()\n    var primeNumbersMultiply34 = [Int]()\n    var primeNumbersMultiply35\
    \ = [\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpbba6g_39.swift:48:1: error: expected expression in container literal

    }

    ^

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpycgwf9bd.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = 0\n    var i = 2\n    while i <= a {\n        if a % i == 0 {\n          \
    \  prime_numbers.append(i)\n            prime_numbers_count += 1\n           \
    \ a /= i\n        } else {\n            i += 1\n        }\n    }\n    if prime_numbers_count\
    \ == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          isPrime = false\n            a /= i\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp0y0hfxgs/tmp0y0hfxgs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26bb583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26bb27ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26bb27a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26bb2797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0y0hfxgs                        0x000055a2da389243 <unavailable> + 4675

    5    libc.so.6                          0x00002b26bb76f460 __libc_start_main +
    245

    6    tmp0y0hfxgs                        0x000055a2da388ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnjnla3hm.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n    var\
    \ primeNumbersSum = 0\n    var primeNumbersProduct = 1\n    var i = 2\n    while\
    \ i <= a {\n        var isPrime = true\n        for j in 2..<i {\n           \
    \ if i % j == 0 {\n                isPrime = false\n                break\n  \
    \          }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \            primeNumbersCount += 1\n            primeNumbersSum += i\n      \
    \      primeNumbersProduct *= i\n        }\n        i += 1\n    }\n    if primeNumbersCount\
    \ >= 3 && primeNumbersProduct == a {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpd68d5sz4/tmpd68d5sz4.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff4cbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff49b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff49b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff49b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd68d5sz4                        0x000055c32217e457 <unavailable> + 5207

    5    libc.so.6                          0x00002b2ff4eab460 __libc_start_main +
    245

    6    tmpd68d5sz4                        0x000055c32217e099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    var count = 0\n    while i < a {\n        if\
    \ a % i == 0 {\n            a /= i\n            count += 1\n        } else {\n\
    \            i += 1\n        }\n    }\n    if count == 2 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers:\
    \ [Int] = []\n    var i = 2\n    while a > 1 {\n        while a % i == 0 {\n \
    \           prime_numbers.append(i)\n            a /= i\n        }\n        i\
    \ += 1\n    }\n    return prime_numbers.count == 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in 0..<primes.count {\n            for k in 0..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvyyn2a2a.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var number = a\n    var i = 2\n    while i < number {\n        if number\
    \ % i == 0 {\n            number /= i\n            isPrime = false\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpu_km7zkl/tmpu_km7zkl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c9ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c9cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c9ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c9cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_km7zkl                        0x000056455412f243 <unavailable> + 4675

    5    libc.so.6                          0x00002ac7ca1e0460 __libc_start_main +
    245

    6    tmpu_km7zkl                        0x000056455412eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primes.append(i)\n        }\n    }\n    for i in primes {\n\
    \        if a % i == 0 {\n            a /= i\n        }\n    }\n    if a == 1\
    \ {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5gb6cco7.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime\
    \ = false\n        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7c1ylsrn/tmp7c1ylsrn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b0bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b08f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b08f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b08f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c1ylsrn                        0x000055ec5fb12243 <unavailable> + 4675

    5    libc.so.6                          0x00002b23b0deb460 __libc_start_main +
    245

    6    tmp7c1ylsrn                        0x000055ec5fb11ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var count = 0\n    for i in 2...a {\n        if a % i == 0 {\n          \
    \  for j in 2...i {\n                if i % j == 0 {\n                    isPrime\
    \ = false\n                }\n            }\n            if isPrime {\n      \
    \          count += 1\n            }\n            isPrime = true\n        }\n\
    \    }\n    if count == 3 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp6f64vyzb/tmp6f64vyzb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23bf81bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23bf512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23bf512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23bf5117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6f64vyzb                        0x0000555d11dc33a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b23bfa07460 __libc_start_main +
    245

    6    tmp6f64vyzb                        0x0000555d11dc2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var num = a\n    var i = 2\n    while i * i <= num {\n        if num % i\
    \ == 0 {\n            isPrime = false\n            break\n        }\n        i\
    \ += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkah1rrb0/tmpkah1rrb0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56740ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac567101b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac567101988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5671007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkah1rrb0                        0x000055bf9fe3e243 <unavailable> + 4675

    5    libc.so.6                          0x00002ac5675f6460 __libc_start_main +
    245

    6    tmpkah1rrb0                        0x000055bf9fe3def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers = [Int]()\n    var number = a\n    for i in 2...number {\n\
    \        isPrime = true\n        for j in 2..<i {\n            if i % j == 0 {\n\
    \                isPrime = false\n            }\n        }\n        if isPrime\
    \ {\n            primeNumbers.append(i)\n            if number % i == 0 {\n  \
    \              number /= i\n            }\n        }\n    }\n    return primeNumbers.count\
    \ == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpriskw5oh/tmpriskw5oh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50bf8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50bf5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50bf5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50bf5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpriskw5oh                        0x000055c220aba583 <unavailable> + 5507

    5    libc.so.6                          0x00002b50bfae2460 __libc_start_main +
    245

    6    tmpriskw5oh                        0x000055c220aba239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var a = a\n    var primeNumbers = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n\
    \    }\n    for i in primeNumbers {\n        if a % i == 0 {\n            a /=\
    \ i\n        }\n    }\n    if a == 1 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9u2_z2km.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo8girre2.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    var j = 0\n\
    \    while j < prime_numbers.count {\n        var k = j + 1\n        while k <\
    \ prime_numbers.count {\n            var l = k + 1\n            while l < prime_numbers.count\
    \ {\n                if a == prime_numbers[j] * prime_numbers[k] * prime_numbers[l]\
    \ {\n                    is_multiply_prime = true\n                }\n       \
    \         l += 1\n            }\n            k += 1\n        }\n        j += 1\n\
    \    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp95t9h498.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime\
    \ = false\n        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7c1ylsrn/tmp7c1ylsrn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b0bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b08f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b08f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b08f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c1ylsrn                        0x000055ec5fb12243 <unavailable> + 4675

    5    libc.so.6                          0x00002b23b0deb460 __libc_start_main +
    245

    6    tmp7c1ylsrn                        0x000055ec5fb11ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var number = a\n    var i = 2\n    while i < number {\n        if number\
    \ % i == 0 {\n            number /= i\n            isPrime = false\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpu_km7zkl/tmpu_km7zkl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c9ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c9cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c9ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c9cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_km7zkl                        0x000056455412f243 <unavailable> + 4675

    5    libc.so.6                          0x00002ac7ca1e0460 __libc_start_main +
    245

    6    tmpu_km7zkl                        0x000056455412eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfvld9zcl/tmpfvld9zcl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b8764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b845bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b845b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b845a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvld9zcl                        0x000055c13561a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b74b8950460 __libc_start_main +
    245

    6    tmpfvld9zcl                        0x000055c135619e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    var is_prime = true\n    var i = 2\n    while i < a {\n        for j in 2...i\
    \ {\n            if i % j == 0 && i != j {\n                is_prime = false\n\
    \            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n        i += 1\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            if a == 1 {\n                is_multiply = true\n\
    \            }\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ is_multiply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpu5piz_t1/tmpu5piz_t1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac89bbebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac89b8e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac89b8e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac89b8e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5piz_t1                        0x000056273de8a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac89bdd7460 __libc_start_main +
    245

    6    tmpu5piz_t1                        0x000056273de89ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    var count = 0\n    while i < a {\n        if\
    \ a % i == 0 {\n            a /= i\n            count += 1\n        } else {\n\
    \            i += 1\n        }\n    }\n    if count == 2 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var prime_numbers_count = 0\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ {\n                    prime_numbers_count += 1\n                }\n       \
    \     }\n        }\n    }\n    return prime_numbers_count > 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4qi88g4q.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            is_prime = false\n        } else {\n          \
    \  i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpvvwnr9r6/tmpvvwnr9r6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96700c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b966fdbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b966fdbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b966fdbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvwnr9r6                        0x0000556fca431243 <unavailable> + 4675

    5    libc.so.6                          0x00002b96702b3460 __libc_start_main +
    245

    6    tmpvvwnr9r6                        0x0000556fca430ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo8girre2.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var prime_numbers = [Int]()\n    var prime_numbers_count = 0\n    for i in\
    \ 2...a {\n        for j in 2...i {\n            if i % j == 0 {\n           \
    \     is_prime = false\n                break\n            }\n        }\n    \
    \    if is_prime {\n            prime_numbers.append(i)\n            prime_numbers_count\
    \ += 1\n        }\n        is_prime = true\n    }\n    var is_multiply_prime =\
    \ false\n    for i in 0..<prime_numbers_count {\n        for j in i..<prime_numbers_count\
    \ {\n            for k in j..<prime_numbers_count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3ht7rr_5/tmp3ht7rr_5.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23bbb52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23bb849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23bb849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23bb8487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ht7rr_5                        0x0000564df684f5a7 <unavailable> + 5543

    5    libc.so.6                          0x00002b23bbd3e460 __libc_start_main +
    245

    6    tmp3ht7rr_5                        0x0000564df684f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 2 {\n        return\
    \ false\n    }\n    var prime_numbers = [Int]()\n    for i in 2...a {\n      \
    \  if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    }\n\
    \    var prime_numbers_count = 0\n    for i in 0..<prime_numbers.count {\n   \
    \     for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    prime_numbers_count += 1\n                }\n  \
    \          }\n        }\n    }\n    return prime_numbers_count > 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpidw8ximh.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5bddtlub/tmp5bddtlub.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a2e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a2b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a2b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a2b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bddtlub                        0x000055c83e9bc243 <unavailable> + 4675

    5    libc.so.6                          0x00002ae1a3066460 __libc_start_main +
    245

    6    tmp5bddtlub                        0x000055c83e9bbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          is_prime = false\n            a = a / i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptt8fbsg1/tmptt8fbsg1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca8123cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca80f33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca80f33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca80f327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt8fbsg1                        0x0000560ba680d243 <unavailable> + 4675

    5    libc.so.6                          0x00002aca81428460 __libc_start_main +
    245

    6    tmptt8fbsg1                        0x0000560ba680cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var counter = 0\n    for i in prime_numbers {\n       \
    \ if a % i == 0 {\n            a /= i\n            counter += 1\n        }\n \
    \   }\n    return counter == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvpz4pgl3.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnjnla3hm.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    for i in 2...a {\n        if a % i == 0 {\n            isPrime = true\n \
    \           for j in 2...i {\n                if i % j == 0 {\n              \
    \      isPrime = false\n                }\n            }\n            if isPrime\
    \ {\n                print(i)\n            }\n        }\n    }\n    return isPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmps5t5rpmy/tmps5t5rpmy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea8e2ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea8dff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea8dff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea8dff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5t5rpmy                        0x00005605070705e7 <unavailable> + 5607

    5    libc.so.6                          0x00002aea8e4eb460 __libc_start_main +
    245

    6    tmps5t5rpmy                        0x0000560507070229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            isPrime = false\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3it4mgn8/tmp3it4mgn8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d16d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d16a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d16a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d16a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3it4mgn8                        0x000055e771402243 <unavailable> + 4675

    5    libc.so.6                          0x00002b0d16f6c460 __libc_start_main +
    245

    6    tmp3it4mgn8                        0x000055e771401ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var number = a\n    var count = 0\n    for i in 2...number {\n        if\
    \ number % i == 0 {\n            number /= i\n            count += 1\n       \
    \     if count == 3 {\n                result = true\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpbq0b6jxv/tmpbq0b6jxv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fa10abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fa0da2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fa0da2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fa0da17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbq0b6jxv                        0x00005599bd9b041b <unavailable> + 5147

    5    libc.so.6                          0x00002b3fa1297460 __libc_start_main +
    245

    6    tmpbq0b6jxv                        0x00005599bd9affe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfvld9zcl/tmpfvld9zcl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b8764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b845bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b845b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b845a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvld9zcl                        0x000055c13561a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b74b8950460 __libc_start_main +
    245

    6    tmpfvld9zcl                        0x000055c135619e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n       \
    \ return false\n    }\n    var a = a\n    var primeNumbers = [Int]()\n    for\
    \ i in 2...a {\n        while a % i == 0 {\n            primeNumbers.append(i)\n\
    \            a /= i\n        }\n    }\n    return primeNumbers.count == 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n\
    \    var a = a\n    var i = 2\n    var count = 0\n    while i <= a {\n       \
    \ if a % i == 0 {\n            a /= i\n            count += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if count == 3 {\n        is_multiply\
    \ = true\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n\
    \    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a {\n      \
    \  if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    }\n\
    \    for i in prime_numbers {\n        if a % i == 0 {\n            a = a / i\n\
    \            if a == 1 {\n                is_multiply = true\n               \
    \ break\n            }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0frpkwb7.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          is_prime = false\n            a = a / i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptt8fbsg1/tmptt8fbsg1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca8123cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca80f33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca80f33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca80f327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt8fbsg1                        0x0000560ba680d243 <unavailable> + 4675

    5    libc.so.6                          0x00002aca81428460 __libc_start_main +
    245

    6    tmptt8fbsg1                        0x0000560ba680cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    var number = a\n    for i in 2...number {\n\
    \        if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n\
    \    }\n    for i in primeNumbers {\n        if number % i == 0 {\n          \
    \  number /= i\n        }\n    }\n    if number == 1 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwfs6gq54.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp101pwkyx.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp101pwkyx.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n\
    \    var isPrime = true\n    var i = 2\n    while i <= a {\n        isPrime =\
    \ true\n        for j in 2..<i {\n            if i % j == 0 {\n              \
    \  isPrime = false\n                break\n            }\n        }\n        if\
    \ isPrime {\n            primeNumbers.append(i)\n        }\n        i += 1\n \
    \   }\n    var result = false\n    for i in 0..<primeNumbers.count {\n       \
    \ for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = 1\n    for i in prime_numbers {\n        result\
    \ *= i\n        if result == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqbqjfakg.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                is_prime = false\n         \
    \       break\n            }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n    }\n    var is_multiply_prime = false\n\
    \    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    while a > 1 {\n        while a % i == 0 {\n\
    \            a /= i\n            if a == 1 {\n                result = true\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpf40p3sv5/tmpf40p3sv5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e2dc86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e2d97db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e2d97d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e2d97c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf40p3sv5                        0x000056549fe3a243 <unavailable> + 4675

    5    libc.so.6                          0x00002b1e2de72460 __libc_start_main +
    245

    6    tmpf40p3sv5                        0x000056549fe39ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5p2qeolr.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n    var\
    \ number = a\n    var i = 2\n    while i <= number {\n        if number % i ==\
    \ 0 {\n            primeNumbers.append(i)\n            primeNumbersCount += 1\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    if primeNumbersCount == 3 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 2 {\n        return\
    \ false\n    }\n    var prime_numbers = [Int]()\n    for i in 2...a {\n      \
    \  if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    }\n\
    \    var result = false\n    for i in 0..<prime_numbers.count {\n        for j\
    \ in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphcicp9ax.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqp9b3v5v.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    var is_prime = true\n    var i = 2\n    while a > 1 {\n     \
    \   while i < a {\n            if a % i == 0 {\n                is_prime = false\n\
    \                break\n            }\n            i += 1\n        }\n       \
    \ if is_prime {\n            prime_numbers.append(a)\n            a = 1\n    \
    \    } else {\n            a /= i\n            is_prime = true\n            i\
    \ = 2\n        }\n    }\n    return prime_numbers.count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpgy087vt7/tmpgy087vt7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07392b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0738fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0738fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0738faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgy087vt7                        0x000055ed7b5ea407 <unavailable> + 5127

    5    libc.so.6                          0x00002b07394a0460 __libc_start_main +
    245

    6    tmpgy087vt7                        0x000055ed7b5ea049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<primes.count {\n \
    \       for j in i+1..<primes.count {\n            for k in j+1..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7lwn9pwb.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i+1..<primes.count {\n            for k in j+1..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzk4soxtp.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers: [Int]\
    \ = []\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgae0o7u9.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var number = a\n    var i = 2\n    while i < number {\n        if number\
    \ % i == 0 {\n            is_prime = false\n            number = number / i\n\
    \            i = 2\n        } else {\n            i += 1\n        }\n    }\n \
    \   return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpe_7tb3ow/tmpe_7tb3ow.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af295392c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af295089b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af295089988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2950887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_7tb3ow                        0x000055b251073243 <unavailable> + 4675

    5    libc.so.6                          0x00002af29557e460 __libc_start_main +
    245

    6    tmpe_7tb3ow                        0x000055b251072ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfxgll_2k.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                a /= i\n                primes.append(i)\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    while a > 1 {\n        while a % i == 0 {\n\
    \            a /= i\n            if a == 1 {\n                result = true\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpf40p3sv5/tmpf40p3sv5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e2dc86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e2d97db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e2d97d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e2d97c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf40p3sv5                        0x000056549fe3a243 <unavailable> + 4675

    5    libc.so.6                          0x00002b1e2de72460 __libc_start_main +
    245

    6    tmpf40p3sv5                        0x000056549fe39ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var is_multiply\
    \ = false\n    var prime_numbers = [Int]()\n    var i = 2\n    while i <= a {\n\
    \        if a % i == 0 {\n            prime_numbers.append(i)\n            a /=\
    \ i\n        } else {\n            i += 1\n        }\n    }\n    if prime_numbers.count\
    \ == 3 {\n        is_multiply = true\n    }\n    return is_multiply\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    var num = a\n    while i * i <= num {\n        if num % i\
    \ == 0 {\n            isPrime = false\n            break\n        }\n        i\
    \ += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmps7t35_lg/tmps7t35_lg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb102d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb0ffcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb0ffcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb0ffca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7t35_lg                        0x000055808ceb7243 <unavailable> + 4675

    5    libc.so.6                          0x00002abb104c0460 __libc_start_main +
    245

    6    tmps7t35_lg                        0x000055808ceb6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n        \
    \    a /= i\n            if !is_prime(a: i) {\n                result = false\n\
    \                break\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwh998__j.swift:16:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(a: i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    var i = 2\n    while i <= a {\n\
    \        if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n\
    \        i += 1\n    }\n    for i in 0..<prime_numbers.count {\n        for j\
    \ in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsxyqdg4.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqp9b3v5v.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in prime_numbers {\n        if a % i == 0 {\n         \
    \   a = a / i\n        }\n    }\n    if a == 1 {\n        is_multiply_prime =\
    \ true\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4dsid0gr.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 2 {\n        return\
    \ false\n    }\n    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i..<primes.count {\n            for k in j..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true\n                }\n            }\n        }\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpropmuubw.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoyr9x6qs.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7woiss6c.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfvld9zcl/tmpfvld9zcl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b8764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b845bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b845b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b845a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvld9zcl                        0x000055c13561a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b74b8950460 __libc_start_main +
    245

    6    tmpfvld9zcl                        0x000055c135619e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            is_prime = is_prime && is_prime_number(a: i)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpskj40907.swift:16:36: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime && is_prime_number(a: i)\n                  \
    \                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var isMultiplyPrime = false\n    var primes = [Int]()\n    for i in 2...a\
    \ {\n        isPrime = true\n        for j in 2..<i {\n            if i % j ==\
    \ 0 {\n                isPrime = false\n                break\n            }\n\
    \        }\n        if isPrime {\n            primes.append(i)\n        }\n  \
    \  }\n    for i in 0..<primes.count {\n        for j in i..<primes.count {\n \
    \           for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    isMultiplyPrime = true\n           \
    \     }\n            }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo8girre2.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var num = a\n    var count = 0\n    for i in 2...num {\n        while num\
    \ % i == 0 {\n            num /= i\n            count += 1\n        }\n      \
    \  if count == 3 {\n            result = true\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp57bmdt6b/tmp57bmdt6b.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d7842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d7539b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d7539988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d75387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57bmdt6b                        0x000055acd4eea5ef <unavailable> + 5615

    5    libc.so.6                          0x00002b55d7a2e460 __libc_start_main +
    245

    6    tmp57bmdt6b                        0x000055acd4ee9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2pz6ngnr.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n    var\
    \ primeNumbersProduct = 1\n    var i = 2\n    while i <= a {\n        var isPrime\
    \ = true\n        var j = 2\n        while j < i {\n            if i % j == 0\
    \ {\n                isPrime = false\n                break\n            }\n \
    \           j += 1\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \            primeNumbersCount += 1\n            primeNumbersProduct *= i\n  \
    \      }\n        if primeNumbersProduct == a {\n            isMultiplyPrime =\
    \ true\n            break\n        }\n        i += 1\n    }\n    if isMultiplyPrime\
    \ {\n        print(\"\\(a) = \\(primeNumbers[0]) * \\(primeNumbers[1]) * \\(primeNumbers[2])\"\
    )\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpehpp2ltf/tmpehpp2ltf.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0020156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b001fe4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b001fe4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b001fe4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehpp2ltf                        0x0000558cb21568fb <unavailable> + 6395

    5    libc.so.6                          0x00002b0020342460 __libc_start_main +
    245

    6    tmpehpp2ltf                        0x0000558cb21564c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxoej5pa8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    var isPrime = true\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primes.append(i)\n        }\n\
    \        isPrime = true\n    }\n    var counter = 0\n    for i in primes {\n \
    \       if a % i == 0 {\n            a /= i\n            counter += 1\n      \
    \  }\n    }\n    if counter == 3 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmppxdnobn1/tmppxdnobn1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1541df7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1541aeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1541aee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1541aed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxdnobn1                        0x00005631ab18f77b <unavailable> + 6011

    5    libc.so.6                          0x00002b1541fe3460 __libc_start_main +
    245

    6    tmppxdnobn1                        0x00005631ab18f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var count = 0\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            a /= i\n            count += 1\n            if count == 3\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6c2c1wzh.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2o_uqs21.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfxgll_2k.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    var i = 2\n    while i < a {\n  \
    \      if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n  \
    \      i += 1\n    }\n    var j = 0\n    while j < primeNumbers.count {\n    \
    \    var k = j + 1\n        while k < primeNumbers.count {\n            var l\
    \ = k + 1\n            while l < primeNumbers.count {\n                if primeNumbers[j]\
    \ * primeNumbers[k] * primeNumbers[l] == a {\n                    isMultiplyPrime\
    \ = true\n                }\n                l += 1\n            }\n         \
    \   k += 1\n        }\n        j += 1\n    }\n    return isMultiplyPrime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwo5wz08k.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    var i = 2\n    while a > 1 {\n        if a % i == 0 {\n     \
    \       prime_numbers.append(i)\n            a /= i\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return prime_numbers.count == 3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824534
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var counter = 0\n    for i in 0..<prime_numbers.count {\n\
    \        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    counter += 1\n                }\n            }\n\
    \        }\n    }\n    if counter > 0 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsu5wv9lp.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n  \
    \      }\n        isPrime = true\n    }\n    var sum = 0\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                sum = primeNumbers[i] * primeNumbers[j] * primeNumbers[k]\n\
    \                if sum == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    for i in 0..<primes.count {\n        for j in 0..<primes.count\
    \ {\n            for k in 0..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    var i = 2\n    while i < a {\n        if\
    \ is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n        i +=\
    \ 1\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz7dp2uyf.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    var prime_numbers_count = 0\n    var prime_numbers_sum\
    \ = 0\n    for i in 0..<prime_numbers.count {\n        if a % prime_numbers[i]\
    \ == 0 {\n            prime_numbers_count += 1\n            prime_numbers_sum\
    \ += prime_numbers[i]\n        }\n    }\n    if prime_numbers_count == 3 && prime_numbers_sum\
    \ == a {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp0081o2vj/tmp0081o2vj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbdf681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbdf378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbdf378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbdf3777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0081o2vj                        0x0000562fab1a2567 <unavailable> + 5479

    5    libc.so.6                          0x00002abbdf86d460 __libc_start_main +
    245

    6    tmp0081o2vj                        0x0000562fab1a21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = 1\n    for i in prime_numbers {\n        result\
    \ *= i\n        if result == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqbqjfakg.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnjnla3hm.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnjnla3hm.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    for i in 2...a {\n        if a % i == 0 {\n            isPrime = is_prime(a:\
    \ i)\n            if isPrime == false {\n                return false\n      \
    \      }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb1_a8e59.swift:13:23: error: cannot find 'is_prime' in scope\n\
    \            isPrime = is_prime(a: i)\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfvld9zcl/tmpfvld9zcl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b8764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b845bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b845b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b845a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvld9zcl                        0x000055c13561a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b74b8950460 __libc_start_main +
    245

    6    tmpfvld9zcl                        0x000055c135619e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp5bddtlub/tmp5bddtlub.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a2e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a2b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a2b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a2b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bddtlub                        0x000055c83e9bc243 <unavailable> + 4675

    5    libc.so.6                          0x00002ae1a3066460 __libc_start_main +
    245

    6    tmp5bddtlub                        0x000055c83e9bbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var number = a\n    var i = 2\n    var primeNumbers = [Int]()\n    while\
    \ i <= number {\n        if is_prime(number: i) {\n            primeNumbers.append(i)\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    if primeNumbers.count == 3 {\n        result = true\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpt9hg633r.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i..<primes.count {\n            for k in j..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvi8_ysbk.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var i = 2\n    while a != 1 && i < a {\n        if a % i == 0 {\n\
    \            a /= i\n            if !is_prime(a: i) {\n                result\
    \ = false\n                break\n            }\n        } else {\n          \
    \  i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprxbiehr3.swift:16:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(a: i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var i = 2\n    var j = 2\n    var k = 2\n    while i < a {\n        while\
    \ j < a {\n            while k < a {\n                if i * j * k == a {\n  \
    \                  result = true\n                }\n                k += 1\n\
    \            }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp8w7e53we/tmp8w7e53we.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ab945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ab63cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ab63c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ab63b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w7e53we                        0x0000555cb3b43227 <unavailable> + 4647

    5    libc.so.6                          0x00002af8abb31460 __libc_start_main +
    245

    6    tmp8w7e53we                        0x0000555cb3b42e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            isPrime = false\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3it4mgn8/tmp3it4mgn8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d16d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d16a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d16a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d16a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3it4mgn8                        0x000055e771402243 <unavailable> + 4675

    5    libc.so.6                          0x00002b0d16f6c460 __libc_start_main +
    245

    6    tmp3it4mgn8                        0x000055e771401ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n  \
    \      }\n        isPrime = true\n    }\n    var isMultiply = false\n    for i\
    \ in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count {\n   \
    \         for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiply =\
    \ true\n                }\n            }\n        }\n    }\n    return isMultiply\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqxx41uk4.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    var result = false\n    for i in 0..<primes.count {\n        for\
    \ j in i..<primes.count {\n            for k in j..<primes.count {\n         \
    \       if a == primes[i] * primes[j] * primes[k] {\n                    result\
    \ = true\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    var result = false\n    for i in 0..<primes.count {\n        for\
    \ j in i..<primes.count {\n            for k in j..<primes.count {\n         \
    \       if primes[i] * primes[j] * primes[k] == a {\n                    result\
    \ = true\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    var a = a\n    for i in 2...a {\n        if is_prime(a: i) {\n          \
    \  prime_numbers.append(i)\n        }\n    }\n    for i in prime_numbers {\n \
    \       if a % i == 0 {\n            a /= i\n        }\n    }\n    return a ==\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\n\
    assert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a: 8) == true)\n\
    assert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a: 125) ==\
    \ true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmw1m1yog.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n       \
    \ return false\n    }\n    var a = a\n    var count = 0\n    for i in 2...a {\n\
    \        while a % i == 0 {\n            a /= i\n            count += 1\n    \
    \    }\n        if count == 3 {\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpwre134l6/tmpwre134l6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d7930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d7627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1d7627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1d76267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwre134l6                        0x0000563e1eed65ef <unavailable> + 5615

    5    libc.so.6                          0x00002ad1d7b1c460 __libc_start_main +
    245

    6    tmpwre134l6                        0x0000563e1eed5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var i = 2\n    while a > 1 {\n        if a % i == 0 {\n        \
    \    a /= i\n            if !is_prime(a: i) {\n                result = false\n\
    \                break\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo6zolr9t.swift:16:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(a: i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var number = a\n    var primes = [Int]()\n    var i = 2\n    while i <= number\
    \ {\n        if number % i == 0 {\n            primes.append(i)\n            number\
    \ /= i\n        } else {\n            i += 1\n        }\n    }\n    if primes.count\
    \ == 3 {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 0 {\n       \
    \ return false\n    }\n    var number = a\n    var isMultiplyPrime = true\n  \
    \  for i in 2...a {\n        if number % i == 0 {\n            number /= i\n \
    \           if !is_prime(a: i) {\n                isMultiplyPrime = false\n  \
    \          }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe6_8gi49.swift:18:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(a: i) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var numbers = [Int]()\n    var primeNumbers = [Int]()\n    for i in 1...a\
    \ {\n        numbers.append(i)\n    }\n    for i in numbers {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in primeNumbers\
    \ {\n        for j in primeNumbers {\n            for k in primeNumbers {\n  \
    \              if i * j * k == a {\n                    result = true\n      \
    \          }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsn2zs07b.swift:17:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var i\
    \ = 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = true\n\
    \            for j in 2..<i {\n                if i % j == 0 {\n             \
    \       is_prime = false\n                    break\n                }\n     \
    \       }\n            if is_prime {\n                prime_numbers.append(i)\n\
    \            }\n        }\n        i += 1\n    }\n    if prime_numbers.count ==\
    \ 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpb67cb79y/tmpb67cb79y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae96b1bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae96aeb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae96aeb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae96aeb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb67cb79y                        0x0000561e1111057b <unavailable> + 5499

    5    libc.so.6                          0x00002ae96b3ab460 __libc_start_main +
    245

    6    tmpb67cb79y                        0x0000561e11110149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 2 || a == 3 ||\
    \ a == 5 {\n        return true\n    }\n    if a % 2 == 0 {\n        return is_multiply_prime(a:\
    \ a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a: a /\
    \ 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a: a / 5)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmptt1qoyqd/tmptt1qoyqd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9098f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9098c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9098c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9098c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt1qoyqd                        0x0000561e37c08243 <unavailable> + 4675

    5    libc.so.6                          0x00002b9099134460 __libc_start_main +
    245

    6    tmptt1qoyqd                        0x0000561e37c07ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primeNumbers\
    \ {\n        if a % i == 0 {\n            a /= i\n        }\n    }\n    if a !=\
    \ 1 {\n        result = false\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmps8wx326t/tmps8wx326t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf57139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf56e30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf56e30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf56e2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8wx326t                        0x00005596dc2f14b3 <unavailable> + 5299

    5    libc.so.6                          0x00002aaf57325460 __libc_start_main +
    245

    6    tmps8wx326t                        0x00005596dc2f1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i+1..<primes.count {\n            for k in j+1..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzk4soxtp.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    var prime_number = 2\n    var is_prime = true\n    while prime_numbers.count\
    \ < 3 {\n        for i in 2...prime_number {\n            if prime_number % i\
    \ == 0 && i != prime_number {\n                is_prime = false\n            \
    \    break\n            }\n        }\n        if is_prime {\n            prime_numbers.append(prime_number)\n\
    \        }\n        is_prime = true\n        prime_number += 1\n    }\n    return\
    \ a == prime_numbers[0] * prime_numbers[1] * prime_numbers[2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpj6ut5c9q/tmpj6ut5c9q.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7650f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba764df0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba764df0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba764def7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6ut5c9q                        0x0000561b2af265cb <unavailable> + 5579

    5    libc.so.6                          0x00002ba7652e5460 __libc_start_main +
    245

    6    tmpj6ut5c9q                        0x0000561b2af26199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var number = a\n    var primes = [Int]()\n    for i in 2...number {\n   \
    \     while number % i == 0 {\n            primes.append(i)\n            number\
    \ /= i\n        }\n    }\n    if primes.count == 3 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var primeNumbersCount\
    \ = primeNumbers.count\n    var i = 0\n    while i < primeNumbersCount {\n   \
    \     if a % primeNumbers[i] == 0 {\n            a /= primeNumbers[i]\n      \
    \      i = 0\n        } else {\n            i += 1\n        }\n    }\n    if a\
    \ != 1 {\n        result = false\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpyvehhmyz/tmpyvehhmyz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac58cca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac58c9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac58c9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac58c99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvehhmyz                        0x0000564d86651403 <unavailable> + 5123

    5    libc.so.6                          0x00002ac58ce95460 __libc_start_main +
    245

    6    tmpyvehhmyz                        0x0000564d866510b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = 1\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes {\n       \
    \ if a % prime == 0 {\n            result *= prime\n            a /= prime\n \
    \       }\n    }\n    return result == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptzqkd9by/tmptzqkd9by.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5813d71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5813a68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5813a68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5813a677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzqkd9by                        0x0000563cb4fea527 <unavailable> + 5415

    5    libc.so.6                          0x00002b5813f5d460 __libc_start_main +
    245

    6    tmptzqkd9by                        0x0000563cb4fea169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i..<primes.count {\n            for k in j..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvi8_ysbk.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp101pwkyx.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers\
    \ = [Int]()\n    var is_prime = true\n    var i = 2\n    while a > 1 {\n     \
    \   is_prime = true\n        while i < a {\n            if a % i == 0 {\n    \
    \            is_prime = false\n                break\n            }\n        \
    \    i += 1\n        }\n        if is_prime {\n            prime_numbers.append(a)\n\
    \            a = 1\n        } else {\n            a /= i\n        }\n    }\n \
    \   return prime_numbers.count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptlptv4_2/tmptlptv4_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc067aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc064a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc064a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc064a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlptv4_2                        0x000055c0eebf7407 <unavailable> + 5127

    5    libc.so.6                          0x00002abc0699a460 __libc_start_main +
    245

    6    tmptlptv4_2                        0x000055c0eebf7049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    var number = a\n    for i in 2...number {\n        if is_prime(a: i) {\n\
    \            prime_numbers.append(i)\n            while number % i == 0 {\n  \
    \              number /= i\n            }\n        }\n    }\n    return prime_numbers.count\
    \ == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplqwkfk0.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var i = 2\n    var prime_numbers = [Int]()\n   \
    \ while i < a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \            a /= i\n        }\n        i += 1\n    }\n    if prime_numbers.count\
    \ == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwtres0nh.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var primeNumbers = [Int]()\n    for i in 2...a {\n       \
    \ if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n    }\n\
    \    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsux1ienp.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp101pwkyx.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i+1..<primes.count {\n            for k in j+1..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzk4soxtp.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var prime_numbers:\
    \ [Int] = []\n    var is_prime = true\n    var i = 2\n    while i <= a {\n   \
    \     if a % i == 0 {\n            for j in 2..<i {\n                if i % j\
    \ == 0 {\n                    is_prime = false\n                    break\n  \
    \              }\n            }\n            if is_prime {\n                prime_numbers.append(i)\n\
    \                a /= i\n            }\n            is_prime = true\n        }\n\
    \        i += 1\n    }\n    return prime_numbers.count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpei2q8msk/tmpei2q8msk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b347a4ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b347a1f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b347a1f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b347a1f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpei2q8msk                        0x0000562d1aae358b <unavailable> + 5515

    5    libc.so.6                          0x00002b347a6eb460 __libc_start_main +
    245

    6    tmpei2q8msk                        0x0000562d1aae3159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    var i = 2\n    while i <= a {\n\
    \        if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n\
    \        i += 1\n    }\n    var j = 0\n    while j < prime_numbers.count {\n \
    \       var k = j + 1\n        while k < prime_numbers.count {\n            var\
    \ l = k + 1\n            while l < prime_numbers.count {\n                if prime_numbers[j]\
    \ * prime_numbers[k] * prime_numbers[l] == a {\n                    is_multiply_prime\
    \ = true\n                }\n                l += 1\n            }\n         \
    \   k += 1\n        }\n        j += 1\n    }\n    return is_multiply_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2njykxbs.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var primeNumbers = [Int]()\n    for i in 2...a {\n       \
    \ if is_prime(a: i) {\n            primeNumbers.append(i)\n        }\n    }\n\
    \    for i in 0..<primeNumbers.count {\n        if a % primeNumbers[i] == 0 {\n\
    \            a /= primeNumbers[i]\n            if a == 1 {\n                result\
    \ = true\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqoq159nu.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4yxkngjw.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxoej5pa8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    var a = a\n    while isPrime && i < a {\n        if a % i\
    \ == 0 {\n            a /= i\n            if is_prime(a: i) && is_prime(a: a)\
    \ {\n                isPrime = true\n            } else {\n                isPrime\
    \ = false\n            }\n        } else {\n            i += 1\n        }\n  \
    \  }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpw82gkawb.swift:16:16: error: cannot find 'is_prime' in scope\n\
    \            if is_prime(a: i) && is_prime(a: a) {\n               ^~~~~~~~\n\
    /tmp/tmpw82gkawb.swift:16:34: error: cannot find 'is_prime' in scope\n       \
    \     if is_prime(a: i) && is_prime(a: a) {\n                                \
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n  \
    \      }\n        isPrime = true\n    }\n    var result = 1\n    for i in primeNumbers\
    \ {\n        if a % i == 0 {\n            result *= i\n        }\n    }\n    return\
    \ result == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpsb1cfkns/tmpsb1cfkns.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbd89d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbd86cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbd86cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbd86ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb1cfkns                        0x0000558cdb14c693 <unavailable> + 5779

    5    libc.so.6                          0x00002adbd8bc0460 __libc_start_main +
    245

    6    tmpsb1cfkns                        0x0000558cdb14c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a < 6 {\n        return\
    \ false\n    }\n    var prime_numbers = [2, 3, 5]\n    var result = false\n  \
    \  for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_d9xcat7.swift:16:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var i = 2\n    var j = 2\n    var k = 2\n    while i <= a {\n        while\
    \ j <= a {\n            while k <= a {\n                if i * j * k == a {\n\
    \                    result = true\n                }\n                k += 1\n\
    \            }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmplg8n80hm/tmplg8n80hm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1783a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab17809fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab17809f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab17809e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplg8n80hm                        0x000055edeb88d227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab178594460 __libc_start_main +
    245

    6    tmplg8n80hm                        0x000055edeb88ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2pzyywvk.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var a = a\n    for i in 2...a {\n        if a % i == 0 {\n            a /=\
    \ i\n            if is_prime(a: i) == false {\n                isPrime = false\n\
    \            }\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2vvcsju7.swift:15:16: error: cannot find 'is_prime' in scope\n\
    \            if is_prime(a: i) == false {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ {\n                    result = true\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpeb5gknye.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in prime_numbers {\n        if a % i == 0 {\n         \
    \   a = a / i\n        }\n    }\n    if a == 1 {\n        is_multiply_prime =\
    \ true\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4dsid0gr.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var num = a\n    var i = 2\n    while i < num {\n        if num % i == 0\
    \ {\n            num = num / i\n            is_prime = false\n        } else {\n\
    \            i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpcacyl1cf/tmpcacyl1cf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26da6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26d761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26d761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26d7607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcacyl1cf                        0x000055c5660aa243 <unavailable> + 4675

    5    libc.so.6                          0x00002ac26dc56460 __libc_start_main +
    245

    6    tmpcacyl1cf                        0x000055c5660a9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n       \
    \ return false\n    }\n    var a = a\n    var prime_numbers = [Int]()\n    var\
    \ i = 2\n    while a > 1 {\n        if a % i == 0 {\n            prime_numbers.append(i)\n\
    \            a /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return prime_numbers.count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var isMultiply = false\n    var primeNumbers = [Int]()\n    var primeNumbersCount\
    \ = 0\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n           \
    \ isPrime = true\n            for j in 2..<i {\n                if i % j == 0\
    \ {\n                    isPrime = false\n                    break\n        \
    \        }\n            }\n            if isPrime {\n                primeNumbers.append(i)\n\
    \                primeNumbersCount += 1\n            }\n        }\n        i +=\
    \ 1\n    }\n    if primeNumbersCount == 3 {\n        isMultiply = true\n    }\n\
    \    return isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp20dlooq8/tmp20dlooq8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b13d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b13a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b13a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b13a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20dlooq8                        0x0000556c3a1d24cb <unavailable> + 5323

    5    libc.so.6                          0x00002b2b13f1e460 __libc_start_main +
    245

    6    tmp20dlooq8                        0x0000556c3a1d2099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime\
    \ = false\n        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7c1ylsrn/tmp7c1ylsrn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b0bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b08f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b08f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b08f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c1ylsrn                        0x000055ec5fb12243 <unavailable> + 4675

    5    libc.so.6                          0x00002b23b0deb460 __libc_start_main +
    245

    6    tmp7c1ylsrn                        0x000055ec5fb11ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            result = true\n        } else {\n            i\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpdy10lxzq/tmpdy10lxzq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8645641c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8645338b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8645338988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86453377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy10lxzq                        0x0000563f7e0ac3a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b864582d460 __libc_start_main +
    245

    6    tmpdy10lxzq                        0x0000563f7e0abef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            isPrime = false\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3it4mgn8/tmp3it4mgn8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d16d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d16a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d16a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d16a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3it4mgn8                        0x000055e771402243 <unavailable> + 4675

    5    libc.so.6                          0x00002b0d16f6c460 __libc_start_main +
    245

    6    tmp3it4mgn8                        0x000055e771401ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var i = 2\n    var a = a\n    while i < a {\n        if a % i == 0 {\n  \
    \          is_prime = false\n            a = a / i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpy7xn78un/tmpy7xn78un.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8327f8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8327c85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8327c85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8327c847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7xn78un                        0x00005618a8d60243 <unavailable> + 4675

    5    libc.so.6                          0x00002b832817a460 __libc_start_main +
    245

    6    tmpy7xn78un                        0x00005618a8d5fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var count = 0\n    for i in 2...a {\n        if a % i == 0 {\n          \
    \  for j in 2...i {\n                if i % j == 0 {\n                    count\
    \ += 1\n                }\n            }\n            if count > 1 {\n       \
    \         is_prime = false\n            }\n            count = 0\n        }\n\
    \    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpg1n92z85/tmpg1n92z85.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b314effcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b314ecf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b314ecf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b314ecf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1n92z85                        0x0000560e4d560333 <unavailable> + 4915

    5    libc.so.6                          0x00002b314f1e8460 __libc_start_main +
    245

    6    tmpg1n92z85                        0x0000560e4d55ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        is_prime = true\n\
    \        for j in 2..<i {\n            if i % j == 0 {\n                is_prime\
    \ = false\n                break\n            }\n        }\n        if is_prime\
    \ {\n            prime_numbers.append(i)\n        }\n    }\n    var is_multiply_prime\
    \ = false\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i..<primes.count {\n            for k in j..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvi8_ysbk.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primes.append(i)\n        }\n    }\n    for i in primes {\n\
    \        if a % i == 0 {\n            a /= i\n        }\n    }\n    for i in primes\
    \ {\n        if a % i == 0 {\n            a /= i\n        }\n    }\n    for i\
    \ in primes {\n        if a % i == 0 {\n            a /= i\n        }\n    }\n\
    \    if a == 1 {\n        result = true\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpx33hk4j7.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a <= 0 {\n       \
    \ return false\n    }\n    var prime_numbers = [Int]()\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n\
    \    }\n    var result = false\n    for i in 0..<prime_numbers.count {\n     \
    \   for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_gro4wkw.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var number = a\n    var primeNumbers = [Int]()\n    var i = 2\n \
    \   while i < number {\n        if number % i == 0 {\n            primeNumbers.append(i)\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    if primeNumbers.count == 2 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes\
    \ = [Int]()\n    while a > 1 {\n        for i in 2...a {\n            if a % i\
    \ == 0 {\n                primes.append(i)\n                a /= i\n         \
    \       break\n            }\n        }\n    }\n    return primes.count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primeNumbers = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    var result = false\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers: [Int] = []\n    for i in 2...a {\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n  \
    \      }\n        isPrime = true\n    }\n    var counter = 0\n    for i in primeNumbers\
    \ {\n        if a % i == 0 {\n            counter += 1\n        }\n    }\n   \
    \ if counter == 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp1ekunvc5/tmp1ekunvc5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64a6a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64a39eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64a39e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64a39d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ekunvc5                        0x000055fdfc3b979b <unavailable> + 6043

    5    libc.so.6                          0x00002af64a893460 __libc_start_main +
    245

    6    tmp1ekunvc5                        0x000055fdfc3b9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var num = a\n    var\
    \ count = 0\n    for i in 2...num {\n        while num % i == 0 {\n          \
    \  num /= i\n            count += 1\n        }\n    }\n    return count == 3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var isMultiply = false\n    var i = 2\n    var j = 2\n    var k = 2\n   \
    \ while isPrime {\n        if a % i == 0 {\n            isPrime = false\n    \
    \        while isMultiply == false {\n                if a % j == 0 && a % k ==\
    \ 0 {\n                    isMultiply = true\n                }\n            \
    \    else {\n                    j += 1\n                    k += 1\n        \
    \        }\n            }\n        }\n        else {\n            i += 1\n   \
    \     }\n    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpc86at3by/tmpc86at3by.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d65a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d656fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d656fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d656fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc86at3by                        0x00005639b5d19243 <unavailable> + 4675

    5    libc.so.6                          0x00002b2d65bf2460 __libc_start_main +
    245

    6    tmpc86at3by                        0x00005639b5d18ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    var num = a\n    for i in 2...num\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \      while num % i == 0 {\n                num /= i\n            }\n       \
    \ }\n    }\n    if prime_numbers.count == 3 {\n        is_multiply_prime = true\n\
    \    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi5tvwdnb.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var primeNumbers = [Int]()\n    for i in 1...a {\n        if isPrimeNumber(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3c19wqzq.swift:13:12: error: cannot find 'isPrimeNumber' in scope\n\
    \        if isPrimeNumber(a: i) {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqxx41uk4.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var primes = [Int]()\n    var i = 2\n    while i <= a {\n      \
    \  if is_prime(a: i) {\n            primes.append(i)\n            a /= i\n   \
    \     } else {\n            i += 1\n        }\n    }\n    if primes.count != 3\
    \ {\n        result = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp41ejp0_4.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n\
    \    var i = 2\n    while i < a {\n        if a % i == 0 {\n            isPrime\
    \ = false\n        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7c1ylsrn/tmp7c1ylsrn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b0bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b08f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b08f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b08f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7c1ylsrn                        0x000055ec5fb12243 <unavailable> + 4675

    5    libc.so.6                          0x00002b23b0deb460 __libc_start_main +
    245

    6    tmp7c1ylsrn                        0x000055ec5fb11ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n        \
    \    a /= i\n            result = is_prime(a: i)\n            if !result {\n \
    \               break\n            }\n        } else {\n            i += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp16vejvrf.swift:16:22: error: cannot find 'is_prime' in scope\n\
    \            result = is_prime(a: i)\n                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var number = a\n    var\
    \ isPrime = true\n    var i = 2\n    while i < number {\n        if number % i\
    \ == 0 {\n            isPrime = false\n            break\n        }\n        i\
    \ += 1\n    }\n    if isPrime {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpz5_wttvr/tmpz5_wttvr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c898d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c895cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c895cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c895ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5_wttvr                        0x000056541e02e243 <unavailable> + 4675

    5    libc.so.6                          0x00002b1c89ac4460 __libc_start_main +
    245

    6    tmpz5_wttvr                        0x000056541e02def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n\
    \    var is_prime = true\n    var i = 2\n    while i <= a {\n        for j in\
    \ 2..<i {\n            if i % j == 0 {\n                is_prime = false\n   \
    \             break\n            }\n        }\n        if is_prime {\n       \
    \     prime_numbers.append(i)\n        }\n        is_prime = true\n        i +=\
    \ 1\n    }\n    var result = 1\n    for i in prime_numbers {\n        if result\
    \ * i <= a {\n            result *= i\n        }\n    }\n    return result ==\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\n\
    assert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a: 8) == true)\n\
    assert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a: 125) ==\
    \ true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpwzeo1s0r/tmpwzeo1s0r.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c65388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6507fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c6507f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c6507e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzeo1s0r                        0x000055912bba468b <unavailable> + 5771

    5    libc.so.6                          0x00002b7c65574460 __libc_start_main +
    245

    6    tmpwzeo1s0r                        0x000055912bba4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var i = 0\n    while i < prime.count\
    \ {\n        if a % prime[i] == 0 {\n            result = true\n            break\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpmc2_bl4q/tmpmc2_bl4q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9ecb82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9ec879b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9ec879988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9ec8787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmc2_bl4q                        0x0000564085c71403 <unavailable> + 5123

    5    libc.so.6                          0x00002ab9ecd6e460 __libc_start_main +
    245

    6    tmpmc2_bl4q                        0x0000564085c710b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var number = a\n    var primes = [Int]()\n    for i in 2...number {\n   \
    \     while number % i == 0 {\n            primes.append(i)\n            number\
    \ /= i\n        }\n    }\n    if primes.count == 3 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a\
    \ {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n      \
    \  }\n    }\n    for i in 0..<prime_numbers.count {\n        if a % prime_numbers[i]\
    \ == 0 {\n            a = a / prime_numbers[i]\n            if a == 1 {\n    \
    \            is_multiply_prime = true\n                break\n            }\n\
    \        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzqcnno55.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    for i in 2...a {\n        if a % i == 0 {\n            is_prime\
    \ = is_prime_number(a: i)\n            if is_prime {\n                a = a /\
    \ i\n            }\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0t1dxrm1.swift:14:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7gdgkasa.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers: [Int] = []\n    for i in 2...a {\n        if\
    \ is_prime(a: i) {\n            prime_numbers.append(i)\n        }\n    }\n  \
    \  for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpebp8teyj.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n    var\
    \ a = a\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \            primeNumbersCount += 1\n        }\n    }\n    for i in 0..<primeNumbersCount\
    \ {\n        for j in 0..<primeNumbersCount {\n            for k in 0..<primeNumbersCount\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpin4od74i.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var a = a\n    var i = 2\n    var count = 0\n    while i < a {\n        if\
    \ a % i == 0 {\n            a /= i\n            count += 1\n        } else {\n\
    \            i += 1\n        }\n    }\n    if count == 2 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824459
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          a /= i\n            is_prime = is_prime && is_prime_number(a: i)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpskj40907.swift:16:36: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime && is_prime_number(a: i)\n                  \
    \                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var isPrime\
    \ = true\n    var primeNumbers = [Int]()\n    var i = 2\n    while i < a {\n \
    \       if a % i == 0 {\n            primeNumbers.append(i)\n            a /=\
    \ i\n        } else {\n            i += 1\n        }\n    }\n    if primeNumbers.count\
    \ != 3 {\n        isPrime = false\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpq3ftcoqn/tmpq3ftcoqn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20380b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2037da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2037da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2037da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3ftcoqn                        0x000055e465363407 <unavailable> + 5127

    5    libc.so.6                          0x00002b203829d460 __libc_start_main +
    245

    6    tmpq3ftcoqn                        0x000055e465363049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var i = 2\n    var a = a\n    while a > 1 {\n        if a % i == 0 {\n  \
    \          a /= i\n            is_prime = is_prime_number(a: i)\n            if\
    \ !is_prime {\n                return false\n            }\n        } else {\n\
    \            i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjnelozer.swift:16:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result\
    \ = true\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n        \
    \    a /= i\n            result = is_prime(a: i)\n            if result == false\
    \ {\n                break\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpopa5fylw.swift:16:22: error: cannot find 'is_prime' in scope\n\
    \            result = is_prime(a: i)\n                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in primes {\n     \
    \   for j in primes {\n            for k in primes {\n                if i * j\
    \ * k == a {\n                    result = true\n                }\n         \
    \   }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1lanyjyg.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    var prime_numbers_count = 0\n\
    \    var a = a\n    for i in 2...a {\n        if is_prime(a: i) {\n          \
    \  prime_numbers.append(i)\n            prime_numbers_count += 1\n        }\n\
    \    }\n    for i in 0..<prime_numbers_count {\n        for j in 0..<prime_numbers_count\
    \ {\n            for k in 0..<prime_numbers_count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfxppc7j8.swift:15:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers: [Int]\
    \ = []\n    var prime_numbers_count = 0\n    var a = a\n    for i in 2...a {\n\
    \        if is_prime(a: i) {\n            prime_numbers.append(i)\n          \
    \  prime_numbers_count += 1\n        }\n    }\n    for i in 0..<prime_numbers_count\
    \ {\n        for j in 0..<prime_numbers_count {\n            for k in 0..<prime_numbers_count\
    \ {\n                if a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxdikdqu9.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var is_multiply\
    \ = false\n    var count = 0\n    for i in 2...a {\n        if a % i == 0 {\n\
    \            a /= i\n            count += 1\n            if count == 3 {\n   \
    \             is_multiply = true\n                break\n            }\n     \
    \   }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpmxizqnbn/tmpmxizqnbn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c9f19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c9c10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9c9c10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9c9c0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxizqnbn                        0x000055a842ae041b <unavailable> + 5147

    5    libc.so.6                          0x00002ae9ca105460 __libc_start_main +
    245

    6    tmpmxizqnbn                        0x000055a842adffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime =\
    \ false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprgymk17q.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n\
    \    var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n  \
    \          is_prime = false\n            a = a / i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmptt8fbsg1/tmptt8fbsg1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca8123cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca80f33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca80f33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca80f327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt8fbsg1                        0x0000560ba680d243 <unavailable> + 4675

    5    libc.so.6                          0x00002aca81428460 __libc_start_main +
    245

    6    tmptt8fbsg1                        0x0000560ba680cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var num = a\n    var primes = [Int]()\n    for i in 2...num {\n        while\
    \ num % i == 0 {\n            primes.append(i)\n            num /= i\n       \
    \ }\n    }\n    if primes.count == 3 {\n        result = true\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824536
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2\
    \ * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    var result = false\n\
    \    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i+1..<primeNumbers.count {\n            for k in j+1..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnjnla3hm.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824459
