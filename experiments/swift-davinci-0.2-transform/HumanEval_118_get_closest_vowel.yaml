name: HumanEval_118_get_closest_vowel
language: swift
prompt: "\n/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
  \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n\
  /// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
  \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"\
  u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
  \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
  \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"Above\") == \"o\")"
completions: ["    let vowels = \"aeiou\"\n    var closest_vowel = \"\"\n    var closest_index\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index - 1)]) &&\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index + 1)]) {\n\
    \                    if index < closest_index {\n                        closest_index\
    \ = index\n                        closest_vowel = String(char)\n            \
    \        }\n                }\n            }\n        }\n    }\n    return closest_vowel",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\
    \"\n    var closest_index = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let previous_char = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let next_char = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(previous_char))\
    \ && !vowels.contains(String(next_char)) {\n                    if index < closest_index\
    \ {\n                        closest_index = index\n                        closest_vowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closest_vowel", "    let vowels = \"aeiouAEIOU\"\n\
    \    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var closestConsonant = \"\"\n    var index = 0\n    for letter in word\
    \ {\n        if vowels.contains(letter) {\n            closestVowel = String(letter)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(letter)\
    \ {\n            closestConsonant = String(letter)\n            closestConsonantIndex\
    \ = index\n        }\n        if closestVowelIndex > closestConsonantIndex {\n\
    \            return closestVowel\n        }\n        index += 1\n    }\n    return\
    \ \"\"", "    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel: Character = \" \"\n    var vowelIndex: Int = -1\n    var consonantIndex:\
    \ Int = -1\n    var consonant: Character = \" \"\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowel = char\n          \
    \  vowelIndex = index\n        }\n        if consonants.contains(char) {\n   \
    \         consonant = char\n            consonantIndex = index\n        }\n  \
    \      if vowelIndex > consonantIndex {\n            return String(vowel)\n  \
    \      }\n    }\n    return \"\"", "    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    var closest_vowel = \"\"\n    var closest_vowel_index\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closest_vowel_index\
    \ {\n                        closest_vowel = String(char)\n                  \
    \      closest_vowel_index = index\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel", "    let vowels =\
    \ \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices.reversed()\
    \ {\n        if vowels.contains(word[i]) {\n            vowel = String(word[i])\n\
    \            index = word.distance(from: word.startIndex, to: i)\n        } else\
    \ if consonants.contains(word[i]) {\n            if index != 0 {\n           \
    \     return vowel\n            }\n        }\n    }\n    return \"\"", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            result\
    \ = String(char)\n            break\n        }\n        index -= 1\n    }\n  \
    \  return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var lastConsonantIndex\
    \ = 0\n    var lastVowelIndex = 0\n    var lastConsonant = \"\"\n    var lastVowel\
    \ = \"\"\n    for char in word.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            lastVowel = String(char)\n            lastVowelIndex = index\n\
    \        }\n        if consonants.contains(String(char)) {\n            lastConsonant\
    \ = String(char)\n            lastConsonantIndex = index\n        }\n        if\
    \ lastConsonantIndex > lastVowelIndex {\n            result = lastVowel\n    \
    \    }\n        index += 1\n    }\n    return result", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(String(char)) {\n       \
    \     vowel_index = index\n        }\n    }\n    if vowel_index == -1 {\n    \
    \    return \"\"\n    }\n    var closest_vowel = \"\"\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(String(char)) {\n          \
    \  if vowel_index < index {\n                closest_vowel = String(char)\n  \
    \              break\n            }\n        }\n    }\n    return closest_vowel",
  "    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var vowelIndex =\
    \ -1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowelIndex\
    \ = index\n        } else if consonants.contains(char) {\n            if vowelIndex\
    \ != -1 {\n                result = String(word[word.index(word.startIndex, offsetBy:\
    \ vowelIndex)])\n                break\n            }\n        }\n        index\
    \ -= 1\n    }\n    return result", "    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    var closestVowel = \"\"\n    var closestIndex\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel", "    let vowels = \"aeiou\"\n    let\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var closestVowel = \"\"\n    var\
    \ closestDistance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if consonants.contains(char) {\n            let distance = word.distance(from:\
    \ word.index(word.startIndex, offsetBy: index), to: word.endIndex)\n         \
    \   if distance < closestDistance {\n                closestDistance = distance\n\
    \                closestVowel = \"\"\n            }\n        } else if vowels.contains(char)\
    \ {\n            let distance = word.distance(from: word.index(word.startIndex,\
    \ offsetBy: index), to: word.endIndex)\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel", " \
    \   var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n\
    \    var index = 0\n    for char in word.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            if index == 0 {\n                result = String(char)\n    \
    \        } else if index % 2 == 0 {\n                result = String(char)\n \
    \           }\n        }\n        index += 1\n    }\n    return result", "   \
    \ let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var vowel_distance = 0\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if vowel_index == -1 {\n     \
    \                   vowel_index = index\n                        vowel_distance\
    \ = 1\n                    } else {\n                        if vowel_distance\
    \ > index - vowel_index {\n                            vowel_index = index\n \
    \                           vowel_distance = index - vowel_index\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    if vowel_index == -1 {\n        return \"\"\n    } else {\n\
    \        return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }", "    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    for i in stride(from:\
    \ index, to: 0, by: -1) {\n        if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i)]) {\n            return vowel\n        }\n    }\n    return \"\"",
  "    var result = \"\"\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var wordArray = Array(word)\n    var vowelIndex = 0\n   \
    \ var consonantIndex = 0\n    var vowelIndexArray = [Int]()\n    var consonantIndexArray\
    \ = [Int]()\n    for i in 0..<wordArray.count {\n        for j in 0..<vowels.count\
    \ {\n            if wordArray[i] == Character(vowels[j]) {\n                vowelIndex\
    \ = i\n                vowelIndexArray.append(vowelIndex)\n            }\n   \
    \     }\n        for k in 0..<consonants.count {\n            if wordArray[i]\
    \ == Character(consonants[k]) {\n                consonantIndex = i\n        \
    \        consonantIndexArray.append(consonantIndex)\n            }\n        }\n\
    \    }\n    var vowelIndexArraySorted = vowelIndexArray.sorted()\n    var consonantIndexArraySorted\
    \ = consonantIndexArray.sorted()\n    var vowelIndexArraySortedFiltered = vowelIndexArraySorted.filter\
    \ { $0 > 0 }\n    var consonantIndexArraySortedFiltered = consonantIndexArraySorted.filter\
    \ { $0 > 0 }\n    var vowelIndexArraySortedFilteredReversed = vowelIndexArraySortedFiltered.reversed()\n\
    \    var consonantIndexArraySortedFilteredReversed = consonantIndexArraySortedFiltered.reversed()\n\
    \    var vowelIndexArraySortedFilteredReversedFiltered = vowelIndexArraySortedFilteredReversed.filter\
    \ { $0 < wordArray.count - 1 }\n    var consonantIndexArraySortedFilteredReversedFiltered\
    \ = consonantIndexArraySortedFilteredReversed.filter { $0 < wordArray.count -\
    \ 1 }\n    var vowelIndexArraySortedFilteredReversedFilteredFiltered =", "   \
    \ let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var vowelFound = false\n    var consonantFound\
    \ = false\n    for (index, letter) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(letter)) {\n            closestVowel =\
    \ String(letter)\n            closestVowelIndex = index\n            vowelFound\
    \ = true\n        }\n        if consonants.contains(String(letter)) && vowelFound\
    \ {\n            closestConsonant = String(letter)\n            closestConsonantIndex\
    \ = index\n            consonantFound = true\n        }\n        if vowelFound\
    \ && consonantFound {\n            break\n        }\n    }\n    if vowelFound\
    \ && consonantFound && closestVowelIndex < closestConsonantIndex {\n        return\
    \ closestVowel\n    }\n    return \"\"", "    let vowels = \"aeiouAEIOU\"\n  \
    \  let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel\
    \ = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    var vowelDistance = 0\n    var\
    \ consonantDistance = 0\n    var closestVowelDistance = 0\n    var closestConsonantDistance\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let character = word[index]\n        if vowels.contains(character)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n            vowelDistance\
    \ = word.count - vowelIndex\n            if vowelDistance < closestVowelDistance\
    \ {\n                closestVowelDistance = vowelDistance\n                closestVowel\
    \ = String(character)\n            }\n        }\n        if consonants.contains(character)\
    \ {\n            consonantFound = true\n            consonantIndex = i\n     \
    \       consonantDistance = word.count - consonantIndex\n            if consonantDistance\
    \ < closestConsonantDistance {\n                closestConsonantDistance = consonantDistance\n\
    \                closestConsonant = String(character)\n            }\n       \
    \ }\n        if vowelFound && consonantFound {\n            if vowelDistance <\
    \ consonantDistance {\n                return closestVowel\n            }\n  \
    \      }\n    }\n    return \"\"", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    var word_array = Array(word)\n    var vowel_index\
    \ = -1\n    var consonant_index = -1\n    for i in 0..<word_array.count {\n  \
    \      if vowels.contains(String(word_array[i]).lowercased()) {\n            vowel_index\
    \ = i\n        }\n        if consonants.contains(String(word_array[i]).lowercased())\
    \ {\n            consonant_index = i\n        }\n        if vowel_index != -1\
    \ && consonant_index != -1 {\n            if vowel_index > consonant_index {\n\
    \                return String(word_array[vowel_index])\n            }\n     \
    \   }\n    }\n    return \"\"", "    let vowels = \"aeiouAEIOU\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowel = \"\"\n   \
    \ var index = 0\n    for i in word.indices {\n        if vowels.contains(word[i])\
    \ {\n            vowel = String(word[i])\n            index = word.distance(from:\
    \ word.startIndex, to: i)\n        }\n    }\n    if vowel == \"\" {\n        return\
    \ \"\"\n    }\n    var left = 0\n    var right = 0\n    for i in word.indices\
    \ {\n        if consonants.contains(word[i]) {\n            left = word.distance(from:\
    \ word.startIndex, to: i)\n            break\n        }\n    }\n    for i in word.indices.reversed()\
    \ {\n        if consonants.contains(word[i]) {\n            right = word.distance(from:\
    \ word.startIndex, to: i)\n            break\n        }\n    }\n    if left ==\
    \ 0 || right == 0 {\n        return \"\"\n    }\n    if index - left < right -\
    \ index {\n        return vowel\n    }\n    return \"\""]
stop_tokens:
- "\n}"
