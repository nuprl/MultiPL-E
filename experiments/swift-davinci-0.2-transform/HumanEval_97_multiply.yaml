name: HumanEval_97_multiply
language: swift
prompt: "\n/// Complete the function that takes two integers and returns \n/// the\
  \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n\
  /// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n///\
  \ 20\nfunc multiply(a: Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
  \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
  \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
  \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
  \ == 0)"
completions: ["    let a = a % 10\n    let b = b % 10\n    return a * b", '    return
    (a % 10) * (b % 10)', '    return abs(a % 10) * abs(b % 10)', '    return (a %
    10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b %
    10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a %\
    \ 10) * (b % 10)", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n\
    \    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n\
    \    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', '    return abs(a % 10) * abs(b % 10)',
  '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return\
    \ (a % 10) * (b % 10)", "    let a = abs(a)\n    let b = abs(b)\n    return (a\
    \ % 10) * (b % 10)", "    let a = a % 10\n    let b = b % 10\n    return a * b",
  '    return abs(a % 10) * abs(b % 10)', "    let a = abs(a)\n    let b = abs(b)\n\
    \    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', "    let a = a.description.last!\n    let b = b.description.last!\n\
    \    return Int(String(a))! * Int(String(b))!", "    let a = abs(a)\n    let b\
    \ = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)',
  "    let a = a % 10\n    let b = b % 10\n    return a * b", '    return (a % 10)
    * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return abs(a % 10)
    * abs(b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b %
    10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', "    let a = a % 10\n    let b = b % 10\n    return a *\
    \ b", '    return (a % 10) * (b % 10)', "    let a = a % 10\n    let b = b % 10\n\
    \    return a * b", "    let a = a % 10\n    let b = b % 10\n    return a * b",
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = a % 10\n\
    \    let b = b % 10\n    return a * b", '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b %\
    \ 10)", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b %\
    \ 10)", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', '    return abs(a % 10) * abs(b % 10)', '    return (a % 10) * (b %
    10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)",
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) *
    (b % 10)', "    let a = a % 10\n    let b = b % 10\n    return a * b", '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = a % 10\n\
    \    let b = b % 10\n    return a * b", "    let a = abs(a) % 10\n    let b =\
    \ abs(b) % 10\n    return a * b", '    return (a % 10) * (b % 10)', "    let a\
    \ = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a
    % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b
    % 10)', "    let a = a % 10\n    let b = b % 10\n    return a * b", '    return
    abs(a % 10) * abs(b % 10)', "    let aUnitDigit = a % 10\n    let bUnitDigit =\
    \ b % 10\n    return aUnitDigit * bUnitDigit", '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n\
    \    let b = abs(b)\n    return (a % 10) * (b % 10)", "    let a = abs(a)\n  \
    \  let b = abs(b)\n    return (a % 10) * (b % 10)", "    let a = abs(a % 10)\n\
    \    let b = abs(b % 10)\n    return a * b", '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    let\
    \ aUnitDigit = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit",
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a =\
    \ a % 10\n    let b = b % 10\n    return a * b", '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return\
    \ (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', "    let a = abs(a)\n\
    \    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return abs(a % 10)
    * abs(b % 10)', '    return (a % 10) * (b % 10)', '    return abs(a % 10) * abs(b
    % 10)', '    return (a % 10) * (b % 10)', "    let a = a % 10\n    let b = b %\
    \ 10\n    return a * b", '    return (a % 10) * (b % 10)', "    let a = abs(a)\n\
    \    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n\
    \    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', '    return
    abs(a % 10) * abs(b % 10)', '    return (a % 10) * (b % 10)', '    return (a %
    10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n    let\
    \ b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)',
  '    return (a % 10) * (b % 10)', "    let a = a % 10\n    let b = b % 10\n    return\
    \ a * b", '    return abs(a % 10) * abs(b % 10)', "    let a = abs(a)\n    let\
    \ b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)',
  "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return
    (a % 10) * (b % 10)', "    let a = a % 10\n    let b = b % 10\n    return a *\
    \ b", "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)",
  '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n\
    \    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', '    return abs(a % 10) * abs(b % 10)',
  '    return abs(a % 10) * abs(b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a %\
    \ 10) * (b % 10)", '    return abs(a % 10) * abs(b % 10)', '    return (a % 10)
    * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b\
    \ % 10)", "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b %\
    \ 10)", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return (a %\
    \ 10) * (b % 10)", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    abs(a % 10) * abs(b % 10)', "    let a = abs(a)\n    let b = abs(b)\n    return\
    \ (a % 10) * (b % 10)", '    return abs(a % 10) * abs(b % 10)', '    return (a
    % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10)', "    let a = a < 0 ? -a : a\n    let b = b < 0 ? -b : b\n\
    \    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)', "    let a\
    \ = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a
    % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = abs(a)\n   \
    \ let b = abs(b)\n    return (a % 10) * (b % 10)", "    let a = abs(a)\n    let\
    \ b = abs(b)\n    return (a % 10) * (b % 10)", '    return (a % 10) * (b % 10)',
  "    let a = abs(a)\n    let b = abs(b)\n    return (a % 10) * (b % 10)", '    return
    (a % 10) * (b % 10)', '    return (a % 10) * (b % 10)', "    let a = a % 10\n\
    \    let b = b % 10\n    return a * b", "    let a = a % 10\n    let b = b % 10\n\
    \    return a * b", '    return (a % 10) * (b % 10)', '    return (a % 10) * (b
    % 10)', '    return (a % 10) * (b % 10)']
stop_tokens:
- "\n}"
