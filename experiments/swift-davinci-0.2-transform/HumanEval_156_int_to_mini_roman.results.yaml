language: swift
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value)\
    \ in values.enumerated() {\n        while number >= value {\n            result\
    \ += roman_numerals[index]\n            number -= value\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var remaining = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        let number = numbers[index]\n\
    \        while remaining >= number {\n            result += numeral\n        \
    \    remaining -= number\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remaining = number\n    while remaining > 0 {\n        if remaining >= 1000\
    \ {\n            result += \"m\"\n            remaining -= 1000\n        } else\
    \ if remaining >= 900 {\n            result += \"cm\"\n            remaining -=\
    \ 900\n        } else if remaining >= 500 {\n            result += \"d\"\n   \
    \         remaining -= 500\n        } else if remaining >= 400 {\n           \
    \ result += \"cd\"\n            remaining -= 400\n        } else if remaining\
    \ >= 100 {\n            result += \"c\"\n            remaining -= 100\n      \
    \  } else if remaining >= 90 {\n            result += \"xc\"\n            remaining\
    \ -= 90\n        } else if remaining >= 50 {\n            result += \"l\"\n  \
    \          remaining -= 50\n        } else if remaining >= 40 {\n            result\
    \ += \"xl\"\n            remaining -= 40\n        } else if remaining >= 10 {\n\
    \            result += \"x\"\n            remaining -= 10\n        } else if remaining\
    \ >= 9 {\n            result += \"ix\"\n            remaining -= 9\n        }\
    \ else if remaining >= 5 {\n            result += \"v\"\n            remaining\
    \ -= 5\n        } else if remaining >= 4 {\n            result += \"iv\"\n   \
    \         remaining -= 4\n        } else if remaining >= 1 {\n            result\
    \ += \"i\"\n            remaining -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let arabic_numerals\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        let arabic_numeral = arabic_numerals[index]\n\
    \        while num >= arabic_numeral {\n            result += roman_numeral\n\
    \            num -= arabic_numeral\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\"i\", \"v\", \"x\", \"l\", \"c\"\
    , \"d\", \"m\"]\n    var index = 0\n    while number > 0 {\n        let digit\
    \ = number % 10\n        if digit < 4 {\n            result = String(repeating:\
    \ roman_numerals[index], count: digit) + result\n        } else if digit == 4\
    \ {\n            result = roman_numerals[index] + roman_numerals[index + 1] +\
    \ result\n        } else if digit == 5 {\n            result = roman_numerals[index\
    \ + 1] + result\n        } else if digit < 9 {\n            result = roman_numerals[index\
    \ + 1] + String(repeating: roman_numerals[index], count: digit - 5) + result\n\
    \        } else {\n            result = roman_numerals[index] + roman_numerals[index\
    \ + 2] + result\n        }\n        number /= 10\n        index += 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += roman_numeral\n            num -= numbers[index]\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for i in 0..<roman_numerals.count\
    \ {\n        while num >= values[i] {\n            num -= values[i]\n        \
    \    result += roman_numerals[i]\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remainder = number\n    while remainder > 0 {\n        if remainder >= 1000\
    \ {\n            result += \"m\"\n            remainder -= 1000\n        } else\
    \ if remainder >= 900 {\n            result += \"cm\"\n            remainder -=\
    \ 900\n        } else if remainder >= 500 {\n            result += \"d\"\n   \
    \         remainder -= 500\n        } else if remainder >= 400 {\n           \
    \ result += \"cd\"\n            remainder -= 400\n        } else if remainder\
    \ >= 100 {\n            result += \"c\"\n            remainder -= 100\n      \
    \  } else if remainder >= 90 {\n            result += \"xc\"\n            remainder\
    \ -= 90\n        } else if remainder >= 50 {\n            result += \"l\"\n  \
    \          remainder -= 50\n        } else if remainder >= 40 {\n            result\
    \ += \"xl\"\n            remainder -= 40\n        } else if remainder >= 10 {\n\
    \            result += \"x\"\n            remainder -= 10\n        } else if remainder\
    \ >= 9 {\n            result += \"ix\"\n            remainder -= 9\n        }\
    \ else if remainder >= 5 {\n            result += \"v\"\n            remainder\
    \ -= 5\n        } else if remainder >= 4 {\n            result += \"iv\"\n   \
    \         remainder -= 4\n        } else if remainder >= 1 {\n            result\
    \ += \"i\"\n            remainder -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for i in 0..<roman_numerals.count\
    \ {\n        while num >= numbers[i] {\n            result += roman_numerals[i]\n\
    \            num -= numbers[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var roman_numeral = \"\"\n    var num = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while num >= numbers[index]\
    \ {\n            roman_numeral += numeral\n            num -= numbers[index]\n\
    \        }\n    }\n    return roman_numeral\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remaining = number\n    while remaining > 0 {\n        if remaining >= 1000\
    \ {\n            result += \"m\"\n            remaining -= 1000\n        } else\
    \ if remaining >= 900 {\n            result += \"cm\"\n            remaining -=\
    \ 900\n        } else if remaining >= 500 {\n            result += \"d\"\n   \
    \         remaining -= 500\n        } else if remaining >= 400 {\n           \
    \ result += \"cd\"\n            remaining -= 400\n        } else if remaining\
    \ >= 100 {\n            result += \"c\"\n            remaining -= 100\n      \
    \  } else if remaining >= 90 {\n            result += \"xc\"\n            remaining\
    \ -= 90\n        } else if remaining >= 50 {\n            result += \"l\"\n  \
    \          remaining -= 50\n        } else if remaining >= 40 {\n            result\
    \ += \"xl\"\n            remaining -= 40\n        } else if remaining >= 10 {\n\
    \            result += \"x\"\n            remaining -= 10\n        } else if remaining\
    \ >= 9 {\n            result += \"ix\"\n            remaining -= 9\n        }\
    \ else if remaining >= 5 {\n            result += \"v\"\n            remaining\
    \ -= 5\n        } else if remaining >= 4 {\n            result += \"iv\"\n   \
    \         remaining -= 4\n        } else if remaining >= 1 {\n            result\
    \ += \"i\"\n            remaining -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let decimal_values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        let decimal_value = decimal_values[index]\n\
    \        while number >= decimal_value {\n            result += roman_numeral\n\
    \            number -= decimal_value\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var num = number\n    var result = \"\"\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        let number = numbers[index]\n    \
    \    while num >= number {\n            result += roman_numeral\n            num\
    \ -= number\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ remaining = number\n    while remaining > 0 {\n        if remaining >= 1000\
    \ {\n            result += \"m\"\n            remaining -= 1000\n        } else\
    \ if remaining >= 900 {\n            result += \"cm\"\n            remaining -=\
    \ 900\n        } else if remaining >= 500 {\n            result += \"d\"\n   \
    \         remaining -= 500\n        } else if remaining >= 400 {\n           \
    \ result += \"cd\"\n            remaining -= 400\n        } else if remaining\
    \ >= 100 {\n            result += \"c\"\n            remaining -= 100\n      \
    \  } else if remaining >= 90 {\n            result += \"xc\"\n            remaining\
    \ -= 90\n        } else if remaining >= 50 {\n            result += \"l\"\n  \
    \          remaining -= 50\n        } else if remaining >= 40 {\n            result\
    \ += \"xl\"\n            remaining -= 40\n        } else if remaining >= 10 {\n\
    \            result += \"x\"\n            remaining -= 10\n        } else if remaining\
    \ >= 9 {\n            result += \"ix\"\n            remaining -= 9\n        }\
    \ else if remaining >= 5 {\n            result += \"v\"\n            remaining\
    \ -= 5\n        } else if remaining >= 4 {\n            result += \"iv\"\n   \
    \         remaining -= 4\n        } else if remaining >= 1 {\n            result\
    \ += \"i\"\n            remaining -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpf5kqi_wn/tmpf5kqi_wn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea466cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea4363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ea4363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ea43627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5kqi_wn                        0x000055ec012de333 <unavailable> + 4915

    5    libc.so.6                          0x00002b1ea4858460 __libc_start_main +
    245

    6    tmpf5kqi_wn                        0x000055ec012ddf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            if digit >=\
    \ 5 {\n                result = roman_numerals[i + 1] + result\n             \
    \   digit -= 5\n            }\n            for _ in 0..<digit {\n            \
    \    result = roman_numerals[i] + result\n            }\n        }\n        num\
    \ /= 10\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpylygjey1.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmpylygjey1.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = num % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\"]\n    var i = 0\n    while num > 0 {\n        let digit = num % 10\n\
    \        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            if digit >=\
    \ 5 {\n                result = roman_numerals[i + 1] + result\n             \
    \   digit -= 5\n            }\n            for _ in 0..<digit {\n            \
    \    result = roman_numerals[i] + result\n            }\n        }\n        num\
    \ /= 10\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpy635xnbq.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmpy635xnbq.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = num % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var number = number\n   \
    \ var result = \"\"\n    while number > 0 {\n        if number >= 1000 {\n   \
    \         result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while number >= numbers[index]\
    \ {\n            result += numeral\n            number -= numbers[index]\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while number >= numbers[index]\
    \ {\n            result += numeral\n            number -= numbers[index]\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var roman = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while number >= numbers[index]\
    \ {\n            result += numeral\n            number -= numbers[index]\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    let roman_numerals = [\n        (1000, \"m\"),\n      \
    \  (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100,\
    \ \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n\
    \        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4,\
    \ \"iv\"),\n        (1, \"i\")\n    ]\n    for (arabic, roman) in roman_numerals\
    \ {\n        while number >= arabic {\n            result += roman\n         \
    \   number -= arabic\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 4 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 1] + result\n        } else if digit == 9 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 2] + result\n        } else {\n            if digit >=\
    \ 5 {\n                result = roman_numerals[i + 1] + result\n             \
    \   digit -= 5\n            }\n            result = String(repeating: roman_numerals[i],\
    \ count: digit) + result\n        }\n        num /= 10\n        i += 2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmphah2kj4l.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmphah2kj4l.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = num % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\n\
    \        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\"\n    ]\n    let values = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]\n    var roman_string = \"\"\n    var num = number\n\
    \    for (index, value) in values.enumerated() {\n        while num >= value {\n\
    \            roman_string += roman_numerals[index]\n            num -= value\n\
    \        }\n    }\n    return roman_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ roman = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            roman\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    roman += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            roman += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            roman += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            roman += \"c\"\n            num -= 100\n        }\
    \ else if num >= 90 {\n            roman += \"xc\"\n            num -= 90\n  \
    \      } else if num >= 50 {\n            roman += \"l\"\n            num -= 50\n\
    \        } else if num >= 40 {\n            roman += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            roman += \"x\"\n            num\
    \ -= 10\n        } else if num >= 9 {\n            roman += \"ix\"\n         \
    \   num -= 9\n        } else if num >= 5 {\n            roman += \"v\"\n     \
    \       num -= 5\n        } else if num >= 4 {\n            roman += \"iv\"\n\
    \            num -= 4\n        } else if num >= 1 {\n            roman += \"i\"\
    \n            num -= 1\n        }\n    }\n    return roman\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= values[index] {\n   \
    \         result += roman_numeral\n            num -= values[index]\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var remainder = number\n    for (index,\
    \ value) in values.enumerated() {\n        while remainder >= value {\n      \
    \      result += roman_numerals[index]\n            remainder -= value\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\n\
    \        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\"\n    ]\n    let decimal_numbers = [\n        1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    var result = \"\"\
    \n    var num = number\n    for (index, decimal_number) in decimal_numbers.enumerated()\
    \ {\n        while num >= decimal_number {\n            result += roman_numerals[index]\n\
    \            num -= decimal_number\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var remaining = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        let number = numbers[index]\n\
    \        while remaining >= number {\n            result += numeral\n        \
    \    remaining -= number\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpf5kqi_wn/tmpf5kqi_wn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea466cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea4363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ea4363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ea43627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5kqi_wn                        0x000055ec012de333 <unavailable> + 4915

    5    libc.so.6                          0x00002b1ea4858460 __libc_start_main +
    245

    6    tmpf5kqi_wn                        0x000055ec012ddf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 900 {\n        result += \"cm\"\n        num\
    \ -= 900\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\n        num\
    \ -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n        num\
    \ -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n        num -= 40\n\
    \    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n  \
    \  }\n    while num >= 9 {\n        result += \"ix\"\n        num -= 9\n    }\n\
    \    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n    while\
    \ num >= 4 {\n        result += \"iv\"\n        num -= 4\n    }\n    while num\
    \ >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpl3y4mwyl/tmpl3y4mwyl.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b971a00bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9719d02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9719d02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9719d017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3y4mwyl                        0x00005639cc7d3333 <unavailable> + 4915

    5    libc.so.6                          0x00002b971a1f7460 __libc_start_main +
    245

    6    tmpl3y4mwyl                        0x00005639cc7d2f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpf5kqi_wn/tmpf5kqi_wn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea466cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea4363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ea4363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ea43627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5kqi_wn                        0x000055ec012de333 <unavailable> + 4915

    5    libc.so.6                          0x00002b1ea4858460 __libc_start_main +
    245

    6    tmpf5kqi_wn                        0x000055ec012ddf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 9 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 2] + result\n        } else if digit == 4 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 1] + result\n        } else {\n            let five = digit\
    \ / 5\n            let one = digit % 5\n            if five == 1 {\n         \
    \       result = roman_numerals[i + 1] + result\n            }\n            for\
    \ _ in 0..<one {\n                result = roman_numerals[i] + result\n      \
    \      }\n        }\n        num /= 10\n        i += 2\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: Exception
  stderr: 'tmpp04gqu48/tmpp04gqu48.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52564cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52561c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52561c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52561c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp04gqu48                        0x00005632347368f9 <unavailable> + 6393

    5    libc.so.6                          0x00002b52566ba460 __libc_start_main +
    245

    6    tmpp04gqu48                        0x00005632347362b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var\
    \ num = number\n    var i = 0\n    while num > 0 {\n        let digit = num %\
    \ 10\n        if digit == 9 {\n            result = roman_numerals[i] + roman_numerals[i\
    \ + 2] + result\n        } else if digit == 4 {\n            result = roman_numerals[i]\
    \ + roman_numerals[i + 1] + result\n        } else {\n            if digit >=\
    \ 5 {\n                result = roman_numerals[i + 1] + result\n             \
    \   digit -= 5\n            }\n            for _ in 0..<digit {\n            \
    \    result = roman_numerals[i] + result\n            }\n        }\n        num\
    \ /= 10\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpc78nm9.swift:26:23: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n                digit -= 5\n         \
    \       ~~~~~ ^\n/tmp/tmpnpc78nm9.swift:18:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let digit = num % 10\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: -4
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 1000 {\n        result += \"m\"\n        num\
    \ -= 1000\n    }\n    while num >= 500 {\n        result += \"d\"\n        num\
    \ -= 500\n    }\n    while num >= 100 {\n        result += \"c\"\n        num\
    \ -= 100\n    }\n    while num >= 50 {\n        result += \"l\"\n        num -=\
    \ 50\n    }\n    while num >= 10 {\n        result += \"x\"\n        num -= 10\n\
    \    }\n    while num >= 5 {\n        result += \"v\"\n        num -= 5\n    }\n\
    \    while num >= 1 {\n        result += \"i\"\n        num -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: Exception
  stderr: 'tmpf5kqi_wn/tmpf5kqi_wn.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ea466cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ea4363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ea4363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ea43627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5kqi_wn                        0x000055ec012de333 <unavailable> + 4915

    5    libc.so.6                          0x00002b1ea4858460 __libc_start_main +
    245

    6    tmpf5kqi_wn                        0x000055ec012ddf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var number = number\n    for (index,\
    \ numeral) in roman_numerals.enumerated() {\n        while number >= values[index]\
    \ {\n            result += numeral\n            number -= values[index]\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let decimal_values = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remainder = number\n   \
    \ for (index, numeral) in roman_numerals.enumerated() {\n        while remainder\
    \ >= decimal_values[index] {\n            result += numeral\n            remainder\
    \ -= decimal_values[index]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ number = number\n    while number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var num = number\n    var\
    \ result = \"\"\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for (index, value)\
    \ in values.enumerated() {\n        while num >= value {\n            result +=\
    \ roman_numerals[index]\n            num -= value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    var result = \"\"\n    var num = number\n    for (index, numeral)\
    \ in roman_numerals.enumerated() {\n        while num >= numbers[index] {\n  \
    \          result += numeral\n            num -= numbers[index]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(int_to_mini_roman(number:\
    \ 19) == \"xix\")\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
    \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
    \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
    \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
    \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
    \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
    \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
- exit_code: 0
  program: "\n/// Given a positive integer, obtain its roman numeral equivalent as\
    \ a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
    \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\n\
    func int_to_mini_roman(number: Int) -> String {\n    var result = \"\"\n    var\
    \ num = number\n    while num > 0 {\n        if num >= 1000 {\n            result\
    \ += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n        \
    \    result += \"cm\"\n            num -= 900\n        } else if num >= 500 {\n\
    \            result += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            result += \"cd\"\n            num -= 400\n        } else\
    \ if num >= 100 {\n            result += \"c\"\n            num -= 100\n     \
    \   } else if num >= 90 {\n            result += \"xc\"\n            num -= 90\n\
    \        } else if num >= 50 {\n            result += \"l\"\n            num -=\
    \ 50\n        } else if num >= 40 {\n            result += \"xl\"\n          \
    \  num -= 40\n        } else if num >= 10 {\n            result += \"x\"\n   \
    \         num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\
    \n            num -= 9\n        } else if num >= 5 {\n            result += \"\
    v\"\n            num -= 5\n        } else if num >= 4 {\n            result +=\
    \ \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\")\nassert(int_to_mini_roman(number:\
    \ 152) == \"clii\")\nassert(int_to_mini_roman(number: 251) == \"ccli\")\nassert(int_to_mini_roman(number:\
    \ 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number: 500) == \"d\")\nassert(int_to_mini_roman(number:\
    \ 1) == \"i\")\nassert(int_to_mini_roman(number: 4) == \"iv\")\nassert(int_to_mini_roman(number:\
    \ 43) == \"xliii\")\nassert(int_to_mini_roman(number: 90) == \"xc\")\nassert(int_to_mini_roman(number:\
    \ 94) == \"xciv\")\nassert(int_to_mini_roman(number: 532) == \"dxxxii\")\nassert(int_to_mini_roman(number:\
    \ 900) == \"cm\")\nassert(int_to_mini_roman(number: 994) == \"cmxciv\")\nassert(int_to_mini_roman(number:\
    \ 1000) == \"m\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014146
