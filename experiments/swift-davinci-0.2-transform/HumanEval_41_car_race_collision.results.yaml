language: swift
name: HumanEval_41_car_race_collision
results:
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if left[i] > right[j] {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp612hvvfk/tmp612hvvfk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b105787bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1057572b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1057572988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10575717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp612hvvfk                        0x000055e8cab0f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1057a67460 __libc_start_main +
    245

    6    tmp612hvvfk                        0x000055e8cab0f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    var j = 0\n\
    \    var count = 0\n    while i < n && j < n {\n        if left_to_right[i] <\
    \ right_to_left[j] {\n            left_to_right[i] += 1\n            i += 1\n\
    \        } else if left_to_right[i] > right_to_left[j] {\n            right_to_left[j]\
    \ += 1\n            j += 1\n        } else {\n            left_to_right[i] +=\
    \ 1\n            right_to_left[j] += 1\n            i += 1\n            j += 1\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp37t822zn/tmp37t822zn.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0daecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0d7e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0d7e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0d7e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37t822zn                        0x00005642b0e4d2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aae0dcd8460 __libc_start_main +
    245

    6    tmp37t822zn                        0x00005642b0e4cf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision_count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeFirst()\n        if left_car == right_car {\n        \
    \    collision_count += 1\n        }\n    }\n    return collision_count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8kxebmn9/tmp8kxebmn9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b1ac0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b1a906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b1a906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b1a9057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kxebmn9                        0x000055f7c357d575 <unavailable> + 5493

    5    libc.so.6                          0x00002b8b1adfb460 __libc_start_main +
    245

    6    tmp8kxebmn9                        0x000055f7c357d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(left_to_right: &left_to_right, right_to_left: &right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpz6cebwma.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right: &left_to_right, right_to_left:\
    \ &right_to_left)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = n - i\n        right_to_left[i] = i + 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps6xhbil8/tmps6xhbil8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acae8275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acae7f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acae7f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acae7f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6xhbil8                        0x000055ff0f536455 <unavailable> + 5205

    5    libc.so.6                          0x00002acae8461460 __libc_start_main +
    245

    6    tmps6xhbil8                        0x000055ff0f536109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = 0\n    var right = n - 1\n    var count = 0\n\
    \    while left < right {\n        if left == right {\n            count += 1\n\
    \        } else {\n            count += 2\n        }\n        left += 1\n    \
    \    right -= 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpo6ejchd4/tmpo6ejchd4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5146f91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5146c88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5146c88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5146c877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6ejchd4                        0x000056303a8341b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b514717d460 __libc_start_main +
    245

    6    tmpo6ejchd4                        0x000056303a833e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ result = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                result += 1\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp0_h1svmi/tmp0_h1svmi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19c405ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19c3d51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19c3d51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19c3d507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_h1svmi                        0x000055cc5f1d2455 <unavailable> + 5205

    5    libc.so.6                          0x00002b19c4246460 __libc_start_main +
    245

    6    tmp0_h1svmi                        0x000055cc5f1d2109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvmhv2a6m/tmpvmhv2a6m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa441e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa43eddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa43edd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa43edc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmhv2a6m                        0x000056085eac7565 <unavailable> + 5477

    5    libc.so.6                          0x00002baa443d2460 __libc_start_main +
    245

    6    tmpvmhv2a6m                        0x000056085eac7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    var i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    i = 0\n    while i < n {\n        if\
    \ left_to_right[i] == right_to_left[i] {\n            collision_count += 1\n \
    \       }\n        i += 1\n    }\n    return collision_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpa78lmqyr/tmpa78lmqyr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba795016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba794d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba794d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba794d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa78lmqyr                        0x0000564ea22c82c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ba795202460 __libc_start_main +
    245

    6    tmpa78lmqyr                        0x0000564ea22c7f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collisions += j\n            i += 1\n        } else {\n            j +=\
    \ 1\n        }\n    }\n    collisions += j * (n - i)\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyy18u584/tmpyy18u584.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4fa34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4f72bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4f72b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4f72a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyy18u584                        0x000055aa0cef1445 <unavailable> + 5189

    5    libc.so.6                          0x00002b1d4fc20460 __libc_start_main +
    245

    6    tmpyy18u584                        0x000055aa0cef10f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpopbqhmvo/tmpopbqhmvo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae984848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98453fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98453f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98453e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbqhmvo                        0x00005585de3a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae984a34460 __libc_start_main +
    245

    6    tmpopbqhmvo                        0x00005585de3a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(left_to_right, right_to_left)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmps7rt3orn.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeLast()\n        if left_car == right_car {\n         \
    \   collision += 1\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplez75ag4/tmplez75ag4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb358adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb355a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb355a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb355a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplez75ag4                        0x000056488206d5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002afb35a99460 __libc_start_main +
    245

    6    tmplez75ag4                        0x000056488206d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision_count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collision_count +=\
    \ 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5x5910sr/tmp5x5910sr.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2465f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2462ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2462eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2462ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5x5910sr                        0x0000563a5eac35c5 <unavailable> + 5573

    5    libc.so.6                          0x00002ab2467e0460 __libc_start_main +
    245

    6    tmp5x5910sr                        0x0000563a5eac3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int]()\n   \
    \ var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var i = 0\n    var j = 0\n\
    \    while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += 1\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpz0jbvs_5/tmpz0jbvs_5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d1e13fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d1de36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d1de36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d1de357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0jbvs_5                        0x0000560dab5d3445 <unavailable> + 5189

    5    libc.so.6                          0x00002b0d1e32b460 __libc_start_main +
    245

    6    tmpz0jbvs_5                        0x0000560dab5d30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if left[i] == right[j] {\n            \
    \    count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6ifmysgx/tmp6ifmysgx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75e52e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75e4fdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75e4fdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75e4fdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ifmysgx                        0x000055965f9ca455 <unavailable> + 5205

    5    libc.so.6                          0x00002b75e54d1460 __libc_start_main +
    245

    6    tmp6ifmysgx                        0x000055965f9ca109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(left_to_right, right_to_left)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmps7rt3orn.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n).reversed()\n    var collisions = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            collisions += 1\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp84j3kj9i.swift:18:13: error: referencing instance method 'removeFirst()'\
    \ on 'Collection' requires the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n/tmp/tmp84j3kj9i.swift:22:13:\
    \ error: referencing instance method 'removeFirst()' on 'Collection' requires\
    \ the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right_cars[i] == right_to_left_cars[j]\
    \ {\n            collisions += 1\n            i += 1\n            j += 1\n   \
    \     } else if left_to_right_cars[i] < right_to_left_cars[j] {\n            i\
    \ += 1\n        } else {\n            j += 1\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpc7_llbt2/tmpc7_llbt2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba34a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba319eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba319e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba319d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7_llbt2                        0x000055bc1c93c455 <unavailable> + 5205

    5    libc.so.6                          0x00002b5ba3693460 __libc_start_main +
    245

    6    tmpc7_llbt2                        0x000055bc1c93c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collision = 0\n    i = 0\n    while i < n {\n  \
    \      if left_to_right[i] == right_to_left[i] {\n            collision += 1\n\
    \        }\n        i += 1\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_lrnfevq/tmp_lrnfevq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1da3895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1da358cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1da358c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1da358b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lrnfevq                        0x0000556772cee2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b1da3a81460 __libc_start_main +
    245

    6    tmp_lrnfevq                        0x0000556772cedf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars: [Int] = []\n    var right_to_left_cars:\
    \ [Int] = []\n    for i in 0..<n {\n        left_to_right_cars.append(i)\n   \
    \     right_to_left_cars.append(i)\n    }\n    var collisions = 0\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            if left_to_right_cars[i] == right_to_left_cars[j]\
    \ {\n                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp5rkccy8m/tmp5rkccy8m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b677fb4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b677f846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b677f846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b677f8457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rkccy8m                        0x000055c9ba832455 <unavailable> + 5205

    5    libc.so.6                          0x00002b677fd3b460 __libc_start_main +
    245

    6    tmp5rkccy8m                        0x000055c9ba832109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collisions += 1\n        }\n    }\n \
    \   return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp3_o_jw7b/tmp3_o_jw7b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c672f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c66fedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c66fed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c66fec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_o_jw7b                        0x0000563b3d70a505 <unavailable> + 5381

    5    libc.so.6                          0x00002b1c674e2460 __libc_start_main +
    245

    6    tmp3_o_jw7b                        0x0000563b3d70a1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt0f4u9k0/tmpt0f4u9k0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96309c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96306bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96306ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96306b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0f4u9k0                        0x0000563a26d4a455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9630baf460 __libc_start_main +
    245

    6    tmpt0f4u9k0                        0x0000563a26d4a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left > right {\n            collisions += 1\n        }\n    }\n  \
    \  return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpumygig9d/tmpumygig9d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c97966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9765db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9765d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9765c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumygig9d                        0x000055fb34036505 <unavailable> + 5381

    5    libc.so.6                          0x00002b7c97b52460 __libc_start_main +
    245

    6    tmpumygig9d                        0x000055fb340361b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp62ubbj16/tmp62ubbj16.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386d902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386d5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386d5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386d5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62ubbj16                        0x00005584f2f6d4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b386daee460 __libc_start_main +
    245

    6    tmp62ubbj16                        0x00005584f2f6d179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            collisions\
    \ += 1\n            left_to_right.removeFirst()\n        } else {\n          \
    \  right_to_left.removeFirst()\n        }\n    }\n    return collisions\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpz4raakvx/tmpz4raakvx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b779e0b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b779ddadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b779ddad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b779ddac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4raakvx                        0x00005630d2299515 <unavailable> + 5397

    5    libc.so.6                          0x00002b779e2a2460 __libc_start_main +
    245

    6    tmpz4raakvx                        0x00005630d22991c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 0
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    var j = 0\n\
    \    var count = 0\n    while i < n && j < n {\n        if left_to_right[i] <\
    \ right_to_left[j] {\n            count += j\n            i += 1\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return count + j * (n - i)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return merge_sort_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmptv655l7p.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left: left, right: right)\n      \
    \     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision_count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collision_count += 1\n        }\n   \
    \ }\n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmplxhra_a4/tmplxhra_a4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9b26cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9af63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9af63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9af627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxhra_a4                        0x00005574400fd575 <unavailable> + 5493

    5    libc.so.6                          0x00002afc9b458460 __libc_start_main +
    245

    6    tmplxhra_a4                        0x00005574400fd229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    while left_to_right.count > 0 &&\
    \ right_to_left.count > 0 {\n        if left_to_right[0] < right_to_left[0] {\n\
    \            left_to_right.remove(at: 0)\n            collision += 1\n       \
    \ } else {\n            right_to_left.remove(at: 0)\n        }\n    }\n    return\
    \ collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp8er8zln7/tmp8er8zln7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f99f09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f99c00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f99c00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f99bff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8er8zln7                        0x0000556f5354d535 <unavailable> + 5429

    5    libc.so.6                          0x00002b5f9a0f5460 __libc_start_main +
    245

    6    tmp8er8zln7                        0x0000556f5354d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = Array(repeating: 0, count: n)\n    var right =\
    \ Array(repeating: 0, count: n)\n    var collision = 0\n    for i in 0..<n {\n\
    \        left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzer5eozr/tmpzer5eozr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae663877c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66356eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66356e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66356d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzer5eozr                        0x000055dfc281f455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae663a63460 __libc_start_main +
    245

    6    tmpzer5eozr                        0x000055dfc281f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int]()\n   \
    \ var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var i = 0\n    var j = 0\n\
    \    while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    collisions += j * (n - i)\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgrcoi7cp/tmpgrcoi7cp.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57d696dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57d6664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57d6664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57d66637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrcoi7cp                        0x00005615e92e6445 <unavailable> + 5189

    5    libc.so.6                          0x00002b57d6b59460 __libc_start_main +
    245

    6    tmpgrcoi7cp                        0x00005615e92e60f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var right_to_left_cars = [Int](repeating:\
    \ 0, count: n)\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n \
    \   for i in 0..<n {\n        right_to_left_cars[i] = i\n        left_to_right_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if right_to_left_cars[i] == left_to_right_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdf_g_vzc/tmpdf_g_vzc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c7638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c732fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c732f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c732e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf_g_vzc                        0x000056083e8a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ab1c7824460 __libc_start_main +
    245

    6    tmpdf_g_vzc                        0x000056083e8a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collision_count = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \            collision_count += 1\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmphs9ts9mp/tmphs9ts9mp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96ff671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96ff368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96ff368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96ff3677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs9ts9mp                        0x0000562da87d4565 <unavailable> + 5477

    5    libc.so.6                          0x00002b96ff85d460 __libc_start_main +
    245

    6    tmphs9ts9mp                        0x0000562da87d4219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left = 0\n    var right = n -\
    \ 1\n    while left < right {\n        if left == right {\n            collisions\
    \ += 1\n        } else {\n            collisions += 2\n        }\n        left\
    \ += 1\n        right -= 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgfxqxete/tmpgfxqxete.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbc9c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbc9940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbc9940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbc993f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfxqxete                        0x000055d0d60451b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afbc9e35460 __libc_start_main +
    245

    6    tmpgfxqxete                        0x000055d0d6044e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(&left_to_right, &right_to_left)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpdcyrk6yj.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(&left_to_right, &right_to_left)\n\
    \           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 {\n        let\
    \ left = left_to_right.removeFirst()\n        let right = right_to_left.removeLast()\n\
    \        if left == right {\n            collisions += 1\n        }\n    }\n \
    \   return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphr3y3z6n/tmphr3y3z6n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16fb2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16fafa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16fafa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16faf9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3y3z6n                        0x0000562cb2b6a5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b16fb495460 __libc_start_main +
    245

    6    tmphr3y3z6n                        0x0000562cb2b6a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](1...n)\n    var right_to_left =\
    \ [Int](1...n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpx6i9my01/tmpx6i9my01.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99186e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99183deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99183de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99183dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6i9my01                        0x00005615d36dd505 <unavailable> + 5381

    5    libc.so.6                          0x00002b99188d3460 __libc_start_main +
    245

    6    tmpx6i9my01                        0x00005615d36dd1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    while left_to_right.count > 0 &&\
    \ right_to_left.count > 0 {\n        let left_car = left_to_right.removeFirst()\n\
    \        let right_car = right_to_left.removeFirst()\n        if left_car == right_car\
    \ {\n            collision += 1\n        }\n    }\n    return collision\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp3qdh7cjr/tmp3qdh7cjr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55665e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55662dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55662da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55662d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qdh7cjr                        0x000055e988cb9525 <unavailable> + 5413

    5    libc.so.6                          0x00002b55667cf460 __libc_start_main +
    245

    6    tmp3qdh7cjr                        0x000055e988cb91d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp79mngn0g/tmp79mngn0g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8beac58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bea94fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bea94f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bea94e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79mngn0g                        0x0000560b9b92f445 <unavailable> + 5189

    5    libc.so.6                          0x00002b8beae44460 __libc_start_main +
    245

    6    tmp79mngn0g                        0x0000560b9b92f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpucfy9q2q/tmpucfy9q2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe95969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe95660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe95660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9565f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucfy9q2q                        0x00005578fca50445 <unavailable> + 5189

    5    libc.so.6                          0x00002abe95b55460 __libc_start_main +
    245

    6    tmpucfy9q2q                        0x00005578fca500f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    while left_to_right.count > 0 &&\
    \ right_to_left.count > 0 {\n        let left = left_to_right.removeFirst()\n\
    \        let right = right_to_left.removeFirst()\n        if left > right {\n\
    \            collision += 1\n        }\n    }\n    return collision\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpk6tnxiv2/tmpk6tnxiv2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b887c8cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b887c5c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b887c5c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b887c5c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6tnxiv2                        0x000055a8471b7525 <unavailable> + 5413

    5    libc.so.6                          0x00002b887cab6460 __libc_start_main +
    245

    6    tmpk6tnxiv2                        0x000055a8471b71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_and_count_inversions(left_to_right, right_to_left)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpsy_u24hm.swift:17:12: error: cannot find 'merge_and_count_inversions'\
    \ in scope\n    return merge_and_count_inversions(left_to_right, right_to_left)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3w0fy0.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left: left, right: right)\n         \
    \                    ^\n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n/tmp/tmp8f3w0fy0.swift:17:31:\
    \ error: missing argument for parameter 'n' in call\n    return car_race_collision(left:\
    \ left, right: right)\n                              ^\n                     \
    \         n: <#Int#>, \n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeFirst()\n        if left_car == right_car {\n        \
    \    collisions += 1\n        } else {\n            left_to_right.append(left_car)\n\
    \            right_to_left.append(right_car)\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp48isivr6/tmp48isivr6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5edb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5eaaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5eaaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5eaa97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48isivr6                        0x0000564e14e9f555 <unavailable> + 5461

    5    libc.so.6                          0x00002acf5ef9f460 __libc_start_main +
    245

    6    tmp48isivr6                        0x0000564e14e9f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right_cars[i] == right_to_left_cars[j] {\n       \
    \         collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9p9ib76u/tmp9p9ib76u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7863e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7863b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7863b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7863b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p9ib76u                        0x000056284a6b0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7864047460 __libc_start_main +
    245

    6    tmp9p9ib76u                        0x000056284a6b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmph4n1_9r5/tmph4n1_9r5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdaa96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaa664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaa664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaa6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4n1_9r5                        0x0000556ef9314445 <unavailable> + 5189

    5    libc.so.6                          0x00002afdaab59460 __libc_start_main +
    245

    6    tmph4n1_9r5                        0x0000556ef93140f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collision_count += 1\n            }\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp69dfxdtb/tmp69dfxdtb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b272f485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272f17cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b272f17c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b272f17b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69dfxdtb                        0x0000561fe847a445 <unavailable> + 5189

    5    libc.so.6                          0x00002b272f671460 __libc_start_main +
    245

    6    tmp69dfxdtb                        0x0000561fe847a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp9e125wzi.swift:19:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp9e125wzi.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp9e125wzi.swift:19:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp9e125wzi.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        cars[i] = i\n    }\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if cars[i] == cars[j] {\n             \
    \   collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpo70biblj/tmpo70biblj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b526e645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b526e33cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b526e33c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b526e33b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo70biblj                        0x0000557925276455 <unavailable> + 5205

    5    libc.so.6                          0x00002b526e831460 __libc_start_main +
    245

    6    tmpo70biblj                        0x0000557925276109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collision\
    \ += 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \        } else {\n            right_to_left.removeFirst()\n        }\n    }\n\
    \    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpiv133e5k/tmpiv133e5k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a4894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a458bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a458b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a458a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv133e5k                        0x00005607d0ad0585 <unavailable> + 5509

    5    libc.so.6                          0x00002b82a4a80460 __libc_start_main +
    245

    6    tmpiv133e5k                        0x00005607d0ad0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    i = 0\n    while i < n {\n        var\
    \ j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6tpsefcf/tmp6tpsefcf.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d5868cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d58383b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d58383988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d583827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tpsefcf                        0x00005564e7b972c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d58878460 __libc_start_main +
    245

    6    tmp6tpsefcf                        0x00005564e7b96f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvmhv2a6m/tmpvmhv2a6m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa441e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa43eddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa43edd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa43edc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmhv2a6m                        0x000056085eac7565 <unavailable> + 5477

    5    libc.so.6                          0x00002baa443d2460 __libc_start_main +
    245

    6    tmpvmhv2a6m                        0x000056085eac7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collisions\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += j * (n\
    \ - i)\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpurd7e6eb/tmpurd7e6eb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfdb6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfd866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfd866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfd8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurd7e6eb                        0x000055ea8c6954f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b6cfdd5b460 __libc_start_main +
    245

    6    tmpurd7e6eb                        0x000055ea8c6951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp484i2g_s/tmp484i2g_s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1919312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1919009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1919009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19190087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp484i2g_s                        0x000055d55cecf445 <unavailable> + 5189

    5    libc.so.6                          0x00002b19194fe460 __libc_start_main +
    245

    6    tmp484i2g_s                        0x000055d55cecf0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] == right_to_left[j] {\n            collisions += 1\n\
    \            i += 1\n            j += 1\n        } else if left_to_right[i] <\
    \ right_to_left[j] {\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgg_2u5up/tmpgg_2u5up.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2692acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab268fa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab268fa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab268fa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg_2u5up                        0x000056295cb02455 <unavailable> + 5205

    5    libc.so.6                          0x00002ab269498460 __libc_start_main +
    245

    6    tmpgg_2u5up                        0x000056295cb02109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n \
    \   var right_to_left = [Int](count: n, repeatedValue: 0)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n         \
    \   if left_to_right[i] == right_to_left[j] {\n                count += 1\n  \
    \          }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpkrv20zn2.swift:11:25: error: no exact matches in call to initializer\
    \ \n    var left_to_right = [Int](count: n, repeatedValue: 0)\n              \
    \          ^\n/tmp/tmpkrv20zn2.swift:11:25: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var left_to_right = [Int](count:\
    \ n, repeatedValue: 0)\n                        ^\n/tmp/tmpkrv20zn2.swift:11:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n/tmp/tmpkrv20zn2.swift:12:25: error: no exact matches in call\
    \ to initializer \n    var right_to_left = [Int](count: n, repeatedValue: 0)\n\
    \                        ^\n/tmp/tmpkrv20zn2.swift:12:25: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    var right_to_left\
    \ = [Int](count: n, repeatedValue: 0)\n                        ^\n/tmp/tmpkrv20zn2.swift:12:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var right_to_left = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpcb4i3zbw/tmpcb4i3zbw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17104c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17101c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17101c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17101bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcb4i3zbw                        0x000055a011116445 <unavailable> + 5189

    5    libc.so.6                          0x00002b17106b5460 __libc_start_main +
    245

    6    tmpcb4i3zbw                        0x000055a0111160f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var i\
    \ = 0\n    var j = 0\n    var count = 0\n    while i < n && j < n {\n        if\
    \ left_to_right[i] < right_to_left[j] {\n            count += j\n            i\
    \ += 1\n        } else {\n            j += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplfuger4z/tmplfuger4z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cf93f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cf90e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cf90e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cf90e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfuger4z                        0x0000559f611e44f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b0cf95dc460 __libc_start_main +
    245

    6    tmplfuger4z                        0x0000559f611e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collisions += j\n            i += 1\n        } else {\n            j +=\
    \ 1\n        }\n    }\n    collisions += (n - i) * j\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6qq8mxot/tmp6qq8mxot.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3894571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3894268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3894268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38942677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qq8mxot                        0x0000560f8b952445 <unavailable> + 5189

    5    libc.so.6                          0x00002b389475d460 __libc_start_main +
    245

    6    tmp6qq8mxot                        0x0000560f8b9520f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision_count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeLast()\n        if left_car == right_car {\n         \
    \   collision_count += 1\n        }\n    }\n    return collision_count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpigitrxb2/tmpigitrxb2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba33d262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba33cf59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba33cf59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba33cf587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigitrxb2                        0x00005569f7f635d5 <unavailable> + 5589

    5    libc.so.6                          0x00002ba33d44e460 __libc_start_main +
    245

    6    tmpigitrxb2                        0x00005569f7f63289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] > right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpv52j56jq/tmpv52j56jq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8502c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab84ffb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab84ffb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab84ffb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv52j56jq                        0x000055d5f615b455 <unavailable> + 5205

    5    libc.so.6                          0x00002ab8504ae460 __libc_start_main +
    245

    6    tmpv52j56jq                        0x000055d5f615b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    while !left_to_right.isEmpty &&\
    \ !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            collisions += 1\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpot6qo36z/tmpot6qo36z.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f4ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f4befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f4bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f4bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpot6qo36z                        0x000055cce7abf5c5 <unavailable> + 5573

    5    libc.so.6                          0x00002af2f50e4460 __libc_start_main +
    245

    6    tmpot6qo36z                        0x000055cce7abf279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(left_to_right, right_to_left)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmps7rt3orn.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 1...n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n + 1 - i)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpldqi773f/tmpldqi773f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada344e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada341deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada341de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada341dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldqi773f                        0x000056542bdaa535 <unavailable> + 5429

    5    libc.so.6                          0x00002ada346d3460 __libc_start_main +
    245

    6    tmpldqi773f                        0x000056542bdaa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3w0fy0.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left: left, right: right)\n         \
    \                    ^\n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n/tmp/tmp8f3w0fy0.swift:17:31:\
    \ error: missing argument for parameter 'n' in call\n    return car_race_collision(left:\
    \ left, right: right)\n                              ^\n                     \
    \         n: <#Int#>, \n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision(left: left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3w0fy0.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left: left, right: right)\n         \
    \                    ^\n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n/tmp/tmp8f3w0fy0.swift:17:31:\
    \ error: missing argument for parameter 'n' in call\n    return car_race_collision(left:\
    \ left, right: right)\n                              ^\n                     \
    \         n: <#Int#>, \n/tmp/tmp8f3w0fy0.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    return car_race_collision_helper(left:\
    \ left, right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpbqabdk_5.swift:17:12: error: cannot find 'car_race_collision_helper'\
    \ in scope\n    return car_race_collision_helper(left: left, right: right)\n \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp964qcp72/tmp964qcp72.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c36f5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c36c52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c36c52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c36c517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp964qcp72                        0x000055ba34bc5575 <unavailable> + 5493

    5    libc.so.6                          0x00002b4c37147460 __libc_start_main +
    245

    6    tmp964qcp72                        0x000055ba34bc5229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight = [Int](repeating: 0, count: n)\n    var\
    \ rightToLeft = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        leftToRight[i]\
    \ = i\n        rightToLeft[i] = n - i - 1\n    }\n    var collisions = 0\n   \
    \ var i = 0\n    var j = 0\n    while i < n && j < n {\n        if leftToRight[i]\
    \ < rightToLeft[j] {\n            collisions += j\n            i += 1\n      \
    \  } else {\n            j += 1\n        }\n    }\n    collisions += (n - i) *\
    \ j\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp1aeonb7h/tmp1aeonb7h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ed893dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ed8634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ed8634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ed86337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1aeonb7h                        0x000055fc1d750455 <unavailable> + 5205

    5    libc.so.6                          0x00002b2ed8b29460 __libc_start_main +
    245

    6    tmp1aeonb7h                        0x000055fc1d750109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpsd_1yd6r/tmpsd_1yd6r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dadc37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dad92eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dad92e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dad92d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsd_1yd6r                        0x0000560b00dc0575 <unavailable> + 5493

    5    libc.so.6                          0x00002b2dade23460 __libc_start_main +
    245

    6    tmpsd_1yd6r                        0x0000560b00dc0229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var i = 0\n    while i < n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \        i += 1\n    }\n    var count = 0\n    while !left_to_right.isEmpty &&\
    \ !right_to_left.isEmpty {\n        if left_to_right.first! == right_to_left.first!\
    \ {\n            count += 1\n            left_to_right.removeFirst()\n       \
    \     right_to_left.removeFirst()\n        } else if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else {\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8et8c482/tmp8et8c482.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97697a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b976949bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b976949b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b976949a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8et8c482                        0x00005566ffb754d5 <unavailable> + 5333

    5    libc.so.6                          0x00002b9769990460 __libc_start_main +
    245

    6    tmp8et8c482                        0x00005566ffb75189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    var left_to_right = [Int](repeating: 0,\
    \ count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for i\
    \ in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i -\
    \ 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpwnnb7yjl/tmpwnnb7yjl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ea6ed2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ea6bc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ea6bc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ea6bc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnnb7yjl                        0x0000564d2cd4e455 <unavailable> + 5205

    5    libc.so.6                          0x00002b6ea70be460 __libc_start_main +
    245

    6    tmpwnnb7yjl                        0x0000564d2cd4e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collision += 1\n        }\n    }\n    return\
    \ collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpqbw62k1t/tmpqbw62k1t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe6a71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe6768b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe6768988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe67677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbw62k1t                        0x0000561832739525 <unavailable> + 5413

    5    libc.so.6                          0x00002adbe6c5d460 __libc_start_main +
    245

    6    tmpqbw62k1t                        0x00005618327391d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoi0j4sf9/tmpoi0j4sf9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56cddddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56cdad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56cdad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56cdad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi0j4sf9                        0x0000563f927cd575 <unavailable> + 5493

    5    libc.so.6                          0x00002b56cdfc9460 __libc_start_main +
    245

    6    tmpoi0j4sf9                        0x0000563f927cd229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    while i < n && j < n {\n        if left[i] < right[j] {\n       \
    \     i += 1\n        } else if left[i] > right[j] {\n            j += 1\n   \
    \     } else {\n            count += 1\n            i += 1\n            j += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp3rnwhdr0/tmp3rnwhdr0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1f7d0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1f7a06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1f7a06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1f7a057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rnwhdr0                        0x00005643c5b60455 <unavailable> + 5205

    5    libc.so.6                          0x00002ab1f7efb460 __libc_start_main +
    245

    6    tmp3rnwhdr0                        0x00005643c5b60109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn351fouu/tmpn351fouu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8111b76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b811186db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b811186d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b811186c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn351fouu                        0x000055dfc22872c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b8111d62460 __libc_start_main +
    245

    6    tmpn351fouu                        0x000055dfc2286f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n \
    \   var right_to_left = [Int](count: n, repeatedValue: 0)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n         \
    \   if left_to_right[i] == right_to_left[j] {\n                count += 1\n  \
    \          }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpkrv20zn2.swift:11:25: error: no exact matches in call to initializer\
    \ \n    var left_to_right = [Int](count: n, repeatedValue: 0)\n              \
    \          ^\n/tmp/tmpkrv20zn2.swift:11:25: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var left_to_right = [Int](count:\
    \ n, repeatedValue: 0)\n                        ^\n/tmp/tmpkrv20zn2.swift:11:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var left_to_right = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n/tmp/tmpkrv20zn2.swift:12:25: error: no exact matches in call\
    \ to initializer \n    var right_to_left = [Int](count: n, repeatedValue: 0)\n\
    \                        ^\n/tmp/tmpkrv20zn2.swift:12:25: note: candidate has\
    \ partially matching parameter list (repeating: Int, count: Int)\n    var right_to_left\
    \ = [Int](count: n, repeatedValue: 0)\n                        ^\n/tmp/tmpkrv20zn2.swift:12:25:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var right_to_left = [Int](count: n, repeatedValue: 0)\n          \
    \              ^\n"
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpaki30yyt/tmpaki30yyt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b148ce30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b148cb27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b148cb27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b148cb267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaki30yyt                        0x000055ebacb4e445 <unavailable> + 5189

    5    libc.so.6                          0x00002b148d01c460 __libc_start_main +
    245

    6    tmpaki30yyt                        0x000055ebacb4e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpa6brek0n/tmpa6brek0n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac576e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac576afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac576afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac576afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6brek0n                        0x000055bb36ad0455 <unavailable> + 5205

    5    libc.so.6                          0x00002ac576ff2460 __libc_start_main +
    245

    6    tmpa6brek0n                        0x000055bb36ad0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = [Int](repeating: 0, count: n)\n    var right =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n \
    \       right[i] = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if left[i] == right[j] {\n            \
    \    count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6ifmysgx/tmp6ifmysgx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75e52e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75e4fdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75e4fdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75e4fdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ifmysgx                        0x000055965f9ca455 <unavailable> + 5205

    5    libc.so.6                          0x00002b75e54d1460 __libc_start_main +
    245

    6    tmp6ifmysgx                        0x000055965f9ca109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012257
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collision = 0\n    var left = 0\n    var right = n -\
    \ 1\n    while left < right {\n        if left == right {\n            collision\
    \ += 1\n        } else {\n            collision += 2\n        }\n        left\
    \ += 1\n        right -= 1\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpfkxseefi/tmpfkxseefi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b585ca50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b585c747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b585c747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b585c7467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkxseefi                        0x000055e4c48be1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b585cc3c460 __libc_start_main +
    245

    6    tmpfkxseefi                        0x000055e4c48bde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 1...n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ + 1 - i)\n    }\n    var collision_count = 0\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n  \
    \              collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpcgyxdb9i/tmpcgyxdb9i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aa7e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aa7b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2aa7b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2aa7b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgyxdb9i                        0x0000563bd12ea535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2aa8070460 __libc_start_main +
    245

    6    tmpcgyxdb9i                        0x0000563bd12ea1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collision_count\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collision_count += j\n            i += 1\n\
    \        } else {\n            j += 1\n        }\n    }\n    collision_count +=\
    \ j * (n - i)\n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp0d8tkybz/tmp0d8tkybz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6e898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6e58fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe6e58f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe6e58e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0d8tkybz                        0x000055890921e4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002afe6ea84460 __libc_start_main +
    245

    6    tmp0d8tkybz                        0x000055890921e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars_left_to_right: [Int] = []\n    var cars_right_to_left:\
    \ [Int] = []\n    var collisions: Int = 0\n    for i in 1...n {\n        cars_left_to_right.append(i)\n\
    \        cars_right_to_left.append(n + 1 - i)\n    }\n    for i in 0..<n {\n \
    \       for j in 0..<n {\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ {\n                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpt6ovlwer/tmpt6ovlwer.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b671bcdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b671b9d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b671b9d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b671b9d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6ovlwer                        0x000055cf9fdbd545 <unavailable> + 5445

    5    libc.so.6                          0x00002b671bec6460 __libc_start_main +
    245

    6    tmpt6ovlwer                        0x000055cf9fdbd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660012258
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = Array(repeating: 0, count: n)\n    var right =\
    \ Array(repeating: 0, count: n)\n    var i = 0\n    var j = 0\n    var count =\
    \ 0\n    while i < n && j < n {\n        if left[i] < right[j] {\n           \
    \ i += 1\n        } else if left[i] > right[j] {\n            j += 1\n       \
    \ } else {\n            count += 1\n            i += 1\n            j += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp53w918t6/tmp53w918t6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee830ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee8001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee8001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee80007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53w918t6                        0x000055e6694792c5 <unavailable> + 4805

    5    libc.so.6                          0x00002abee84f6460 __libc_start_main +
    245

    6    tmp53w918t6                        0x000055e669478f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012258
