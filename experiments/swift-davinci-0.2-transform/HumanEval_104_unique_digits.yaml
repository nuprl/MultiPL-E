name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given a list of positive integers x. return a sorted list of all \n\
  /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33, 1422,\
  \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n/// [] as\
  \ [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ["    var result = [Int]()\n    for i in x {\n        if i.description.filter({\
    \ $0.isEven }).count == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()", '    return x.filter { $0.digits.filter { $0.isEven
    }.isEmpty }.sorted()', "    var result: [Int] = []\n    for i in x {\n       \
    \ var flag = true\n        var num = i\n        while num > 0 {\n            if\
    \ num % 10 % 2 == 0 {\n                flag = false\n                break\n \
    \           }\n            num /= 10\n        }\n        if flag {\n         \
    \   result.append(i)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for i in x {\n        if !i.hasEvenDigit() {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for num in x {\n        if !has_even_digit(num: num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return x.filter { $0.isUniqueDigits
    }', '    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()', "  \
    \  var result: [Int] = []\n    for num in x {\n        if !has_even_digit(x: num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for num in x {\n        if !has_even_digit(num:\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for i in x {\n        if !has_even_digit(x: i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()', '    return
    x.filter { $0.digits.filter { $0.isEven }.isEmpty }.sorted()', "    var result:\
    \ [Int] = []\n    for i in x {\n        if !has_even_digit(x: i) {\n         \
    \   result.append(i)\n        }\n    }\n    return result.sorted()", "    var\
    \ result = [Int]()\n    for num in x {\n        if !has_even_digit(num: num) {\n\
    \            result.append(num)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x: i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()', "    var result\
    \ = [Int]()\n    for num in x {\n        if !has_even_digit(num: num) {\n    \
    \        result.append(num)\n        }\n    }\n    return result.sorted()"]
stop_tokens:
- "\n}"
