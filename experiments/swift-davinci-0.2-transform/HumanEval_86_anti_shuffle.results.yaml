language: swift
name: HumanEval_86_anti_shuffle
results:
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpnrzobwvl/tmpnrzobwvl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e1573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e126ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0e126a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0e12697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrzobwvl                        0x000055fd5fd4e307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad0e175f460 __libc_start_main +
    245

    6    tmpnrzobwvl                        0x000055fd5fd4df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word + \" \"\n            word = \"\"\n        } else {\n            word\
    \ += String(char)\n        }\n    }\n    result += word\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmp5ox5x7ty/tmp5ox5x7ty.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80a5c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80a2bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80a2bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80a2bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ox5x7ty                        0x000055e1f8c14697 <unavailable> + 5783

    5    libc.so.6                          0x00002ae80a7b2460 __libc_start_main +
    245

    6    tmp5ox5x7ty                        0x000055e1f8c141e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var wordArray = Array(word)\n      \
    \  wordArray.sort()\n        result += String(wordArray) + \" \"\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let chars =\
    \ Array(word)\n        let sortedChars = chars.sorted { $0 < $1 }\n        result\
    \ += String(sortedChars) + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhrndcyw.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sorted =\
    \ String(word.sorted())\n        result += sorted\n        result += \" \"\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5cm_kxst.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.components(separatedBy:\
    \ \" \").map {\n        String($0.sorted())\n    }.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2b4ks261.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = [Character](word)\n    \
    \    chars.sort()\n        result += String(chars) + \" \"\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.components(separatedBy:\
    \ \" \").map { $0.sorted() }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1kzfzzjk.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    let sortedWords = words.map { String($0.sorted()) }\n    return\
    \ sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpufnqpr6o.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sorted =\
    \ String(word.sorted())\n        result += sorted\n        result += \" \"\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5cm_kxst.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sorted =\
    \ String(word.sorted())\n        result += sorted\n        result += \" \"\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5cm_kxst.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let chars =\
    \ Array(word)\n        let sortedChars = chars.sorted(by: { $0 < $1 })\n     \
    \   result += String(sortedChars)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdhx3uitz.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        let chars\
    \ = Array(word)\n        let sortedChars = chars.sorted(by: { $0 < $1 })\n   \
    \     result += String(sortedChars)\n        result += \" \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpn1ilk161.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        let sorted\
    \ = String(word.sorted())\n        result += sorted\n        result += \" \"\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rysy9sw.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = [Character](word)\n    \
    \    chars.sort()\n        result += String(chars) + \" \"\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    let sortedWords = words.map { String($0.sorted()) }\n    return\
    \ sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpufnqpr6o.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpvgggdtak/tmpvgggdtak.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d29debc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d29ae2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d29ae2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d29ae17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgggdtak                        0x000055664eef3c6e <unavailable> + 7278

    5    libc.so.6                          0x00002b7d29fd7460 __libc_start_main +
    245

    6    tmpvgggdtak                        0x000055664eef3469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013743
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpnrzobwvl/tmpnrzobwvl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e1573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e126ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0e126a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0e12697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrzobwvl                        0x000055fd5fd4e307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad0e175f460 __libc_start_main +
    245

    6    tmpnrzobwvl                        0x000055fd5fd4df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpnrzobwvl/tmpnrzobwvl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e1573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e126ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0e126a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0e12697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrzobwvl                        0x000055fd5fd4e307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad0e175f460 __libc_start_main +
    245

    6    tmpnrzobwvl                        0x000055fd5fd4df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let chars =\
    \ Array(word).sorted()\n        result += String(chars) + \" \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa3bt5e1m.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var sortedWord = \"\"\n        for char\
    \ in word {\n            sortedWord.append(char)\n        }\n        sortedWord.sort()\n\
    \        result += sortedWord\n        result += \" \"\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_uhejj__.swift:21:20: error: value of type 'String' has no member\
    \ 'sort'\n        sortedWord.sort()\n        ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.components(separatedBy:\
    \ \" \").map { $0.sorted() }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1kzfzzjk.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = [Character](word)\n    \
    \    chars.sort()\n        result += String(chars) + \" \"\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var sortedWord = String(word.sorted())\n\
    \        if word.first == \" \" {\n            sortedWord = \" \" + sortedWord\n\
    \        }\n        if word.last == \" \" {\n            sortedWord += \" \"\n\
    \        }\n        result += sortedWord\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmp_cv_2v25/tmp_cv_2v25.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6972fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af696ff1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af696ff1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af696ff07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cv_2v25                        0x0000555c900a9e4e <unavailable> + 7758

    5    libc.so.6                          0x00002af6974e6460 __libc_start_main +
    245

    6    tmp_cv_2v25                        0x0000555c900a9649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = Array(word)\n        chars.sort()\n\
    \        result += String(chars) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        var chars =\
    \ Array(word)\n        chars.sort()\n        result += String(chars) + \" \"\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpniotzus0.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5tdw7_pd.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.components(separatedBy:\
    \ \" \").map {\n        String($0.sorted())\n    }.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2b4ks261.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let chars =\
    \ Array(word)\n        let sortedChars = chars.sorted(by: { $0 < $1 })\n     \
    \   result += String(sortedChars)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdhx3uitz.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5tdw7_pd.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    // TODO: Implement\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmp33wf8n8w/tmp33wf8n8w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3277e3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3277b35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3277b35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3277b347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33wf8n8w                        0x000055b258564307 <unavailable> + 4871

    5    libc.so.6                          0x00002b327802a460 __libc_start_main +
    245

    6    tmp33wf8n8w                        0x000055b258563f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013743
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        result += String(word.sorted())\n\
    \        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ai3aitl.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplwjg30tn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpvgggdtak/tmpvgggdtak.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d29debc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d29ae2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d29ae2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d29ae17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgggdtak                        0x000055664eef3c6e <unavailable> + 7278

    5    libc.so.6                          0x00002b7d29fd7460 __libc_start_main +
    245

    6    tmpvgggdtak                        0x000055664eef3469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpnrzobwvl/tmpnrzobwvl.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0e1573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0e126ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0e126a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0e12697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrzobwvl                        0x000055fd5fd4e307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad0e175f460 __libc_start_main +
    245

    6    tmpnrzobwvl                        0x000055fd5fd4df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let chars =\
    \ Array(word)\n        let sortedChars = chars.sorted { $0.asciiValue! < $1.asciiValue!\
    \ }\n        result += String(sortedChars) + \" \"\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvctww6q6.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sorted = String(word.sorted())\n\
    \        result += sorted\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.split(separator: \" \"\
    ).map { String($0.sorted()) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord.append(char)\n        }\n        newWord.sort()\n\
    \        result += newWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpadkltxs7.swift:21:17: error: value of type 'String' has no member\
    \ 'sort'\n        newWord.sort()\n        ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var word = word\n        word.sort()\n\
    \        result += word\n        result += \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpod2mz6qo.swift:18:14: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'sort'\n        word.sort()\n        ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var chars = [Character](word)\n    \
    \    chars.sort()\n        result += String(chars) + \" \"\n    }\n    return\
    \ String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word + \" \"\n            word = \"\"\n        } else {\n            word\
    \ += String(char)\n        }\n    }\n    result += word\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmp5ox5x7ty/tmp5ox5x7ty.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80a5c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80a2bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80a2bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80a2bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ox5x7ty                        0x000055e1f8c14697 <unavailable> + 5783

    5    libc.so.6                          0x00002ae80a7b2460 __libc_start_main +
    245

    6    tmp5ox5x7ty                        0x000055e1f8c141e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        result += String(word.sorted()) + \"\
    \ \"\n    }\n    return String(result.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord.append(char)\n        }\n        newWord.sort()\n\
    \        result += newWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpadkltxs7.swift:21:17: error: value of type 'String' has no member\
    \ 'sort'\n        newWord.sort()\n        ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    let words = s.components(separatedBy:\
    \ \" \")\n    let sortedWords = words.map { String($0.sorted()) }\n    return\
    \ sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpufnqpr6o.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    let words\
    \ = s.components(separatedBy: \" \")\n    for word in words {\n        let sortedWord\
    \ = String(word.sorted())\n        result += sortedWord\n        result += \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5tdw7_pd.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s {\n        if c == \" \" {\n            result += word.sorted()\n\
    \            result += \" \"\n            word = \"\"\n        } else {\n    \
    \        word += String(c)\n        }\n    }\n    result += word.sorted()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    return s.components(separatedBy:\
    \ \" \").map { $0.sorted() }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1kzfzzjk.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for char in s {\n        if char == \" \" {\n            result\
    \ += word.sorted()\n            result += \" \"\n            word = \"\"\n   \
    \     } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n\
    \        result += sortedWord + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013665
