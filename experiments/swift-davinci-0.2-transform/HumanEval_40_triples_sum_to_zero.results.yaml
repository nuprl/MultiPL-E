language: swift
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        if l[i] == l[i + 1] {\n            continue\n        }\n        var\
    \ j = i + 1\n        var k = l.count - 1\n        while j < k {\n            if\
    \ l[i] + l[j] + l[k] == 0 {\n                return true\n            } else if\
    \ l[i] + l[j] + l[k] < 0 {\n                j += 1\n            } else {\n   \
    \             k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dabb9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dab894561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3dab894286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3dab89413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3dab893bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7mkm1io1                        0x000055dc5d6caf10 <unavailable> + 7952

    6    tmp7mkm1io1                        0x000055dc5d6caaee <unavailable> + 6894

    7    libc.so.6                          0x00002b3dabd89460 __libc_start_main +
    245

    8    tmp7mkm1io1                        0x000055dc5d6ca2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n        var j = i + 1\n\
    \        var k = l.count - 1\n        while j < k {\n            if l[i] + l[j]\
    \ + l[k] == 0 {\n                return true\n            } else if l[i] + l[j]\
    \ + l[k] < 0 {\n                j += 1\n            } else {\n               \
    \ k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp1rdjiy23/tmp1rdjiy23.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3b584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc3b27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc3b27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc3b27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rdjiy23                        0x000055733288e490 <unavailable> + 5264

    5    libc.so.6                          0x00002acc3b770460 __libc_start_main +
    245

    6    tmp1rdjiy23                        0x000055733288df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n        var j = i+1\n   \
    \     var k = l.count-1\n        while j < k {\n            if l[i] + l[j] + l[k]\
    \ == 0 {\n                return true\n            } else if l[i] + l[j] + l[k]\
    \ < 0 {\n                j += 1\n            } else {\n                k -= 1\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpifgov7u8/tmpifgov7u8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88bf77ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88bf475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88bf475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88bf4747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifgov7u8                        0x000055d841c3968b <unavailable> + 5771

    5    libc.so.6                          0x00002b88bf96a460 __libc_start_main +
    245

    6    tmpifgov7u8                        0x000055d841c39229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function!\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmph6tnh6kl/tmph6tnh6kl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b336e10cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b336de03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b336de03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b336de027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6tnh6kl                        0x00005615f0e5e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b336e2f8460 __libc_start_main +
    245

    6    tmph6tnh6kl                        0x00005615f0e5df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp1odq83xc/tmp1odq83xc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8be771ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8be7411b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8be7411988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8be74107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1odq83xc                        0x0000562617cb968b <unavailable> + 5771

    5    libc.so.6                          0x00002b8be7906460 __libc_start_main +
    245

    6    tmp1odq83xc                        0x0000562617cb9229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ s = Set<Int>()\n    for i in 0..<l.count - 1 {\n        for j in i + 1..<l.count\
    \ {\n            if s.contains(-l[i] - l[j]) {\n                return true\n\
    \            }\n            s.insert(l[j])\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count-2 {\n        for j in i+1..<l.count-1 {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count-2 {\n        for j in i+1..<l.count-1 {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement triples_sum_to_zero\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp85cat0v9/tmp85cat0v9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af93719cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af936e93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af936e93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af936e927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85cat0v9                        0x00005645c8774490 <unavailable> + 5264

    5    libc.so.6                          0x00002af937388460 __libc_start_main +
    245

    6    tmp85cat0v9                        0x00005645c8773f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count\
    \ {\n            for k in (j+1)..<l.count {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0...l.count - 3 {\n        for j in i + 1...l.count - 2 {\n           \
    \ for k in j + 1...l.count - 1 {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count\
    \ {\n            for k in (j+1)..<l.count {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpayk20q94/tmpayk20q94.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d9afdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d9acd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d9acd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d9acd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayk20q94                        0x0000559c8fe2b490 <unavailable> + 5264

    5    libc.so.6                          0x00002b4d9b1cb460 __libc_start_main +
    245

    6    tmpayk20q94                        0x0000559c8fe2af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        if two_sum_to_zero(l: l[i + 1..<l.count], target: -l[i]) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxuy7iy_b.swift:19:12: error: cannot find 'two_sum_to_zero' in scope\n\
    \        if two_sum_to_zero(l: l[i + 1..<l.count], target: -l[i]) {\n        \
    \   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp1irhx2q7/tmp1irhx2q7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21b152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21ae49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21ae49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21ae487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1irhx2q7                        0x000055c919fff490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae21b33e460 __libc_start_main +
    245

    6    tmp1irhx2q7                        0x000055c919ffef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n        var j = i+1\n   \
    \     var k = l.count-1\n        while j < k {\n            if l[i] + l[j] + l[k]\
    \ == 0 {\n                return true\n            } else if l[i] + l[j] + l[k]\
    \ < 0 {\n                j += 1\n            } else {\n                k -= 1\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        if l[i] == l[i + 1] {\n            continue\n        }\n        var\
    \ left = i + 1\n        var right = l.count - 1\n        while left < right {\n\
    \            let sum = l[i] + l[left] + l[right]\n            if sum == 0 {\n\
    \                return true\n            } else if sum < 0 {\n              \
    \  left += 1\n            } else {\n                right -= 1\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af8fa1a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8f9e99561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af8f9e99286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af8f9e9913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af8f9e98bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgcs5fq9p                        0x000056270c86cf23 <unavailable> + 7971

    6    tmpgcs5fq9p                        0x000056270c86caee <unavailable> + 6894

    7    libc.so.6                          0x00002af8fa38e460 __libc_start_main +
    245

    8    tmpgcs5fq9p                        0x000056270c86c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result = false\n    for i in 0..<l.count {\n     \
    \   for j in i+1..<l.count {\n            for k in j+1..<l.count {\n         \
    \       if l[i] + l[j] + l[k] == 0 {\n                    result = true\n    \
    \            }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            let sum = l[i] + l[j]\n            if set.contains(-sum) {\n\
    \                return true\n            }\n            set.insert(l[j])\n  \
    \      }\n        set.removeAll()\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            let sum = l[i] + l[j]\n            if set.contains(-sum) {\n\
    \                return true\n            }\n            set.insert(l[j])\n  \
    \      }\n        set.removeAll()\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            let b = l[j]\n            let c = l[k]\n \
    \           if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3367b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3367880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3367880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b336788013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b336787fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpufwfnt9f                        0x000055ad557b0f46 <unavailable> + 8006

    6    tmpufwfnt9f                        0x000055ad557b0aee <unavailable> + 6894

    7    libc.so.6                          0x00002b3367d75460 __libc_start_main +
    245

    8    tmpufwfnt9f                        0x000055ad557b02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp1irhx2q7/tmp1irhx2q7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21b152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21ae49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21ae49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21ae487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1irhx2q7                        0x000055c919fff490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae21b33e460 __libc_start_main +
    245

    6    tmp1irhx2q7                        0x000055c919ffef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp1irhx2q7/tmp1irhx2q7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21b152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21ae49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21ae49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21ae487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1irhx2q7                        0x000055c919fff490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae21b33e460 __libc_start_main +
    245

    6    tmp1irhx2q7                        0x000055c919ffef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            let sum = l[i] + l[j]\n            if set.contains(-sum) {\n\
    \                return true\n            }\n            set.insert(l[j])\n  \
    \      }\n        set.removeAll()\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count-2 {\n        for j in i+1..<l.count-1 {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp1rdjiy23/tmp1rdjiy23.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3b584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc3b27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc3b27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc3b27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rdjiy23                        0x000055733288e490 <unavailable> + 5264

    5    libc.so.6                          0x00002acc3b770460 __libc_start_main +
    245

    6    tmp1rdjiy23                        0x000055733288df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if (l.count < 3) {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if (l[i] + l[j] + l[k] == 0) {\n        \
    \            return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        if two_sum_to_zero(l: l[i + 1..<l.count], target: -l[i]) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxuy7iy_b.swift:19:12: error: cannot find 'two_sum_to_zero' in scope\n\
    \        if two_sum_to_zero(l: l[i + 1..<l.count], target: -l[i]) {\n        \
    \   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            let b = l[j]\n            let c = l[k]\n \
    \           if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3367b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3367880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3367880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b336788013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b336787fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpufwfnt9f                        0x000055ad557b0f46 <unavailable> + 8006

    6    tmpufwfnt9f                        0x000055ad557b0aee <unavailable> + 6894

    7    libc.so.6                          0x00002b3367d75460 __libc_start_main +
    245

    8    tmpufwfnt9f                        0x000055ad557b02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n        if l[i] == l[i\
    \ + 1] {\n            continue\n        }\n        var j = i + 1\n        var\
    \ k = l.count - 1\n        while j < k {\n            if l[i] + l[j] + l[k] ==\
    \ 0 {\n                return true\n            } else if l[i] + l[j] + l[k] <\
    \ 0 {\n                j += 1\n            } else {\n                k -= 1\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if set.contains(-(l[i] + l[j])) {\n                return true\n\
    \            }\n        }\n        set.insert(l[i])\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            let b = l[j]\n            let c = l[k]\n \
    \           if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3367b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3367880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3367880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b336788013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b336787fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpufwfnt9f                        0x000055ad557b0f46 <unavailable> + 8006

    6    tmpufwfnt9f                        0x000055ad557b0aee <unavailable> + 6894

    7    libc.so.6                          0x00002b3367d75460 __libc_start_main +
    245

    8    tmpufwfnt9f                        0x000055ad557b02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp1rdjiy23/tmp1rdjiy23.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3b584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc3b27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc3b27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc3b27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rdjiy23                        0x000055733288e490 <unavailable> + 5264

    5    libc.so.6                          0x00002acc3b770460 __libc_start_main +
    245

    6    tmp1rdjiy23                        0x000055733288df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            let b = l[j]\n            let c = l[k]\n \
    \           if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3367b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3367880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3367880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b336788013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b336787fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpufwfnt9f                        0x000055ad557b0f46 <unavailable> + 8006

    6    tmpufwfnt9f                        0x000055ad557b0aee <unavailable> + 6894

    7    libc.so.6                          0x00002b3367d75460 __libc_start_main +
    245

    8    tmpufwfnt9f                        0x000055ad557b02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n        if l[i] == l[i\
    \ + 1] {\n            continue\n        }\n        var left = i + 1\n        var\
    \ right = l.count - 1\n        while left < right {\n            let sum = l[i]\
    \ + l[left] + l[right]\n            if sum == 0 {\n                return true\n\
    \            } else if sum < 0 {\n                left += 1\n            } else\
    \ {\n                right -= 1\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp1rdjiy23/tmp1rdjiy23.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3b584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc3b27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc3b27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc3b27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rdjiy23                        0x000055733288e490 <unavailable> + 5264

    5    libc.so.6                          0x00002acc3b770460 __libc_start_main +
    245

    6    tmp1rdjiy23                        0x000055733288df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set: Set<Int> = []\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if set.contains(-(l[i] + l[j])) {\n                return true\n\
    \            }\n        }\n        set.insert(l[i])\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ set = Set<Int>()\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if set.contains(-(l[i] + l[j])) {\n                return true\n\
    \            }\n        }\n        set.insert(l[i])\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp1irhx2q7/tmp1irhx2q7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21b152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21ae49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21ae49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21ae487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1irhx2q7                        0x000055c919fff490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae21b33e460 __libc_start_main +
    245

    6    tmp1irhx2q7                        0x000055c919ffef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpgsy5x1ic/tmpgsy5x1ic.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac088ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0887acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0887ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0887ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsy5x1ic                        0x0000561fb926f490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac088ca1460 __libc_start_main +
    245

    6    tmpgsy5x1ic                        0x0000561fb926ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n        var j = i+1\n   \
    \     var k = l.count-1\n        while j < k {\n            if l[i] + l[j] + l[k]\
    \ == 0 {\n                return true\n            } else if l[i] + l[j] + l[k]\
    \ < 0 {\n                j += 1\n            } else {\n                k -= 1\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpayk20q94/tmpayk20q94.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d9afdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d9acd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d9acd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d9acd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayk20q94                        0x0000559c8fe2b490 <unavailable> + 5264

    5    libc.so.6                          0x00002b4d9b1cb460 __libc_start_main +
    245

    6    tmpayk20q94                        0x0000559c8fe2af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            let b = l[j]\n            let c = l[k]\n \
    \           if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3367b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3367880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3367880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b336788013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b336787fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpufwfnt9f                        0x000055ad557b0f46 <unavailable> + 8006

    6    tmpufwfnt9f                        0x000055ad557b0aee <unavailable> + 6894

    7    libc.so.6                          0x00002b3367d75460 __libc_start_main +
    245

    8    tmpufwfnt9f                        0x000055ad557b02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in i+1..<l.count {\n            for k in j+1..<l.count {\n    \
    \            if l[i] + l[j] + l[k] == 0 {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmprrui4y5e/tmprrui4y5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db13d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db10c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db10c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db10c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrui4y5e                        0x00005558470a5490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5db15bd460 __libc_start_main +
    245

    6    tmprrui4y5e                        0x00005558470a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in\
    \ (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2\
    \ {\n        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n\
    \            if l[i] + l[j] + l[k] == 0 {\n                return true\n     \
    \       } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n         \
    \   } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c6ea59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c6e750561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c6e750286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c6e75013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c6e74fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv3wsvu46                        0x0000563015b1bf10 <unavailable> + 7952

    6    tmpv3wsvu46                        0x0000563015b1baee <unavailable> + 6894

    7    libc.so.6                          0x00002b0c6ec45460 __libc_start_main +
    245

    8    tmpv3wsvu46                        0x0000563015b1b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count\
    \ {\n            for k in (j+1)..<l.count {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n           \
    \ for k in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbwyzqiw4/tmpbwyzqiw4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b926c714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b926c40bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b926c40b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b926c40a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwyzqiw4                        0x000056219987a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b926c900460 __libc_start_main +
    245

    6    tmpbwyzqiw4                        0x0000562199879f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count-2 {\n        for j in i+1..<l.count-1\
    \ {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dfae64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dfab5b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5dfab5b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5dfab5b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5dfab5abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0z8r20vi                        0x000055ca408b4d83 <unavailable> + 7555

    6    tmp0z8r20vi                        0x000055ca408b49ce <unavailable> + 6606

    7    libc.so.6                          0x00002b5dfb050460 __libc_start_main +
    245

    8    tmp0z8r20vi                        0x000055ca408b41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp8kvnbpsx/tmp8kvnbpsx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22725d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22722ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22722cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22722cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kvnbpsx                        0x0000561ae846a490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22727c1460 __libc_start_main +
    245

    6    tmp8kvnbpsx                        0x0000561ae8469f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        for j in (i+1)..<l.count {\n            let sum = l[i] + l[j]\n     \
    \       if binary_search(l: l, x: -sum) {\n                return true\n     \
    \       }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2immsik9.swift:21:16: error: cannot find 'binary_search' in scope\n\
    \            if binary_search(l: l, x: -sum) {\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0...l.count - 3 {\n        for j in i + 1...l.count - 2 {\n           \
    \ for k in j + 1...l.count - 1 {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count {\n\
    \        var j = i + 1\n        var k = l.count - 1\n        while j < k {\n \
    \           if l[i] + l[j] + l[k] == 0 {\n                return true\n      \
    \      } else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n          \
    \  } else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpxayzz1xh/tmpxayzz1xh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73b4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73b1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73b1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73b1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxayzz1xh                        0x00005595326af490 <unavailable> + 5264

    5    libc.so.6                          0x00002af73b6a2460 __libc_start_main +
    245

    6    tmpxayzz1xh                        0x00005595326aef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820814
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n\
    /// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n\
    /// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820814
