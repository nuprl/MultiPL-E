name: HumanEval_154_cycpattern_check
language: swift
prompt: "\n/// You are given 2 words. You need to return True if the second word or\
  \ any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a:\
  \ \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b: \"\
  ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n/// false\n\
  /// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>> cycpattern_check(a:\
  \ \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a: \"himenss\", b:\
  \ \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(cycpattern_check(a: \"xyzw\", b: \"xyw\"\
  ) == false)\nassert(cycpattern_check(a: \"yello\", b: \"ell\") == true)\nassert(cycpattern_check(a:\
  \ \"whattup\", b: \"ptut\") == false)\nassert(cycpattern_check(a: \"efef\", b: \"\
  fee\") == true)\nassert(cycpattern_check(a: \"abab\", b: \"aabb\") == false)\nassert(cycpattern_check(a:\
  \ \"winemtt\", b: \"tinem\") == true)"
completions: ["    var b = b\n    if a.contains(b) {\n        return true\n    }\n\
    \    for _ in 0..<b.count {\n        b.append(b.removeFirst())\n        if a.contains(b)\
    \ {\n            return true\n        }\n    }\n    return false", "    let a\
    \ = a.lowercased()\n    let b = b.lowercased()\n    if a.count < b.count {\n \
    \       return false\n    }\n    let b_count = b.count\n    for i in 0..<b_count\
    \ {\n        let start = b.index(b.startIndex, offsetBy: i)\n        let end =\
    \ b.index(b.startIndex, offsetBy: b_count)\n        let range = start..<end\n\
    \        let sub_b = String(b[range])\n        if a.contains(sub_b) {\n      \
    \      return true\n        }\n    }\n    return false", "    let a = a.lowercased()\n\
    \    let b = b.lowercased()\n    if a.contains(b) {\n        return true\n   \
    \ }\n    if b.count > a.count {\n        return false\n    }\n    let b = b +\
    \ b\n    return b.contains(a)", "    guard a.count >= b.count else { return false\
    \ }\n    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b) { return\
    \ true }\n        b.append(b.removeFirst())\n    }\n    return false", "    let\
    \ a = a.lowercased()\n    let b = b.lowercased()\n    let b_len = b.count\n  \
    \  let a_len = a.count\n    if a_len < b_len {\n        return false\n    }\n\
    \    let a_arr = Array(a)\n    let b_arr = Array(b)\n    for i in 0..<a_len {\n\
    \        var j = 0\n        while j < b_len {\n            if a_arr[(i + j) %\
    \ a_len] != b_arr[j] {\n                break\n            }\n            j +=\
    \ 1\n        }\n        if j == b_len {\n            return true\n        }\n\
    \    }\n    return false", "    let a = Array(a)\n    let b = Array(b)\n    var\
    \ b_rotated = b\n    for _ in 0..<b.count {\n        b_rotated.rotate()\n    \
    \    if a.contains(b_rotated) {\n            return true\n        }\n    }\n \
    \   return false", "    let a = a.lowercased()\n    let b = b.lowercased()\n \
    \   if a.contains(b) {\n        return true\n    }\n    var b = b\n    for _ in\
    \ 0..<b.count {\n        b.append(b.removeFirst())\n        if a.contains(b) {\n\
    \            return true\n        }\n    }\n    return false", "    if a.count\
    \ != b.count {\n        return false\n    }\n    let b_rotations = b.rotations()\n\
    \    for rotation in b_rotations {\n        if a.contains(rotation) {\n      \
    \      return true\n        }\n    }\n    return false", "    var b = b\n    for\
    \ _ in 0..<b.count {\n        if a.contains(b) {\n            return true\n  \
    \      }\n        b.append(b.removeFirst())\n    }\n    return false", "    var\
    \ b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n            return\
    \ true\n        }\n        b.append(b.removeFirst())\n    }\n    return false",
  "    var b = b\n    if a.contains(b) {\n        return true\n    }\n    for _ in\
    \ 0..<b.count {\n        b.append(b.removeFirst())\n        if a.contains(b) {\n\
    \            return true\n        }\n    }\n    return false", "    if a.count\
    \ != b.count {\n        return false\n    }\n    let a = Array(a)\n    let b =\
    \ Array(b)\n    var count = 0\n    for i in 0..<a.count {\n        if a[i] ==\
    \ b[0] {\n            count = i\n            break\n        }\n    }\n    for\
    \ i in 0..<b.count {\n        if a[(i + count) % a.count] != b[i] {\n        \
    \    return false\n        }\n    }\n    return true", "    var a = a\n    var\
    \ b = b\n    if a.count == b.count {\n        if a == b {\n            return\
    \ true\n        }\n        for _ in 0..<a.count {\n            a.append(a.removeFirst())\n\
    \            if a == b {\n                return true\n            }\n       \
    \ }\n    }\n    return false", "    var a = a\n    var b = b\n    if a.count !=\
    \ b.count {\n        return false\n    }\n    for _ in 0..<a.count {\n       \
    \ if a.contains(b) {\n            return true\n        }\n        a.insert(a.removeFirst(),\
    \ at: a.endIndex)\n    }\n    return false", "    if a.count != b.count {\n  \
    \      return false\n    }\n    let b = b + b\n    return b.contains(a)", "  \
    \  var b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n       \
    \     return true\n        }\n        b.append(b.removeFirst())\n    }\n    return\
    \ false", "    let a = a.lowercased()\n    let b = b.lowercased()\n    if a.count\
    \ < b.count {\n        return false\n    }\n    var b_rotated = b\n    for _ in\
    \ 0..<b.count {\n        if a.contains(b_rotated) {\n            return true\n\
    \        }\n        b_rotated = b_rotated.rotate()\n    }\n    return false",
  "    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b) {\n       \
    \     return true\n        }\n        b.append(b.removeFirst())\n    }\n    return\
    \ false", "    var b = b\n    for _ in 0..<b.count {\n        if a.contains(b)\
    \ {\n            return true\n        }\n        b.append(b.removeFirst())\n \
    \   }\n    return false", "    var b = b\n    for _ in 0..<b.count {\n       \
    \ if a.contains(b) {\n            return true\n        }\n        b.append(b.removeFirst())\n\
    \    }\n    return false"]
stop_tokens:
- "\n}"
