name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return True if\
  \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>>\
  \ right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
  \ Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    // TODO: Write your implementation\
    \ here\n    return false", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted(by: <)\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", '    return
    false', "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b =\
    \ sides[1]\n    let c = sides[2]\n    return a * a + b * b == c * c", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n\
    \    let c = sides[2]\n    return a * a + b * b == c * c", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", '    return (a * a + b * b == c * c) || (a * a + c * c == b * b)
    || (b * b + c * c == a * a)', "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", '    return false',
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    let\
    \ a = sides[0]\n    let b = sides[1]\n    let c = sides[2]\n    return a * a +\
    \ b * b == c * c", "    let sides = [a, b, c].sorted()\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    // TODO: Implement this function\n    return false",
  "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n\
    \    let c = sides[2]\n    return a * a + b * b == c * c", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", '    return (a * a + b * b ==
    c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a)', "    let sides\
    \ = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n    let c\
    \ = sides[2]\n    return a * a + b * b == c * c", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    // TODO: Implement this function\n  \
    \  return false", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    let a = sides[0]\n    let b = sides[1]\n    let c = sides[2]\n    return\
    \ a * a + b * b == c * c", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n   \
    \ let b = sides[1]\n    let c = sides[2]\n    return a * a + b * b == c * c",
  '    return false', "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    if a > b && a > c {\n        return a * a == b * b + c * c\n    } else if b\
    \ > a && b > c {\n        return b * b == a * a + c * c\n    } else {\n      \
    \  return c * c == a * a + b * b\n    }", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    let hypotenuse\
    \ = sides[2]\n    let cathetus = sides[1]\n    let base = sides[0]\n    return\
    \ hypotenuse * hypotenuse == cathetus * cathetus + base * base", "    let sides\
    \ = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] ==\
    \ sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    if a > b && a\
    \ > c {\n        return a * a == b * b + c * c\n    } else if b > a && b > c {\n\
    \        return b * b == a * a + c * c\n    } else {\n        return c * c ==\
    \ a * a + b * b\n    }", '    return false', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  '    return a*a + b*b == c*c', "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    if a\
    \ * a + b * b == c * c {\n        return true\n    } else if a * a + c * c ==\
    \ b * b {\n        return true\n    } else if b * b + c * c == a * a {\n     \
    \   return true\n    } else {\n        return false\n    }", "    let sides =\
    \ [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] ==\
    \ sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let a2 = a *\
    \ a\n    let b2 = b * b\n    let c2 = c * c\n    return (a2 + b2 == c2) || (a2\
    \ + c2 == b2) || (b2 + c2 == a2)", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let a_squared\
    \ = a * a\n    let b_squared = b * b\n    let c_squared = c * c\n    if a_squared\
    \ + b_squared == c_squared {\n        return true\n    } else if a_squared + c_squared\
    \ == b_squared {\n        return true\n    } else if b_squared + c_squared ==\
    \ a_squared {\n        return true\n    } else {\n        return false\n    }",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", '    return false', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", '    return
    false', "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b =\
    \ sides[1]\n    let c = sides[2]\n    return a * a + b * b == c * c", '    return
    a * a + b * b == c * c', "    if a > b && a > c {\n        return a * a == b *\
    \ b + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c\
    \ * c\n    } else {\n        return c * c == a * a + b * b\n    }", "    let sides\
    \ = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] ==\
    \ sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]", "   \
    \ let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    if a > b && a > c {\n        return a\
    \ * a == b * b + c * c\n    } else if b > a && b > c {\n        return b * b ==\
    \ a * a + c * c\n    } else {\n        return c * c == a * a + b * b\n    }",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ a2 = a * a\n    let b2 = b * b\n    let c2 = c * c\n    return (a2 + b2 == c2)\
    \ || (a2 + c2 == b2) || (b2 + c2 == a2)", '    return false', '    return false',
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    // TODO: Write your code here\n    return false",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", '    return (a*a + b*b == c*c) || (a*a + c*c
    == b*b) || (b*b + c*c == a*a)', "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", '    return false', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  '    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *
    c == a * a)', "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n\
    \    let c = sides[2]\n    return a * a + b * b == c * c", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n   \
    \ let c = sides[2]\n    return a * a + b * b == c * c", "    let sides = [a, b,\
    \ c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", '    return (a * a + b * b == c * c) || (a * a + c * c == b * b)
    || (b * b + c * c == a * a)', "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    // Write\
    \ your code here\n    return false", "    let sides = [a, b, c].sorted()\n   \
    \ return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]"]
stop_tokens:
- "\n}"
