name: HumanEval_24_largest_divisor
language: swift
prompt: "\n/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
  \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
  \ == 50)\nassert(largest_divisor(n: 49) == 7)"
completions: ["    var largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n\
    \            largest = i\n        }\n    }\n    return largest", "    var largest\
    \ = 0\n    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n\
    \        }\n    }\n    return largest", "    var largest = 0\n    for i in 1..<n\
    \ {\n        if n % i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest", "    var largest_divisor = 1\n    for i in 2...n {\n        if n %\
    \ i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor",
  "    var largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n          \
    \  largest = i\n        }\n    }\n    return largest", "    var largest = 0\n\
    \    for i in 1...n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest", "    var largest_divisor = 1\n    for i in\
    \ 2...n {\n        if n % i == 0 {\n            largest_divisor = i\n        }\n\
    \    }\n    return largest_divisor", "    var largest = 1\n    for i in 2...n\
    \ {\n        if n % i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest", "    var largest = 1\n    for i in 2..<n {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest", "    var\
    \ largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n    }\n    return largest", "    var largest = 0\n    for i\
    \ in 1...n {\n        if n % i == 0 {\n            largest = i\n        }\n  \
    \  }\n    return largest", "    var largest = 0\n    for i in 1...n {\n      \
    \  if n % i == 0 {\n            largest = i\n        }\n    }\n    return largest",
  "    var largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n          \
    \  largest = i\n        }\n    }\n    return largest", "    var largest = 0\n\
    \    for i in 1..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest", "    var largest = 0\n    for i in 1..<n {\n\
    \        if n % i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest", "    var largest = 1\n    for i in 2...n {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest", "    var\
    \ largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n    }\n    return largest", "    var largest_divisor = 1\n \
    \   for i in 2...n {\n        if n % i == 0 {\n            largest_divisor = i\n\
    \        }\n    }\n    return largest_divisor", "    var largest_divisor = 1\n\
    \    for i in 2...n {\n        if n % i == 0 {\n            largest_divisor =\
    \ i\n        }\n    }\n    return largest_divisor", "    var largest = 0\n   \
    \ for i in 1...n {\n        if n % i == 0 {\n            largest = i\n       \
    \ }\n    }\n    return largest"]
stop_tokens:
- "\n}"
