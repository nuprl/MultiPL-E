name: HumanEval_48_is_palindrome
language: swift
prompt: "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome(text:\
  \ \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text:\
  \ \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text:\
  \ \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text:\
  \ \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text:\
  \ \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)"
completions: ["    let count = text.count\n    if count == 0 {\n        return true\n\
    \    }\n    let mid = count / 2\n    let start = text.index(text.startIndex, offsetBy:\
    \ 0)\n    let end = text.index(text.startIndex, offsetBy: mid)\n    let firstHalf\
    \ = text[start..<end]\n    let secondHalf = String(text[text.index(text.endIndex,\
    \ offsetBy: -mid)..<text.endIndex].reversed())\n    return firstHalf == secondHalf",
  "    let lowercased = text.lowercased()\n    let reversed = String(lowercased.reversed())\n\
    \    return lowercased == reversed", "    var chars = Array(text)\n    var i =\
    \ 0\n    var j = chars.count - 1\n    while i < j {\n        if chars[i] != chars[j]\
    \ {\n            return false\n        }\n        i += 1\n        j -= 1\n   \
    \ }\n    return true", '    return text == String(text.reversed())', "    let\
    \ chars = Array(text)\n    var i = 0\n    var j = chars.count - 1\n    while i\
    \ < j {\n        if chars[i] != chars[j] {\n            return false\n       \
    \ }\n        i += 1\n        j -= 1\n    }\n    return true", '    return text
    == String(text.reversed())', '    return text == String(text.reversed())', " \
    \   let text_length = text.count\n    if text_length == 0 {\n        return true\n\
    \    }\n    for i in 0..<text_length/2 {\n        if text[i] != text[text_length\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true", '    return
    text == String(text.reversed())', "    let text_length = text.count\n    if text_length\
    \ == 0 {\n        return true\n    }\n    for i in 0..<text_length/2 {\n     \
    \   if text[text.index(text.startIndex, offsetBy: i)] != text[text.index(text.startIndex,\
    \ offsetBy: text_length - i - 1)] {\n            return false\n        }\n   \
    \ }\n    return true", "    let lowercase = text.lowercased()\n    let reversed\
    \ = String(lowercase.reversed())\n    return lowercase == reversed", "    let\
    \ chars = Array(text)\n    var i = 0\n    var j = chars.count - 1\n    while i\
    \ < j {\n        if chars[i] != chars[j] {\n            return false\n       \
    \ }\n        i += 1\n        j -= 1\n    }\n    return true", "    let lowercase\
    \ = text.lowercased()\n    let reversed = String(lowercase.reversed())\n    return\
    \ lowercase == reversed", "    let lowercase = text.lowercased()\n    let characters\
    \ = Array(lowercase)\n    let reversed = String(characters.reversed())\n    return\
    \ lowercase == reversed", "    if text.count <= 1 {\n        return true\n   \
    \ }\n    if text.first == text.last {\n        return is_palindrome(text: String(text.dropFirst().dropLast()))\n\
    \    }\n    return false", "    let length = text.count\n    if length == 0 {\n\
    \        return true\n    }\n    let mid = length / 2\n    for i in 0..<mid {\n\
    \        let left = text.index(text.startIndex, offsetBy: i)\n        let right\
    \ = text.index(text.endIndex, offsetBy: -i - 1)\n        if text[left] != text[right]\
    \ {\n            return false\n        }\n    }\n    return true", "    let characters\
    \ = Array(text)\n    for i in 0..<characters.count / 2 {\n        if characters[i]\
    \ != characters[characters.count - i - 1] {\n            return false\n      \
    \  }\n    }\n    return true", "    let chars = text.characters\n    let count\
    \ = chars.count\n    for i in 0..<count/2 {\n        if chars[chars.index(chars.startIndex,\
    \ offsetBy: i)] != chars[chars.index(chars.startIndex, offsetBy: count-i-1)] {\n\
    \            return false\n        }\n    }\n    return true", "    if text.isEmpty\
    \ {\n        return true\n    }\n    let lowercased = text.lowercased()\n    let\
    \ filtered = lowercased.filter { $0.isLetter }\n    let reversed = String(filtered.reversed())\n\
    \    return filtered == reversed", '    return text == String(text.reversed())']
stop_tokens:
- "\n}"
