language: swift
name: HumanEval_109_move_one_ball
results:
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            arr.remove(at: i)\n     \
    \       arr.insert(arr[arr.count - 1], at: 0)\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824905
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count - 1\
    \ {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n   \
    \ }\n    if count > 1 {\n        return false\n    }\n    var i = arr.count -\
    \ 1\n    while i > 0 && arr[i - 1] > arr[i] {\n        i -= 1\n    }\n    if i\
    \ == 0 {\n        return true\n    }\n    var j = i\n    while j < arr.count -\
    \ 1 && arr[j] < arr[j + 1] {\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        let last = arr.removeLast()\n        arr.insert(last, at: 0)\n  \
    \      count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps40r8510/tmps40r8510.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90b60d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90b5dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90b5dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90b5dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps40r8510                        0x0000559b115e859a <unavailable> + 5530

    5    libc.so.6                          0x00002b90b62bd460 __libc_start_main +
    245

    6    tmps40r8510                        0x0000559b115e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps_0vqf_u/tmps_0vqf_u.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a9509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a9200b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a9200988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a91ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_0vqf_u                        0x0000562b1118369e <unavailable> + 5790

    5    libc.so.6                          0x00002b07a96f5460 __libc_start_main +
    245

    6    tmps_0vqf_u                        0x0000562b11183169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    for _ in 0..<arr.count {\n        if arr.sorted()\
    \ == arr {\n            return true\n        }\n        let last = arr.removeLast()\n\
    \        arr.insert(last, at: 0)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpu2n_c3ms/tmpu2n_c3ms.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75bb09dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75bad94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75bad94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75bad937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2n_c3ms                        0x000055ff5109069e <unavailable> + 5790

    5    libc.so.6                          0x00002b75bb289460 __libc_start_main +
    245

    6    tmpu2n_c3ms                        0x000055ff51090169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while count < arr.count {\n\
    \        if arr[count] == count + 1 {\n            count += 1\n        } else\
    \ {\n            let temp = arr[count]\n            arr[count] = arr[temp - 1]\n\
    \            arr[temp - 1] = temp\n        }\n    }\n    return arr == Array(1...arr.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b797c2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b797bf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b797bf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b797bf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b797bf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b797bd96e83 <unavailable> + 188035

    6    tmpsurfuomj                        0x00005648639f4b23 <unavailable> + 6947

    7    tmpsurfuomj                        0x00005648639f4692 <unavailable> + 5778

    8    libc.so.6                          0x00002b797c48c460 __libc_start_main +
    245

    9    tmpsurfuomj                        0x00005648639f4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr[0] {\n\
    \        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count - 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2bze3v8k/tmp2bze3v8k.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd6161c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd5e58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd5e58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd5e577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bze3v8k                        0x000055f3bddfa72e <unavailable> + 5934

    5    libc.so.6                          0x00002b4cd634d460 __libc_start_main +
    245

    6    tmp2bze3v8k                        0x000055f3bddfa1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var min = arr[0]\n    var max = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpd6chkg8w/tmpd6chkg8w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3efddcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3efdac2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3efdac2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3efdac17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6chkg8w                        0x000055aac6e1b54a <unavailable> + 5450

    5    libc.so.6                          0x00002b3efdfb7460 __libc_start_main +
    245

    6    tmpd6chkg8w                        0x000055aac6e1b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14_ea94t/tmp14_ea94t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77bb9d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77bb6ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77bb6cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77bb6cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14_ea94t                        0x000055e39056872e <unavailable> + 5934

    5    libc.so.6                          0x00002b77bbbc1460 __libc_start_main +
    245

    6    tmp14_ea94t                        0x000055e3905681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpiva3aicv/tmpiva3aicv.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae51526bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae514f62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae514f62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae514f617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiva3aicv                        0x00005576f481369e <unavailable> + 5790

    5    libc.so.6                          0x00002ae515457460 __libc_start_main +
    245

    6    tmpiva3aicv                        0x00005576f4813169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            arr.insert(arr.removeLast(), at:\
    \ 0)\n            i = 0\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824905
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpumd3fwh3/tmpumd3fwh3.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bf42ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bf121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bf121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bf1207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumd3fwh3                        0x000055d2d2e6a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b95bf616460 __libc_start_main +
    245

    6    tmpumd3fwh3                        0x000055d2d2e6a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i - 1] > arr[i] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwxs3igw3/tmpwxs3igw3.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44e0a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44e0763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44e0763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44e07627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxs3igw3                        0x0000557b7780659a <unavailable> + 5530

    5    libc.so.6                          0x00002b44e0c58460 __libc_start_main +
    245

    6    tmpwxs3igw3                        0x0000557b778061f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpszhg1lnl/tmpszhg1lnl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1340eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af133de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af133de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af133de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszhg1lnl                        0x000055e4d0b4869e <unavailable> + 5790

    5    libc.so.6                          0x00002af1342d6460 __libc_start_main +
    245

    6    tmpszhg1lnl                        0x000055e4d0b48169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.last! < arr.first!\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n    }\n\
    \    return count < arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_dldg3yn/tmp_dldg3yn.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc094d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc091ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc091ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc091cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dldg3yn                        0x000055e3add977ce <unavailable> + 6094

    5    libc.so.6                          0x00002adc096c3460 __libc_start_main +
    245

    6    tmp_dldg3yn                        0x000055e3add97299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        count += 1\n        let last = arr.removeLast()\n\
    \        arr.insert(last, at: 0)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxyamg8nr.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpszhg1lnl/tmpszhg1lnl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1340eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af133de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af133de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af133de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszhg1lnl                        0x000055e4d0b4869e <unavailable> + 5790

    5    libc.so.6                          0x00002af1342d6460 __libc_start_main +
    245

    6    tmpszhg1lnl                        0x000055e4d0b48169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpflcff4m8/tmpflcff4m8.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390f039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390ed30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390ed30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390ed2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflcff4m8                        0x0000559fa596959a <unavailable> + 5530

    5    libc.so.6                          0x00002b390f225460 __libc_start_main +
    245

    6    tmpflcff4m8                        0x0000559fa59691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            return arr == arr.sorted()\n\
    \        }\n        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyog8uz9g/tmpyog8uz9g.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae37212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae36f09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae36f09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae36f087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyog8uz9g                        0x0000561103efe50a <unavailable> + 5386

    5    libc.so.6                          0x00002aae373fe460 __libc_start_main +
    245

    6    tmpyog8uz9g                        0x0000561103efe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt2w5bwyv/tmpt2w5bwyv.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2215eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2212e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2212e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2212e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2w5bwyv                        0x000055c65715a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ba2217d6460 __libc_start_main +
    245

    6    tmpt2w5bwyv                        0x000055c65715a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3tux7hbs/tmp3tux7hbs.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11bca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11b9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11b9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11b99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tux7hbs                        0x000055d6863c83ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab11be95460 __libc_start_main +
    245

    6    tmp3tux7hbs                        0x000055d6863c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count == arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    var max = arr[0]\n\
    \    for i in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n        if arr[i] > max {\n            max = arr[i]\n        }\n \
    \   }\n    if min == max {\n        return true\n    }\n    for i in 1..<arr.count\
    \ {\n        if arr[i] == min {\n            arr[i] = max\n        }\n    }\n\
    \    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm3qmngbc/tmpm3qmngbc.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20d3f9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20d3c96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20d3c96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20d3c957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3qmngbc                        0x00005624c3c9f59a <unavailable> + 5530

    5    libc.so.6                          0x00002b20d418b460 __libc_start_main +
    245

    6    tmpm3qmngbc                        0x00005624c3c9f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return arr.sorted() == arr\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp77hp6cat/tmp77hp6cat.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae582501c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5821f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5821f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5821f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77hp6cat                        0x00005606f3dbd69e <unavailable> + 5790

    5    libc.so.6                          0x00002ae5826ed460 __libc_start_main +
    245

    6    tmp77hp6cat                        0x00005606f3dbd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[i + 1] {\n\
    \            count += 1\n            arr.remove(at: i)\n            arr.insert(arr[i],\
    \ at: 0)\n        } else {\n            i += 1\n        }\n    }\n    return count\
    \ <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b9e38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b9e081561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1b9e081286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1b9e08113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1b9e080bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1b9de80e83 <unavailable> + 188035

    6    tmpv178djul                        0x000056456f01e89e <unavailable> + 6302

    7    tmpv178djul                        0x000056456f01e3f5 <unavailable> + 5109

    8    libc.so.6                          0x00002b1b9e576460 __libc_start_main +
    245

    9    tmpv178djul                        0x000056456f01e0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n\
    \    while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n    \
    \    }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpme0ltdjz/tmpme0ltdjz.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b611698fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6116686b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6116686988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61166857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpme0ltdjz                        0x000055b7f68a03ba <unavailable> + 5050

    5    libc.so.6                          0x00002b6116b7b460 __libc_start_main +
    245

    6    tmpme0ltdjz                        0x000055b7f68a0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] < arr[j - 1] {\n            return false\n\
    \        }\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        if count == arr.count {\n          \
    \  return false\n        }\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        count += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmponwrd51e.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n      \
    \  i += 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n  \
    \  var j = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1]\
    \ {\n            break\n        }\n        j += 1\n    }\n    if j == arr.count\
    \ - 1 {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count\
    \ - 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n    \
    \    k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsn4eocjg/tmpsn4eocjg.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af670125c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af66fe1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af66fe1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af66fe1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn4eocjg                        0x0000563d073eb54e <unavailable> + 5454

    5    libc.so.6                          0x00002af670311460 __libc_start_main +
    245

    6    tmpsn4eocjg                        0x0000563d073eb019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while !is_sorted(arr: arr)\
    \ {\n        let last = arr.removeLast()\n        arr.insert(last, at: 0)\n  \
    \      count += 1\n        if count > arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf4o1nxpf.swift:27:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement me!\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsay0kk5o/tmpsay0kk5o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27dc463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27dc15ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27dc15a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27dc1597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsay0kk5o                        0x00005580bd77830a <unavailable> + 4874

    5    libc.so.6                          0x00002b27dc64f460 __libc_start_main +
    245

    6    tmpsay0kk5o                        0x00005580bd777f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        if count == arr.count {\n          \
    \  return false\n        }\n        arr = shift(arr: arr)\n        count += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7j7m6gk0.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n/tmp/tmp7j7m6gk0.swift:30:15:\
    \ error: cannot find 'shift' in scope\n        arr = shift(arr: arr)\n       \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n\
    \    }\n    if count > 1 {\n        return false\n    }\n    var i = arr.count\
    \ - 1\n    while i > 0 && arr[i - 1] > arr[i] {\n        i -= 1\n    }\n    if\
    \ i == 0 {\n        return true\n    }\n    var j = i\n    while j < arr.count\
    \ - 1 && arr[j] < arr[j + 1] {\n        j += 1\n    }\n    if j == arr.count -\
    \ 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    i -= 1\n    while\
    \ i > 0 {\n        if arr[i] > arr[i - 1] {\n            return false\n      \
    \  }\n        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp6l0i870k/tmp6l0i870k.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785d3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785d0d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785d0d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785d0d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6l0i870k                        0x000055639d9653ba <unavailable> + 5050

    5    libc.so.6                          0x00002b785d5c8460 __libc_start_main +
    245

    6    tmp6l0i870k                        0x000055639d965019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpv1ijt60f/tmpv1ijt60f.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc2e2dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc2dfd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc2dfd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc2dfd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1ijt60f                        0x0000556adc62859a <unavailable> + 5530

    5    libc.so.6                          0x00002adc2e4c7460 __libc_start_main +
    245

    6    tmpv1ijt60f                        0x0000556adc6281f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n    }\n\
    \    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqcv4evrs.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpqcv4evrs.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpj79zswem/tmpj79zswem.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b507298ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5072681b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5072681988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50726807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj79zswem                        0x0000555a86eca50a <unavailable> + 5386

    5    libc.so.6                          0x00002b5072b76460 __libc_start_main +
    245

    6    tmpj79zswem                        0x0000555a86eca169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = arr.count - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1]\
    \ {\n            count += 1\n            if count > 1 {\n                return\
    \ false\n            }\n            let temp = arr[i]\n            arr[i] = arr[i\
    \ - 1]\n            arr[i - 1] = temp\n        }\n        i -= 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpka0lfgrd/tmpka0lfgrd.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e5786c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e547db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e547d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e547c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpka0lfgrd                        0x00005561abf1d41a <unavailable> + 5146

    5    libc.so.6                          0x00002b91e5972460 __libc_start_main +
    245

    6    tmpka0lfgrd                        0x00005561abf1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while count < arr.count {\n\
    \        if arr[count] == count + 1 {\n            count += 1\n        } else\
    \ {\n            break\n        }\n    }\n    if count == arr.count {\n      \
    \  return true\n    }\n    var i = count\n    while i < arr.count {\n        if\
    \ arr[i] == count + 1 {\n            arr.swapAt(i, count)\n            count +=\
    \ 1\n        }\n        i += 1\n    }\n    return count == arr.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4dmuozd1/tmp4dmuozd1.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c544d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c541d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c541d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c541cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dmuozd1                        0x000055840ae2645a <unavailable> + 5210

    5    libc.so.6                          0x00002b8c546c5460 __libc_start_main +
    245

    6    tmp4dmuozd1                        0x000055840ae260b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count - 1\n\
    \        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2bze3v8k/tmp2bze3v8k.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd6161c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd5e58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd5e58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd5e577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bze3v8k                        0x000055f3bddfa72e <unavailable> + 5934

    5    libc.so.6                          0x00002b4cd634d460 __libc_start_main +
    245

    6    tmp2bze3v8k                        0x000055f3bddfa1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n\
    \        }\n    }\n    if arr.contains(min) {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        if count > arr.count {\n           \
    \ return false\n        }\n        arr = shift(arr: arr)\n        count += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3foutruj.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n/tmp/tmp3foutruj.swift:30:15:\
    \ error: cannot find 'shift' in scope\n        arr = shift(arr: arr)\n       \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var sorted =\
    \ arr.sorted()\n    var count = 0\n    while arr != sorted {\n        arr.insert(arr.removeLast(),\
    \ at: 0)\n        count += 1\n        if count > arr.count {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqcv4evrs.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpqcv4evrs.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count == arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i] < arr[i - 1] {\n            swap(&arr[i],\
    \ &arr[i - 1])\n            i -= 1\n        } else {\n            i -= 1\n   \
    \     }\n    }\n    return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzbk3wvbb.swift:28:18: error: overlapping accesses to 'arr', but\
    \ modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&arr[i], &arr[i - 1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \            arr.swapAt(i, i - 1)\n/tmp/tmpzbk3wvbb.swift:28:27: note: conflicting\
    \ access is here\n            swap(&arr[i], &arr[i - 1])\n                   \
    \       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt2w5bwyv/tmpt2w5bwyv.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2215eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2212e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2212e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2212e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2w5bwyv                        0x000055c65715a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ba2217d6460 __libc_start_main +
    245

    6    tmpt2w5bwyv                        0x000055c65715a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpk_gczyvd/tmpk_gczyvd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea12506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea121fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea121fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea121fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_gczyvd                        0x000055c260da630a <unavailable> + 4874

    5    libc.so.6                          0x00002aea126f2460 __libc_start_main +
    245

    6    tmpk_gczyvd                        0x000055c260da5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    let sortedArr\
    \ = arr.sorted()\n    var count = 0\n    while arr != sortedArr {\n        let\
    \ last = arr.removeLast()\n        arr.insert(last, at: 0)\n        count += 1\n\
    \        if count > arr.count {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp1mq5nt99/tmp1mq5nt99.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5177c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5174bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5174bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5174bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mq5nt99                        0x0000560aa5f1a5ea <unavailable> + 5610

    5    libc.so.6                          0x00002ba5179b2460 __libc_start_main +
    245

    6    tmp1mq5nt99                        0x0000560aa5f1a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt2w5bwyv/tmpt2w5bwyv.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2215eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2212e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2212e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2212e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2w5bwyv                        0x000055c65715a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ba2217d6460 __libc_start_main +
    245

    6    tmpt2w5bwyv                        0x000055c65715a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n\
    \    }\n    if count > 1 {\n        return false\n    }\n    var min = arr[0]\n\
    \    var min_index = 0\n    for i in 1..<arr.count {\n        if arr[i] < min\
    \ {\n            min = arr[i]\n            min_index = i\n        }\n    }\n \
    \   if min_index == 0 {\n        return true\n    }\n    var temp = arr[min_index]\n\
    \    for i in min_index..<arr.count - 1 {\n        arr[i] = arr[i + 1]\n    }\n\
    \    arr[arr.count - 1] = temp\n    return move_one_ball(arr: arr)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_9gv0fm_/tmp_9gv0fm_.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c0533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c022ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c022a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c02297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9gv0fm_                        0x0000565345c6a59a <unavailable> + 5530

    5    libc.so.6                          0x00002b82c071f460 __libc_start_main +
    245

    6    tmp_9gv0fm_                        0x0000565345c6a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpumd3fwh3/tmpumd3fwh3.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bf42ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bf121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bf121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bf1207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumd3fwh3                        0x000055d2d2e6a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b95bf616460 __libc_start_main +
    245

    6    tmpumd3fwh3                        0x000055d2d2e6a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var last = arr.removeLast()\n    for i in\
    \ (0..<arr.count).reversed() {\n        if arr[i] > last {\n            return\
    \ false\n        }\n        last = arr[i]\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfn0a4299/tmpfn0a4299.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4433dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4430d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4430d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4430d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn0a4299                        0x0000561e234877fa <unavailable> + 6138

    5    libc.so.6                          0x00002af4435ca460 __libc_start_main +
    245

    6    tmpfn0a4299                        0x0000561e23487459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            arr.remove(at: i)\n           \
    \ arr.insert(arr[arr.count - 1], at: 0)\n            i = 0\n        } else {\n\
    \            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824906
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i - 1] > arr[i] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = arr.count\
    \ - 1\n    while j > 0 {\n        if arr[j - 1] > arr[j] {\n            break\n\
    \        }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n\
    \    if i == j {\n        return false\n    }\n    var temp = arr[i]\n    arr[i]\
    \ = arr[j]\n    arr[j] = temp\n    i += 1\n    j += 1\n    while i < arr.count\
    \ && j < arr.count {\n        if arr[i] < arr[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnnf7yq5m/tmpnnf7yq5m.swift:79: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9058529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9058220b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9058220988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b905821f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnf7yq5m                        0x000055d38b03541a <unavailable> + 5146

    5    libc.so.6                          0x00002b9058715460 __libc_start_main +
    245

    6    tmpnnf7yq5m                        0x000055d38b035079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        arr.insert(arr.removeLast(), at: 0)\n\
    \        count += 1\n        if count == arr.count {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3tux7hbs/tmp3tux7hbs.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11bca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11b9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11b9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11b99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tux7hbs                        0x000055d6863c83ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab11be95460 __libc_start_main +
    245

    6    tmp3tux7hbs                        0x000055d6863c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Implement your solution here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpscrr9u2o/tmpscrr9u2o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef3a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef3762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef3762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef37617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscrr9u2o                        0x000055caf4f6530a <unavailable> + 4874

    5    libc.so.6                          0x00002b4ef3c57460 __libc_start_main +
    245

    6    tmpscrr9u2o                        0x000055caf4f64f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        arr = shift_right(arr: arr)\n     \
    \   count += 1\n        if count > arr.count {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9ekf8tax.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmp9ekf8tax.swift:27:15:\
    \ error: cannot find 'shift_right' in scope\n        arr = shift_right(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa5dyowu9/tmpa5dyowu9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f8fa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f8f717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f8f717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f8f7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5dyowu9                        0x00005562676605ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4f8fc0c460 __libc_start_main +
    245

    6    tmpa5dyowu9                        0x0000556267660249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3tux7hbs/tmp3tux7hbs.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11bca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11b9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11b9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11b99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tux7hbs                        0x000055d6863c83ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab11be95460 __libc_start_main +
    245

    6    tmp3tux7hbs                        0x000055d6863c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpivmnfhu3/tmpivmnfhu3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfe970dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfe9404b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfe9404988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfe94037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivmnfhu3                        0x0000564f764da49e <unavailable> + 5278

    5    libc.so.6                          0x00002adfe98f9460 __libc_start_main +
    245

    6    tmpivmnfhu3                        0x0000564f764d9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n\
    \    }\n    if count > 1 {\n        return false\n    }\n    if count == 0 {\n\
    \        return true\n    }\n    for i in 0..<arr.count - 1 {\n        if arr[i]\
    \ > arr[i + 1] {\n            let temp = arr[i]\n            arr[i] = arr[i +\
    \ 1]\n            arr[i + 1] = temp\n            break\n        }\n    }\n   \
    \ return move_one_ball(arr: arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpvxa2ypru/tmpvxa2ypru.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0774c77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b077496eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b077496e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b077496d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxa2ypru                        0x000055d37d92659a <unavailable> + 5530

    5    libc.so.6                          0x00002b0774e63460 __libc_start_main +
    245

    6    tmpvxa2ypru                        0x000055d37d9261f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = 0\n    while i <\
    \ arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            j = i + 1\n \
    \           while j < arr.count - 1 && arr[j] > arr[j + 1] {\n               \
    \ j += 1\n            }\n            if j == arr.count - 1 {\n               \
    \ return false\n            }\n            var temp = arr[j]\n            for\
    \ k in (i...j).reversed() {\n                arr[k + 1] = arr[k]\n           \
    \ }\n            arr[i] = temp\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2_hj88qr/tmp2_hj88qr.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7998ca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7998999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7998999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79989987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_hj88qr                        0x000055cf0de6376a <unavailable> + 5994

    5    libc.so.6                          0x00002b7998e8e460 __libc_start_main +
    245

    6    tmp2_hj88qr                        0x000055cf0de633c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i] < arr[i - 1] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n\
    \    while j > 0 {\n        if arr[j] < arr[j - 1] {\n            return false\n\
    \        }\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpgduni2rr/tmpgduni2rr.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abea1455c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abea114cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abea114c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abea114b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgduni2rr                        0x0000561e32f6f3ba <unavailable> + 5050

    5    libc.so.6                          0x00002abea1641460 __libc_start_main +
    245

    6    tmpgduni2rr                        0x0000561e32f6f019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqygq1dej/tmpqygq1dej.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9b1b98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9b188fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9b188f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9b188e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqygq1dej                        0x000055560480650a <unavailable> + 5386

    5    libc.so.6                          0x00002ad9b1d84460 __libc_start_main +
    245

    6    tmpqygq1dej                        0x0000555604806169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = arr.count - 1\n \
    \   while i < j {\n        if arr[i] > arr[i + 1] {\n            break\n     \
    \   }\n        i += 1\n    }\n    while j > i {\n        if arr[j] < arr[j - 1]\
    \ {\n            break\n        }\n        j -= 1\n    }\n    if i == j {\n  \
    \      return true\n    }\n    var k = i + 1\n    while k < j {\n        if arr[k]\
    \ < arr[i] || arr[k] > arr[j] {\n            return false\n        }\n       \
    \ k += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n        } else\
    \ {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps40r8510/tmps40r8510.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90b60d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90b5dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90b5dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90b5dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps40r8510                        0x0000559b115e859a <unavailable> + 5530

    5    libc.so.6                          0x00002b90b62bd460 __libc_start_main +
    245

    6    tmps40r8510                        0x0000559b115e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    let sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpej1qrej0/tmpej1qrej0.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b83f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b83c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b83c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b83c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej1qrej0                        0x00005584211045ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8b8414e460 __libc_start_main +
    245

    6    tmpej1qrej0                        0x0000558421104249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplb6enqb8.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count == arr.count\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa5dyowu9/tmpa5dyowu9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f8fa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f8f717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f8f717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f8f7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5dyowu9                        0x00005562676605ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4f8fc0c460 __libc_start_main +
    245

    6    tmpa5dyowu9                        0x0000556267660249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3tux7hbs/tmp3tux7hbs.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11bca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11b9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11b9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11b99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tux7hbs                        0x000055d6863c83ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab11be95460 __libc_start_main +
    245

    6    tmp3tux7hbs                        0x000055d6863c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpb7bhuwd4/tmpb7bhuwd4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbc154bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbc1242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbc1242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbc12417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7bhuwd4                        0x0000558ee406b54a <unavailable> + 5450

    5    libc.so.6                          0x00002acbc1737460 __libc_start_main +
    245

    6    tmpb7bhuwd4                        0x0000558ee406b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var sorted =\
    \ arr.sorted()\n    var count = 0\n    while arr != sorted {\n        arr.insert(arr.removeLast(),\
    \ at: 0)\n        count += 1\n        if count > arr.count {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            swap(&arr[i], &arr[i - 1])\n  \
    \          i -= 1\n        } else {\n            break\n        }\n    }\n   \
    \ for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5r8_6qj6.swift:31:18: error: overlapping accesses to 'arr', but\
    \ modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&arr[i], &arr[i - 1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \            arr.swapAt(i, i - 1)\n/tmp/tmp5r8_6qj6.swift:31:27: note: conflicting\
    \ access is here\n            swap(&arr[i], &arr[i - 1])\n                   \
    \       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] > arr[j + 1] {\n \
    \           return false\n        }\n        j += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count {\n\
    \        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n  \
    \  return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b026d86ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b026d565561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b026d565286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b026d56513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b026d564bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b026d364e83 <unavailable> + 188035

    6    tmpuudt76st                        0x000055a432cf1a9b <unavailable> + 6811

    7    tmpuudt76st                        0x000055a432cf14d5 <unavailable> + 5333

    8    libc.so.6                          0x00002b026da5a460 __libc_start_main +
    245

    9    tmpuudt76st                        0x000055a432cf11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa5dyowu9/tmpa5dyowu9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f8fa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f8f717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f8f717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f8f7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5dyowu9                        0x00005562676605ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4f8fc0c460 __libc_start_main +
    245

    6    tmpa5dyowu9                        0x0000556267660249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        if\
    \ arr[i] < arr[i - 1] {\n            min = arr[i]\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppdkoaxt2/tmppdkoaxt2.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1eac0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ea906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1ea906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1ea9057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdkoaxt2                        0x000056170e87454a <unavailable> + 5450

    5    libc.so.6                          0x00002ae1eadfb460 __libc_start_main +
    245

    6    tmppdkoaxt2                        0x000056170e8741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpflcff4m8/tmpflcff4m8.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390f039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390ed30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390ed30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390ed2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflcff4m8                        0x0000559fa596959a <unavailable> + 5530

    5    libc.so.6                          0x00002b390f225460 __libc_start_main +
    245

    6    tmpflcff4m8                        0x0000559fa59691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt2w5bwyv/tmpt2w5bwyv.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2215eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2212e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2212e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2212e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2w5bwyv                        0x000055c65715a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ba2217d6460 __libc_start_main +
    245

    6    tmpt2w5bwyv                        0x000055c65715a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i\n    while\
    \ j < arr.count - 1 {\n        if arr[j] > arr[j + 1] {\n            break\n \
    \       }\n        j += 1\n    }\n    if j == arr.count - 1 {\n        return\
    \ true\n    }\n    var k = j\n    while k > 0 {\n        if arr[k] < arr[k - 1]\
    \ {\n            break\n        }\n        k -= 1\n    }\n    if k == 0 {\n  \
    \      return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3e1mksya/tmp3e1mksya.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44eb5a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44eb298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44eb298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44eb2977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e1mksya                        0x0000555d96d4254e <unavailable> + 5454

    5    libc.so.6                          0x00002b44eb78d460 __libc_start_main +
    245

    6    tmp3e1mksya                        0x0000555d96d42019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while\
    \ i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            count +=\
    \ 1\n            let temp = arr[i]\n            arr[i] = arr[i + 1]\n        \
    \    arr[i + 1] = temp\n            i = 0\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpu1nkgyn2/tmpu1nkgyn2.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6829cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b67f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b67f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b67f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1nkgyn2                        0x00005568bf40d41a <unavailable> + 5146

    5    libc.so.6                          0x00002b8b68488460 __libc_start_main +
    245

    6    tmpu1nkgyn2                        0x00005568bf40d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpszhg1lnl/tmpszhg1lnl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1340eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af133de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af133de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af133de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszhg1lnl                        0x000055e4d0b4869e <unavailable> + 5790

    5    libc.so.6                          0x00002af1342d6460 __libc_start_main +
    245

    6    tmpszhg1lnl                        0x000055e4d0b48169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpszhg1lnl/tmpszhg1lnl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1340eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af133de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af133de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af133de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszhg1lnl                        0x000055e4d0b4869e <unavailable> + 5790

    5    libc.so.6                          0x00002af1342d6460 __libc_start_main +
    245

    6    tmpszhg1lnl                        0x000055e4d0b48169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n    }\n\
    \    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while arr != arr.sorted() {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var count = 0\n    while arr.sorted()\
    \ != arr {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n\
    \    }\n    return count % 2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824906
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n   \
    \ }\n    if count > 1 {\n        return false\n    }\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n       \
    \     arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n        }\n    }\n \
    \   for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyfrsfiyf/tmpyfrsfiyf.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91f37edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91f34e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91f34e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91f34e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfrsfiyf                        0x00005623f7eae59a <unavailable> + 5530

    5    libc.so.6                          0x00002b91f39d9460 __libc_start_main +
    245

    6    tmpyfrsfiyf                        0x00005623f7eae1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    while arr.first != arr.min()\
    \ {\n        arr.append(arr.removeFirst())\n        count += 1\n    }\n    return\
    \ count % 2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpz4dnhkm5/tmpz4dnhkm5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcb7860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcb7557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcb7557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcb75567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4dnhkm5                        0x00005584785f362a <unavailable> + 5674

    5    libc.so.6                          0x00002abcb7a4c460 __libc_start_main +
    245

    6    tmpz4dnhkm5                        0x00005584785f3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfmeop8z7/tmpfmeop8z7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1f7428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1f711fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1f711f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1f711e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmeop8z7                        0x0000564f1ff4654a <unavailable> + 5450

    5    libc.so.6                          0x00002ad1f7614460 __libc_start_main +
    245

    6    tmpfmeop8z7                        0x0000564f1ff461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp43g_xwm5/tmp43g_xwm5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2387dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2384d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2384d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2384d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43g_xwm5                        0x0000563a5b44254a <unavailable> + 5450

    5    libc.so.6                          0x00002af2389c6460 __libc_start_main +
    245

    6    tmp43g_xwm5                        0x0000563a5b4421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    var count = 0\n    for i\
    \ in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            count +=\
    \ 1\n        }\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa5dyowu9/tmpa5dyowu9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f8fa20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f8f717b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f8f717988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f8f7167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5dyowu9                        0x00005562676605ea <unavailable> + 5610

    5    libc.so.6                          0x00002b4f8fc0c460 __libc_start_main +
    245

    6    tmpa5dyowu9                        0x0000556267660249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        count += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6llzfpad.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count -\
    \ 1 {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n      \
    \  i += 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n  \
    \  var j = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1]\
    \ {\n            break\n        }\n        j += 1\n    }\n    if j == arr.count\
    \ - 1 {\n        return true\n    }\n    var k = j + 1\n    while k < arr.count\
    \ - 1 {\n        if arr[k] > arr[k + 1] {\n            break\n        }\n    \
    \    k += 1\n    }\n    if k == arr.count - 1 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsn4eocjg/tmpsn4eocjg.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af670125c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af66fe1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af66fe1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af66fe1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsn4eocjg                        0x0000563d073eb54e <unavailable> + 5454

    5    libc.so.6                          0x00002af670311460 __libc_start_main +
    245

    6    tmpsn4eocjg                        0x0000563d073eb019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Your code here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpl6hd1nco/tmpl6hd1nco.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a93945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a9363cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a9363c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a9363b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6hd1nco                        0x000055ae09b4530a <unavailable> + 4874

    5    libc.so.6                          0x00002b5a93b31460 __libc_start_main +
    245

    6    tmpl6hd1nco                        0x000055ae09b44f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n  \
    \      if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps_0vqf_u/tmps_0vqf_u.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a9509c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a9200b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a9200988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a91ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_0vqf_u                        0x0000562b1118369e <unavailable> + 5790

    5    libc.so.6                          0x00002b07a96f5460 __libc_start_main +
    245

    6    tmps_0vqf_u                        0x0000562b11183169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i - 1] > arr[i] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm_dafaor/tmpm_dafaor.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b4a646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b4a33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b4a33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b4a33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_dafaor                        0x0000562cbeb8b50a <unavailable> + 5386

    5    libc.so.6                          0x00002b3b4a832460 __libc_start_main +
    245

    6    tmpm_dafaor                        0x0000562cbeb8b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var count = 0\n    while arr.count >\
    \ 1 {\n        if arr[0] > arr[1] {\n            arr.remove(at: 0)\n         \
    \   arr.append(arr[0])\n            arr.remove(at: 0)\n            count += 1\n\
    \        } else {\n            arr.remove(at: 0)\n        }\n    }\n    return\
    \ count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpk5d09fll/tmpk5d09fll.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97c8423c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97c811ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97c811a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97c81197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5d09fll                        0x0000562a835e246a <unavailable> + 5226

    5    libc.so.6                          0x00002b97c860f460 __libc_start_main +
    245

    6    tmpk5d09fll                        0x0000562a835e20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            break\n        }\n        i -=\
    \ 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i - 1\n \
    \   while j > 0 {\n        if arr[j] > arr[j - 1] {\n            break\n     \
    \   }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3tux7hbs/tmp3tux7hbs.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11bca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab11b9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab11b9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab11b99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tux7hbs                        0x000055d6863c83ba <unavailable> + 5050

    5    libc.so.6                          0x00002ab11be95460 __libc_start_main +
    245

    6    tmp3tux7hbs                        0x000055d6863c8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    if count == 0 {\n      \
    \  return true\n    }\n    var i = 1\n    while i < arr.count && arr[i] > arr[i\
    \ - 1] {\n        i += 1\n    }\n    var j = i + 1\n    while j < arr.count &&\
    \ arr[j] > arr[j - 1] {\n        j += 1\n    }\n    if j == arr.count {\n    \
    \    return true\n    }\n    var k = j + 1\n    while k < arr.count && arr[k]\
    \ > arr[k - 1] {\n        k += 1\n    }\n    if k == arr.count {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write some code to solve\
    \ this coding challenge\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpks9nlfzw/tmpks9nlfzw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae90fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae8df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae8df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae8df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks9nlfzw                        0x0000562be4cd830a <unavailable> + 4874

    5    libc.so.6                          0x00002b3ae92e8460 __libc_start_main +
    245

    6    tmpks9nlfzw                        0x0000562be4cd7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var count = 0\n    while arr.count\
    \ > 1 {\n        if arr[0] > arr[1] {\n            count += 1\n            let\
    \ temp = arr[0]\n            arr.remove(at: 0)\n            arr.append(temp)\n\
    \        } else {\n            arr.remove(at: 0)\n        }\n    }\n    return\
    \ count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            arr.remove(at:\
    \ i)\n            arr.insert(arr[i], at: 0)\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5mik9eyp/tmp5mik9eyp.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba02519bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba024e92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba024e92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba024e917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mik9eyp                        0x000056536a5c25fe <unavailable> + 5630

    5    libc.so.6                          0x00002ba025387460 __libc_start_main +
    245

    6    tmp5mik9eyp                        0x000056536a5c20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !isSorted(arr: arr) {\n        let last = arr.removeLast()\n      \
    \  arr.insert(last, at: 0)\n        count += 1\n        if count > arr.count {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplb6enqb8.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \    while !isSorted(arr: arr) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n        }\n\
    \    }\n    if count > 1 {\n        return false\n    }\n    var index = 0\n \
    \   for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n         \
    \   index = i\n            break\n        }\n    }\n    if index == 0 {\n    \
    \    return true\n    }\n    for i in 0..<index {\n        if arr[i] > arr[index\
    \ + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqsvdacdi/tmpqsvdacdi.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d5dadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d5aa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d5aa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d5aa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsvdacdi                        0x00005619b341f54a <unavailable> + 5450

    5    libc.so.6                          0x00002ac0d5f99460 __libc_start_main +
    245

    6    tmpqsvdacdi                        0x00005619b341f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfmeop8z7/tmpfmeop8z7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1f7428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1f711fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1f711f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1f711e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmeop8z7                        0x0000564f1ff4654a <unavailable> + 5450

    5    libc.so.6                          0x00002ad1f7614460 __libc_start_main +
    245

    6    tmpfmeop8z7                        0x0000564f1ff461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var min = arr[0]\n\
    \    var count = 0\n    for i in 1..<arr.count {\n        if arr[i] < min {\n\
    \            min = arr[i]\n            count += 1\n        }\n    }\n    if count\
    \ == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpy51vrlnf/tmpy51vrlnf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ffa77ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ffa475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ffa475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ffa4747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy51vrlnf                        0x0000557e5b22c7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b2ffa96a460 __libc_start_main +
    245

    6    tmpy51vrlnf                        0x0000557e5b22c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            count += 1\n        }\n        i += 1\n    }\n    if count >\
    \ 1 {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        count += 1\n        let last = arr.removeLast()\n        arr.insert(last,\
    \ at: 0)\n        if count > arr.count {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824902
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr != arr.sorted()\
    \ {\n        arr.insert(arr.removeLast(), at: 0)\n        count += 1\n       \
    \ if count > arr.count {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n\
    \    if count > 1 {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4b11b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4b0ea9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac4b0ea9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac4b0ea913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac4b0ea8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac4b0ca8e83 <unavailable> + 188035

    6    tmppsivxinu                        0x0000556b1839daa6 <unavailable> + 6822

    7    tmppsivxinu                        0x0000556b1839d4d5 <unavailable> + 5333

    8    libc.so.6                          0x00002ac4b139e460 __libc_start_main +
    245

    9    tmppsivxinu                        0x0000556b1839d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14_ea94t/tmp14_ea94t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77bb9d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77bb6ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77bb6cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77bb6cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14_ea94t                        0x000055e39056872e <unavailable> + 5934

    5    libc.so.6                          0x00002b77bbbc1460 __libc_start_main +
    245

    6    tmp14_ea94t                        0x000055e3905681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    var i = arr.count - 1\n    while i >\
    \ 0 {\n        if arr[i - 1] > arr[i] {\n            break\n        }\n      \
    \  i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n    var j = i -\
    \ 1\n    while j > 0 {\n        if arr[j - 1] > arr[i] {\n            break\n\
    \        }\n        j -= 1\n    }\n    if j == 0 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpmglxogih/tmpmglxogih.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50eae6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50eab64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50eab64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50eab637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmglxogih                        0x00005650c3e043ba <unavailable> + 5050

    5    libc.so.6                          0x00002b50eb059460 __libc_start_main +
    245

    6    tmpmglxogih                        0x00005650c3e04019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpb7bhuwd4/tmpb7bhuwd4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbc154bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbc1242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbc1242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbc12417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7bhuwd4                        0x0000558ee406b54a <unavailable> + 5450

    5    libc.so.6                          0x00002acbc1737460 __libc_start_main +
    245

    6    tmpb7bhuwd4                        0x0000558ee406b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            return false\n        }\n        min\
    \ = arr[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfmeop8z7/tmpfmeop8z7.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1f7428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1f711fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1f711f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1f711e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmeop8z7                        0x0000564f1ff4654a <unavailable> + 5450

    5    libc.so.6                          0x00002ad1f7614460 __libc_start_main +
    245

    6    tmpfmeop8z7                        0x0000564f1ff461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14_ea94t/tmp14_ea94t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77bb9d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77bb6ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77bb6cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77bb6cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14_ea94t                        0x000055e39056872e <unavailable> + 5934

    5    libc.so.6                          0x00002b77bbbc1460 __libc_start_main +
    245

    6    tmp14_ea94t                        0x000055e3905681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9zg92_kg/tmp9zg92_kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3970ed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3970bcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3970bcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3970bca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zg92_kg                        0x0000558ac5a8f30a <unavailable> + 4874

    5    libc.so.6                          0x00002b39710c0460 __libc_start_main +
    245

    6    tmp9zg92_kg                        0x0000558ac5a8ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < min {\n            return false\n        }\n        min = arr[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmps4fhtdhv/tmps4fhtdhv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f153dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f1234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f1234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f12337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4fhtdhv                        0x000055e50242a54a <unavailable> + 5450

    5    libc.so.6                          0x00002b85f1729460 __libc_start_main +
    245

    6    tmps4fhtdhv                        0x000055e50242a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement your solution\
    \ here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpktx4sl28/tmpktx4sl28.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa74cb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa749abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa749ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa749aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktx4sl28                        0x0000558ceead730a <unavailable> + 4874

    5    libc.so.6                          0x00002baa74ea0460 __libc_start_main +
    245

    6    tmpktx4sl28                        0x0000558ceead6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_0puzcy7/tmp_0puzcy7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7e323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade7e01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade7e01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade7e0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0puzcy7                        0x00005567341d930a <unavailable> + 4874

    5    libc.so.6                          0x00002ade7e50f460 __libc_start_main +
    245

    6    tmp_0puzcy7                        0x00005567341d8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i -= 1\n   \
    \     } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpflcff4m8/tmpflcff4m8.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390f039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390ed30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390ed30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390ed2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflcff4m8                        0x0000559fa596959a <unavailable> + 5530

    5    libc.so.6                          0x00002b390f225460 __libc_start_main +
    245

    6    tmpflcff4m8                        0x0000559fa59691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i + 1]\n            arr[i + 1] = temp\n            i = 0\n    \
    \    } else {\n            i += 1\n        }\n    }\n    return arr == arr.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpszhg1lnl/tmpszhg1lnl.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1340eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af133de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af133de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af133de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszhg1lnl                        0x000055e4d0b4869e <unavailable> + 5790

    5    libc.so.6                          0x00002af1342d6460 __libc_start_main +
    245

    6    tmpszhg1lnl                        0x000055e4d0b48169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    var j = arr.count - 1\n \
    \   while i < j {\n        if arr[i] > arr[i + 1] {\n            arr.insert(arr.remove(at:\
    \ i), at: 0)\n            i += 1\n        } else {\n            i += 1\n     \
    \   }\n        if arr[j] < arr[j - 1] {\n            arr.append(arr.remove(at:\
    \ j))\n            j -= 1\n        } else {\n            j -= 1\n        }\n \
    \   }\n    for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwercl_sh/tmpwercl_sh.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b793ebf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b793e8e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b793e8e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b793e8e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwercl_sh                        0x000055aafcdc964a <unavailable> + 5706

    5    libc.so.6                          0x00002b793eddd460 __libc_start_main +
    245

    6    tmpwercl_sh                        0x000055aafcdc92a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp13osycez/tmp13osycez.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56b686ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56b6561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56b6561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56b65607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13osycez                        0x0000556cbf81b3ba <unavailable> + 5050

    5    libc.so.6                          0x00002b56b6a56460 __libc_start_main +
    245

    6    tmp13osycez                        0x0000556cbf81b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n  \
    \      if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n            arr[i]\
    \ = arr[i - 1]\n            arr[i - 1] = temp\n            return arr == arr.sorted()\n\
    \        }\n        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyog8uz9g/tmpyog8uz9g.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae37212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae36f09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae36f09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae36f087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyog8uz9g                        0x0000561103efe50a <unavailable> + 5386

    5    libc.so.6                          0x00002aae373fe460 __libc_start_main +
    245

    6    tmpyog8uz9g                        0x0000561103efe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var count = 0\n\
    \    while !is_sorted(arr: arr) {\n        if count == arr.count {\n         \
    \   return false\n        }\n        arr = right_shift(arr: arr)\n        count\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqcv4evrs.swift:26:12: error: cannot find 'is_sorted' in scope\n\
    \    while !is_sorted(arr: arr) {\n           ^~~~~~~~~\n/tmp/tmpqcv4evrs.swift:30:15:\
    \ error: cannot find 'right_shift' in scope\n        arr = right_shift(arr: arr)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var min = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n \
    \   var index = 0\n    for i in 0..<arr.count {\n        if arr[i] == min {\n\
    \            index = i\n            break\n        }\n    }\n    var temp = arr[index]\n\
    \    for i in index..<arr.count-1 {\n        arr[i] = arr[i+1]\n    }\n    arr[arr.count-1]\
    \ = temp\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpna3ng7in/tmpna3ng7in.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa59b15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa5980cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa5980c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa5980b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna3ng7in                        0x000056344ea5459a <unavailable> + 5530

    5    libc.so.6                          0x00002afa59d01460 __libc_start_main +
    245

    6    tmpna3ng7in                        0x000056344ea541f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var i = 0\n \
    \   while i < arr.count - 1 {\n        if arr[i] > arr[i + 1] {\n            let\
    \ tmp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1] = tmp\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpljrf12zq/tmpljrf12zq.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6796c54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b679694bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b679694b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b679694a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljrf12zq                        0x00005597ce0ca5ae <unavailable> + 5550

    5    libc.so.6                          0x00002b6796e40460 __libc_start_main +
    245

    6    tmpljrf12zq                        0x00005597ce0ca079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var count = 0\n    while arr.count > 1 {\n\
    \        if arr[0] > arr[1] {\n            arr.remove(at: 0)\n            arr.append(arr[0])\n\
    \            arr.remove(at: 0)\n            count += 1\n        } else {\n   \
    \         arr.remove(at: 0)\n        }\n    }\n    return count <= 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpn7ksqs14/tmpn7ksqs14.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08821d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0881ecbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0881ecb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0881eca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7ksqs14                        0x0000561dfd99246a <unavailable> + 5226

    5    libc.so.6                          0x00002b08823c0460 __libc_start_main +
    245

    6    tmpn7ksqs14                        0x0000561dfd9920c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 {\n\
    \        if arr[i] < arr[i - 1] {\n            let temp = arr[i]\n           \
    \ arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n            i = arr.count\
    \ - 1\n        } else {\n            i -= 1\n        }\n    }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14_ea94t/tmp14_ea94t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77bb9d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77bb6ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77bb6cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77bb6cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14_ea94t                        0x000055e39056872e <unavailable> + 5934

    5    libc.so.6                          0x00002b77bbbc1460 __libc_start_main +
    245

    6    tmp14_ea94t                        0x000055e3905681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824900
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    var i = 0\n    while i < arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            count += 1\n          \
    \  let temp = arr[i]\n            arr[i] = arr[i + 1]\n            arr[i + 1]\
    \ = temp\n        }\n        i += 1\n    }\n    return count <= 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpn6lerxw5/tmpn6lerxw5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cb01ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cafef6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cafef6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cafef57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6lerxw5                        0x0000564c5721241a <unavailable> + 5146

    5    libc.so.6                          0x00002b0cb03eb460 __libc_start_main +
    245

    6    tmpn6lerxw5                        0x0000564c57212079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var index = arr.count - 1\n    while index >\
    \ 0 {\n        if arr[index] < arr[index - 1] {\n            arr.remove(at: index)\n\
    \            arr.insert(arr[index], at: 0)\n            index = arr.count - 1\n\
    \        } else {\n            index -= 1\n        }\n    }\n    return arr ==\
    \ arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c29eaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c29ba5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5c29ba5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5c29ba513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5c29ba4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5c299a4e83 <unavailable> + 188035

    6    tmpwpnoozmk                        0x0000556572603a16 <unavailable> + 6678

    7    tmpwpnoozmk                        0x0000556572603505 <unavailable> + 5381

    8    libc.so.6                          0x00002b5c2a09a460 __libc_start_main +
    245

    9    tmpwpnoozmk                        0x00005565726031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824902
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            break\n        }\n        i +=\
    \ 1\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    var j\
    \ = i + 1\n    while j < arr.count - 1 {\n        if arr[j] < arr[j + 1] {\n \
    \           break\n        }\n        j += 1\n    }\n    if j == arr.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpt2w5bwyv/tmpt2w5bwyv.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2215eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2212e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2212e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2212e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2w5bwyv                        0x000055c65715a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002ba2217d6460 __libc_start_main +
    245

    6    tmpt2w5bwyv                        0x000055c65715a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824901
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return True else return False.\n\
    /// If the given array is empty then return True.\n/// Note: The given list is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var i = arr.count - 1\n    while i > 0 && arr[i\
    \ - 1] > arr[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return false\n\
    \    }\n    var j = arr.count - 1\n    while arr[j] < arr[i - 1] {\n        j\
    \ -= 1\n    }\n    arr.swapAt(i - 1, j)\n    arr[i...].reverse()\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpb5m3bjj0/tmpb5m3bjj0.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9345b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9342acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9342ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9342ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5m3bjj0                        0x000055562b64b83a <unavailable> + 6202

    5    libc.so.6                          0x00002ae9347a1460 __libc_start_main +
    245

    6    tmpb5m3bjj0                        0x000055562b64b499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824902
