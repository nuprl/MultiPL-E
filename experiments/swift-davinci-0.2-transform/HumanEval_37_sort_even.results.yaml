language: swift
name: HumanEval_37_sort_even
results:
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    var i = 0\n    while i < l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n        i += 1\n    }\n    evens.sort()\n\
    \    i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            l[i]\
    \ = odds[i / 2]\n        } else {\n            l[i] = evens[i / 2]\n        }\n\
    \        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpem3nh_jz/tmpem3nh_jz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b504e49cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b504e193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b504e193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b504e1927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem3nh_jz                        0x000055b92c0448e3 <unavailable> + 6371

    5    libc.so.6                          0x00002b504e688460 __libc_start_main +
    245

    6    tmpem3nh_jz                        0x000055b92c044339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even: [Int] = []\n\
    \    var odd: [Int] = []\n    var result: [Int] = []\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            odd.append(value)\n\
    \        } else {\n            even.append(value)\n        }\n    }\n    even.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         result.append(value)\n        } else {\n            result.append(even[index/2])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpwu2n215p/tmpwu2n215p.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b794cac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b794c7bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b794c7ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b794c7b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu2n215p                        0x000055c9eb2e39f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b794ccaf460 __libc_start_main +
    245

    6    tmpwu2n215p                        0x000055c9eb2e3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    var l_sorted = [Int]()\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(value)\n\
    \        } else {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l_even.enumerated() {\n        l_sorted.append(value)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b418edc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b418eabf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b418eabf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b418eabf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b418eabebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b418e8bee83 <unavailable> + 188035

    6    tmphr_i83_a                        0x000056140234e071 <unavailable> + 8305

    7    tmphr_i83_a                        0x000056140234d7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b418efb4460 __libc_start_main +
    245

    9    tmphr_i83_a                        0x000056140234d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n        } else\
    \ {\n            odd_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    var l_even_sorted = [Int]()\n    var l_sorted =\
    \ [Int]()\n    for (i, v) in l.enumerated() {\n        if i % 2 == 0 {\n     \
    \       l_even.append(v)\n        } else {\n            l_odd.append(v)\n    \
    \    }\n    }\n    l_even_sorted = l_even.sorted()\n    for (i, v) in l_even_sorted.enumerated()\
    \ {\n        l_sorted.append(v)\n        l_sorted.append(l_odd[i])\n    }\n  \
    \  return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5110fbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5110cb5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5110cb5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5110cb513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5110cb4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5110ab4e83 <unavailable> + 188035

    6    tmp37w3eynz                        0x00005651c5f70031 <unavailable> + 8241

    7    tmp37w3eynz                        0x00005651c5f6f734 <unavailable> + 5940

    8    libc.so.6                          0x00002b51111aa460 __libc_start_main +
    245

    9    tmp37w3eynz                        0x00005651c5f6f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n      \
    \  if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n        \
    \    evens.append(l[i])\n        }\n    }\n    evens.sort()\n    var result =\
    \ [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmprbkkejum/tmprbkkejum.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04fbd86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04fba7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04fba7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04fba7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbkkejum                        0x0000555fe2127983 <unavailable> + 6531

    5    libc.so.6                          0x00002b04fbf72460 __libc_start_main +
    245

    6    tmprbkkejum                        0x0000555fe21273d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n      \
    \  if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n        \
    \    evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<evens.count\
    \ {\n        l[2*i + 1] = evens[i]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmprbmk143a/tmprbmk143a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2752470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2752167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2752167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27521667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbmk143a                        0x0000560a936ae9d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b275265c460 __libc_start_main +
    245

    6    tmprbmk143a                        0x0000560a936ae429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n\
    \        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n  \
    \          evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i / 2])\n\
    \        } else {\n            result.append(evens[i / 2])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpi_kgq1uv/tmpi_kgq1uv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a234dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a2044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49a2044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49a20437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_kgq1uv                        0x000055d704809983 <unavailable> + 6531

    5    libc.so.6                          0x00002b49a2539460 __libc_start_main +
    245

    6    tmpi_kgq1uv                        0x000055d7048093d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for i in 0..<l.count {\n        if\
    \ i % 2 == 0 {\n            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<even.count {\n        l[i\
    \ * 2] = even[i]\n    }\n    for i in 0..<odd.count {\n        l[i * 2 + 1] =\
    \ odd[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in odds.enumerated() {\n        result.append(value)\n  \
    \      result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b560774cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5607443561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5607443286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b560744313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5607442bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5607242e83 <unavailable> + 188035

    6    tmpjtdn6slq                        0x000055e1ad602071 <unavailable> + 8305

    7    tmpjtdn6slq                        0x000055e1ad6017b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b5607938460 __libc_start_main +
    245

    9    tmpjtdn6slq                        0x000055e1ad601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  for i in stride(from: 0, to: l.count, by: 2) {\n        l_copy[i] = l[i]\n\
    \    }\n    for i in stride(from: 1, to: l.count, by: 2) {\n        l_copy[i]\
    \ = l[i]\n    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpm2vf4gwu/tmpm2vf4gwu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cff074c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cfed6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cfed6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cfed6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2vf4gwu                        0x000055884e40a883 <unavailable> + 6275

    5    libc.so.6                          0x00002b8cff260460 __libc_start_main +
    245

    6    tmpm2vf4gwu                        0x000055884e40a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    var l_sorted = [Int]()\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(value)\n\
    \        } else {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l_even.enumerated() {\n        l_sorted.append(value)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b418edc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b418eabf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b418eabf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b418eabf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b418eabebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b418e8bee83 <unavailable> + 188035

    6    tmphr_i83_a                        0x000056140234e071 <unavailable> + 8305

    7    tmphr_i83_a                        0x000056140234d7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b418efb4460 __libc_start_main +
    245

    9    tmphr_i83_a                        0x000056140234d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n     \
    \       evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in odds.enumerated() {\n        result.append(value)\n  \
    \      result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b560774cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5607443561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5607443286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b560744313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5607442bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5607242e83 <unavailable> + 188035

    6    tmpjtdn6slq                        0x000055e1ad602071 <unavailable> + 8305

    7    tmpjtdn6slq                        0x000055e1ad6017b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b5607938460 __libc_start_main +
    245

    9    tmpjtdn6slq                        0x000055e1ad601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n\
    \            continue\n        }\n        var j = i\n        while j < l.count\
    \ {\n            if l[j] < l[i] {\n                l.swapAt(i, j)\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpwkwjoaq3/tmpwkwjoaq3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb1a87dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb1a574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb1a574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb1a5737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkwjoaq3                        0x00005600026d7753 <unavailable> + 5971

    5    libc.so.6                          0x00002acb1aa69460 __libc_start_main +
    245

    6    tmpwkwjoaq3                        0x00005600026d71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            l_even.append(l[i])\n        } else {\n            l_odd.append(l[i])\n\
    \        }\n    }\n    l_even.sort()\n    var l_new = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l_new.append(l_even[i/2])\n        }\
    \ else {\n            l_new.append(l_odd[i/2])\n        }\n    }\n    return l_new\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i+1..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                l.swapAt(even_indicies[i], even_indicies[j])\n\
    \            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies =\
    \ [Int]()\n    var odd_indicies = [Int]()\n    var sorted_even_indicies = [Int]()\n\
    \    var sorted_list = [Int]()\n    \n    for i in 0..<l.count {\n        if i\
    \ % 2 == 0 {\n            odd_indicies.append(l[i])\n        } else {\n      \
    \      even_indicies.append(l[i])\n        }\n    }\n    \n    sorted_even_indicies\
    \ = even_indicies.sorted()\n    \n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            sorted_list.append(odd_indicies[i/2])\n        } else {\n\
    \            sorted_list.append(sorted_even_indicies[i/2])\n        }\n    }\n\
    \    \n    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpc7wgcz8m/tmpc7wgcz8m.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ac3e9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ac3b96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ac3b96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ac3b957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7wgcz8m                        0x00005651415c7903 <unavailable> + 6403

    5    libc.so.6                          0x00002b4ac408b460 __libc_start_main +
    245

    6    tmpc7wgcz8m                        0x00005651415c7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies:\
    \ [Int] = []\n    var odd_indicies: [Int] = []\n    var sorted_even_indicies:\
    \ [Int] = []\n    var new_list: [Int] = []\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odd_indicies.append(value)\n   \
    \     } else {\n            even_indicies.append(value)\n        }\n    }\n  \
    \  sorted_even_indicies = even_indicies.sorted()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            new_list.append(value)\n       \
    \ } else {\n            new_list.append(sorted_even_indicies[0])\n           \
    \ sorted_even_indicies.remove(at: 0)\n        }\n    }\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpfzyh0ouh/tmpfzyh0ouh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ab8ab7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ab87aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ab87ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ab87ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzyh0ouh                        0x00005622a0c989c3 <unavailable> + 6595

    5    libc.so.6                          0x00002b9ab8ca3460 __libc_start_main +
    245

    6    tmpfzyh0ouh                        0x00005622a0c98419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    // TODO: Implement\
    \ this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp76k3fd7a/tmp76k3fd7a.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0d5fe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0d5cdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0d5cda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0d5cd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76k3fd7a                        0x000055fb537b13c4 <unavailable> + 5060

    5    libc.so.6                          0x00002af0d61cf460 __libc_start_main +
    245

    6    tmp76k3fd7a                        0x000055fb537b0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for i in 0..<l.count {\n        if\
    \ i % 2 == 0 {\n            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<even.count {\n        l[2*i]\
    \ = even[i]\n    }\n    for i in 0..<odd.count {\n        l[2*i+1] = odd[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    let\
    \ even_indicies = l.indices.filter { $0 % 2 == 0 }\n    for i in even_indicies\
    \ {\n        l[i] = l[i...].sorted()[0]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp8gtop9zu/tmp8gtop9zu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1164a60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1164757b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1164757988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11647567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gtop9zu                        0x0000560e474f1c63 <unavailable> + 7267

    5    libc.so.6                          0x00002b1164c4c460 __libc_start_main +
    245

    6    tmp8gtop9zu                        0x0000560e474f16b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    var even_values: [Int] = []\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n          \
    \  even_values.append(l[i])\n        }\n    }\n    even_values.sort()\n    for\
    \ i in 0..<even_indicies.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1ah5h7qy/tmp1ah5h7qy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14f7815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14f750cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14f750c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14f750b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ah5h7qy                        0x00005580c58dda43 <unavailable> + 6723

    5    libc.so.6                          0x00002b14f7a01460 __libc_start_main +
    245

    6    tmp1ah5h7qy                        0x00005580c58dd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    var l_sorted = [Int]()\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            l_even.append(value)\n\
    \        } else {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n\
    \    for (index, value) in l_even.enumerated() {\n        l_sorted.append(value)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b418edc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b418eabf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b418eabf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b418eabf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b418eabebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b418e8bee83 <unavailable> + 188035

    6    tmphr_i83_a                        0x000056140234e071 <unavailable> + 8305

    7    tmphr_i83_a                        0x000056140234d7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b418efb4460 __libc_start_main +
    245

    9    tmphr_i83_a                        0x000056140234d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    var sorted_evens = [Int]()\n  \
    \  var sorted_l = [Int]()\n    \n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    \n    sorted_evens = evens.sorted()\n    \n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            sorted_l.append(odds[i/2])\n\
    \        } else {\n            sorted_l.append(sorted_evens[i/2])\n        }\n\
    \    }\n    \n    return sorted_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpw8gtmb_5/tmpw8gtmb_5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b2abdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b27b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b27b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b27b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8gtmb_5                        0x000055ac9de3e903 <unavailable> + 6403

    5    libc.so.6                          0x00002b23b2ca9460 __libc_start_main +
    245

    6    tmpw8gtmb_5                        0x000055ac9de3e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    var\
    \ evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n     \
    \       evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            l2[i] = evens[i/2]\n        }\n    }\n\
    \    return l2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n\
    \            continue\n        }\n        let sub = l[i-1...i]\n        l[i-1]\
    \ = sub.min()!\n        l[i] = sub.max()!\n        i += 1\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpiedvjs5_/tmpiedvjs5_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bc1512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bc1209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bc1209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bc12087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiedvjs5_                        0x0000560459fe5943 <unavailable> + 6467

    5    libc.so.6                          0x00002b0bc16fe460 __libc_start_main +
    245

    6    tmpiedvjs5_                        0x0000560459fe5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                l.swapAt(even_indicies[i], even_indicies[j])\n\
    \            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies =\
    \ [Int]()\n    var odd_indicies = [Int]()\n    var even_indicies_sorted = [Int]()\n\
    \    var l_sorted = [Int]()\n    \n    for (index, value) in l.enumerated() {\n\
    \        if index % 2 == 0 {\n            odd_indicies.append(value)\n       \
    \ } else {\n            even_indicies.append(value)\n        }\n    }\n    \n\
    \    even_indicies_sorted = even_indicies.sorted()\n    \n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            l_sorted.append(value)\n\
    \        } else {\n            l_sorted.append(even_indicies_sorted[index/2])\n\
    \        }\n    }\n    \n    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpxcjxb13t/tmpxcjxb13t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a537bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a5072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a5072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a50717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcjxb13t                        0x0000556cb5e039c3 <unavailable> + 6595

    5    libc.so.6                          0x00002b35a5567460 __libc_start_main +
    245

    6    tmpxcjxb13t                        0x0000556cb5e03419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var sorted = [Int]()\n    for (i, n) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(n)\n        } else {\n \
    \           evens.append(n)\n        }\n    }\n    evens.sort()\n    for (i, n)\
    \ in odds.enumerated() {\n        sorted.append(n)\n        sorted.append(evens[i])\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab799944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab79963b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab79963b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab79963b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab79963abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab79943ae83 <unavailable> + 188035

    6    tmpqibybp11                        0x0000563cf36c5071 <unavailable> + 8305

    7    tmpqibybp11                        0x0000563cf36c47b4 <unavailable> + 6068

    8    libc.so.6                          0x00002ab799b30460 __libc_start_main +
    245

    9    tmpqibybp11                        0x0000563cf36c4499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    var even_values: [Int] = []\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n          \
    \  even_values.append(l[i])\n        }\n    }\n    even_values.sort()\n    for\
    \ i in 0..<even_indicies.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    var sorted_evens = [Int]()\n  \
    \  var sorted_l = [Int]()\n    \n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            odds.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    \n    sorted_evens = evens.sorted()\n    \n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            sorted_l.append(odds[i/2])\n\
    \        } else {\n            sorted_l.append(sorted_evens[i/2])\n        }\n\
    \    }\n    \n    return sorted_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpw8gtmb_5/tmpw8gtmb_5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b2abdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b27b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b27b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b27b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8gtmb_5                        0x000055ac9de3e903 <unavailable> + 6403

    5    libc.so.6                          0x00002b23b2ca9460 __libc_start_main +
    245

    6    tmpw8gtmb_5                        0x000055ac9de3e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for (i, n) in l.enumerated() {\n        if i % 2 == 0 {\n\
    \            evens.append(n)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ n) in l.enumerated() {\n        if i % 2 == 0 {\n            l[i] = evens.removeFirst()\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens: [Int] = []\n    for i in stride(from: 0, to: l.count, by: 2) {\n    \
    \    evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0,\
    \ to: l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens: [Int] = []\n    var odds: [Int] = []\n    for (i, n) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(n)\n        } else {\n \
    \           evens.append(n)\n        }\n    }\n    evens.sort()\n    for (i, n)\
    \ in evens.enumerated() {\n        l[i * 2 + 1] = n\n    }\n    return l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpu0capw8z/tmpu0capw8z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b024f282c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b024ef79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b024ef79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b024ef787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0capw8z                        0x0000562d281149f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b024f46e460 __libc_start_main +
    245

    6    tmpu0capw8z                        0x0000562d28114449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    var even_values = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n          \
    \  even_values.append(l[i])\n        }\n    }\n    even_values.sort()\n    for\
    \ i in 0..<even_indicies.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (i, n) in l.enumerated() {\n\
    \        if i % 2 == 0 {\n            odds.append(n)\n        } else {\n     \
    \       evens.append(n)\n        }\n    }\n    evens.sort()\n    for (i, n) in\
    \ evens.enumerated() {\n        l[i * 2 + 1] = n\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpdnzr4hiv/tmpdnzr4hiv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba84338ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba843081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba843081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8430807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnzr4hiv                        0x0000559dc1895a43 <unavailable> + 6723

    5    libc.so.6                          0x00002ba843576460 __libc_start_main +
    245

    6    tmpdnzr4hiv                        0x0000559dc1895499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  var evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            result[i] = evens[i/2]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  for i in stride(from: 0, to: l.count, by: 2) {\n        if i + 1 < l.count\
    \ {\n            if l[i] > l[i + 1] {\n                result[i] = l[i + 1]\n\
    \                result[i + 1] = l[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp4j2s5nkm/tmp4j2s5nkm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade1c238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade1bf2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade1bf2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade1bf2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j2s5nkm                        0x000055e3ab635883 <unavailable> + 6275

    5    libc.so.6                          0x00002ade1c424460 __libc_start_main +
    245

    6    tmp4j2s5nkm                        0x000055e3ab6352d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n      \
    \  if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n        \
    \    evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<evens.count\
    \ {\n        l[2*i+1] = evens[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkdwxfs4t/tmpkdwxfs4t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae01ce8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae01cb82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae01cb82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae01cb817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkdwxfs4t                        0x0000562c3198a9d3 <unavailable> + 6611

    5    libc.so.6                          0x00002ae01d077460 __libc_start_main +
    245

    6    tmpkdwxfs4t                        0x0000562c3198a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, element) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(element)\n\
    \        } else {\n            evens.append(element)\n        }\n    }\n    evens.sort()\n\
    \    for (index, element) in odds.enumerated() {\n        result.append(element)\n\
    \        result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aecf0782c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecf0479561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecf0479286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecf047913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecf0478bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aecf0278e83 <unavailable> + 188035

    6    tmpy5t1cy3h                        0x0000562f562f2071 <unavailable> + 8305

    7    tmpy5t1cy3h                        0x0000562f562f17b4 <unavailable> + 6068

    8    libc.so.6                          0x00002aecf096e460 __libc_start_main +
    245

    9    tmpy5t1cy3h                        0x0000562f562f1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n\
    \            continue\n        }\n        let sub = l[i-1...i]\n        l[i-1]\
    \ = sub.min()!\n        l[i] = sub.max()!\n        i += 1\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpiedvjs5_/tmpiedvjs5_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bc1512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bc1209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bc1209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bc12087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiedvjs5_                        0x0000560459fe5943 <unavailable> + 6467

    5    libc.so.6                          0x00002b0bc16fe460 __libc_start_main +
    245

    6    tmpiedvjs5_                        0x0000560459fe5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var l_prime = [Int]()\n    for (index, value) in\
    \ l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(value)\n\
    \        } else {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n   \
    \         l_prime.append(value)\n        } else {\n            l_prime.append(evens.removeFirst())\n\
    \        }\n    }\n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_65dte9n/tmp_65dte9n.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefcdeb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefcdbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefcdbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefcdbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_65dte9n                        0x000055761f2f4a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aefce0a5460 __libc_start_main +
    245

    6    tmp_65dte9n                        0x000055761f2f44e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                l.swapAt(even_indicies[i], even_indicies[j])\n\
    \            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for i in 0..<l.count {\n        if\
    \ i % 2 == 0 {\n            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    even.sort()\n    for i in 0..<even.count {\n        l[2*i]\
    \ = even[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens: [Int] = []\n    var odds: [Int] = []\n    for i in 0..<l.count {\n  \
    \      if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n    \
    \        evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<evens.count {\n        odds.insert(evens[i], at: i*2 + 1)\n    }\n    return\
    \ odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1kg6379g/tmp1kg6379g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedc52fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedc4ff3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedc4ff3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedc4ff27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kg6379g                        0x00005649c0257983 <unavailable> + 6531

    5    libc.so.6                          0x00002aedc54e8460 __libc_start_main +
    245

    6    tmp1kg6379g                        0x00005649c02573d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for i in 0..<l.count {\n      \
    \  if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n        \
    \    evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in 0..<evens.count\
    \ {\n        l[2*i+1] = evens[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkdwxfs4t/tmpkdwxfs4t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae01ce8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae01cb82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae01cb82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae01cb817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkdwxfs4t                        0x0000562c3198a9d3 <unavailable> + 6611

    5    libc.so.6                          0x00002ae01d077460 __libc_start_main +
    245

    6    tmpkdwxfs4t                        0x0000562c3198a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = l.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }\n    l_even.sort()\n    var l_odd\
    \ = l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element }\n    return\
    \ zip(l_even, l_odd).flatMap { [$0.0, $0.1] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp6yxrd989/tmp6yxrd989.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dd13bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dd10b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dd10b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dd10b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yxrd989                        0x000055886af95864 <unavailable> + 6244

    5    libc.so.6                          0x00002b2dd15a6460 __libc_start_main +
    245

    6    tmp6yxrd989                        0x000055886af95469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indices = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indices.append(i)\n        }\n    }\n    for i in even_indices\
    \ {\n        for j in i..<l.count {\n            if l[j] < l[i] {\n          \
    \      l.swapAt(i, j)\n            }\n        }\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp98qssnut/tmp98qssnut.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8a8549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8a8240b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8a8240988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8a823f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98qssnut                        0x000055980c3f8a63 <unavailable> + 6755

    5    libc.so.6                          0x00002ac8a8735460 __libc_start_main +
    245

    6    tmp98qssnut                        0x000055980c3f84b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for i in 0..<l.count {\n\
    \        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n  \
    \          evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            result.append(odds[i/2])\n\
    \        } else {\n            result.append(evens[i/2])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpg_3cd252/tmpg_3cd252.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b312fd65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b312fa5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b312fa5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b312fa5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_3cd252                        0x000055a0e71f6983 <unavailable> + 6531

    5    libc.so.6                          0x00002b312ff51460 __libc_start_main +
    245

    6    tmpg_3cd252                        0x000055a0e71f63d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var l_sorted = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            l_sorted.append(odds[i/2])\n\
    \        } else {\n            l_sorted.append(evens[i/2])\n        }\n    }\n\
    \    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpnt7zjb0r/tmpnt7zjb0r.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82e4b4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82e4841b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82e4841988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82e48407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnt7zjb0r                        0x000055ab5fe5d983 <unavailable> + 6531

    5    libc.so.6                          0x00002b82e4d36460 __libc_start_main +
    245

    6    tmpnt7zjb0r                        0x000055ab5fe5d3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n   \
    \         evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            l[i] = evens[i/2]\n    \
    \    }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    var even_values =\
    \ [Int]()\n    for i in even_indicies {\n        even_values.append(l[i])\n  \
    \  }\n    even_values.sort()\n    for i in 0..<even_values.count {\n        l[even_indicies[i]]\
    \ = even_values[i]\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            even.append(value)\n        } else\
    \ {\n            odd.append(value)\n        }\n    }\n    even.sort()\n    for\
    \ (index, value) in even.enumerated() {\n        l[index * 2] = value\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    var l_even_sorted = [Int]()\n    var l_sorted =\
    \ [Int]()\n    var i = 0\n    for x in l {\n        if i % 2 == 0 {\n        \
    \    l_even.append(x)\n        } else {\n            l_odd.append(x)\n       \
    \ }\n        i += 1\n    }\n    l_even_sorted = l_even.sorted()\n    i = 0\n \
    \   for x in l_even_sorted {\n        l_sorted.append(x)\n        l_sorted.append(l_odd[i])\n\
    \        i += 1\n    }\n    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3447209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3446f00561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3446f00286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3446f0013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3446effbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3446cffe83 <unavailable> + 188035

    6    tmpv7_q4_ns                        0x000055f3549ecee9 <unavailable> + 7913

    7    tmpv7_q4_ns                        0x000055f3549ec694 <unavailable> + 5780

    8    libc.so.6                          0x00002b34473f5460 __libc_start_main +
    245

    9    tmpv7_q4_ns                        0x000055f3549ec379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (i, num) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(num)\n        } else {\n\
    \            evens.append(num)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ num) in l.enumerated() {\n        if i % 2 == 0 {\n            result.append(num)\n\
    \        } else {\n            result.append(evens.removeFirst())\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj2m2zg_u/tmpj2m2zg_u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa2f609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa2f300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa2f300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa2f2ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2m2zg_u                        0x000055655f825a93 <unavailable> + 6803

    5    libc.so.6                          0x00002baa2f7f5460 __libc_start_main +
    245

    6    tmpj2m2zg_u                        0x000055655f8254e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (i, num) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(num)\n        } else {\n\
    \            evens.append(num)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ num) in evens.enumerated() {\n        l[i * 2 + 1] = num\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkz8kscuk/tmpkz8kscuk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae764061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae763d58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae763d58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae763d577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkz8kscuk                        0x000055b35bfe8a43 <unavailable> + 6723

    5    libc.so.6                          0x00002ae76424d460 __libc_start_main +
    245

    6    tmpkz8kscuk                        0x000055b35bfe8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in odds.enumerated() {\n        result.append(value)\n  \
    \      result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b560774cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5607443561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5607443286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b560744313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5607442bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5607242e83 <unavailable> + 188035

    6    tmpjtdn6slq                        0x000055e1ad602071 <unavailable> + 8305

    7    tmpjtdn6slq                        0x000055e1ad6017b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b5607938460 __libc_start_main +
    245

    9    tmpjtdn6slq                        0x000055e1ad601499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n        } else\
    \ {\n            odd_indicies.append(i)\n        }\n    }\n    var even_values\
    \ = [Int]()\n    for i in even_indicies {\n        even_values.append(l[i])\n\
    \    }\n    even_values.sort()\n    for i in 0..<even_indicies.count {\n     \
    \   l[even_indicies[i]] = even_values[i]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        var j = i + 1\n        while j < l.count {\n            if l[j] <\
    \ l[i] {\n                let temp = l[i]\n                l[i] = l[j]\n     \
    \           l[j] = temp\n            }\n            j += 1\n        }\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpge6uxp9w/tmpge6uxp9w.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec5ee89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec5eb80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec5eb80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec5eb7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge6uxp9w                        0x0000562381667a13 <unavailable> + 6675

    5    libc.so.6                          0x00002aec5f075460 __libc_start_main +
    245

    6    tmpge6uxp9w                        0x0000562381667469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in l.enumerated() {\n        if index % 2 == 0 {\n      \
    \      result.append(value)\n        } else {\n            result.append(evens.removeFirst())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx40wsgn4/tmpx40wsgn4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd728cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd6f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd6f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd6f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40wsgn4                        0x000055e7c2ac2a93 <unavailable> + 6803

    5    libc.so.6                          0x00002aadd7478460 __libc_start_main +
    245

    6    tmpx40wsgn4                        0x000055e7c2ac24e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even = [Int]()\n\
    \    var l_odd = [Int]()\n    for (index, value) in l.enumerated() {\n       \
    \ if index % 2 == 0 {\n            l_even.append(value)\n        } else {\n  \
    \          l_odd.append(value)\n        }\n    }\n    l_even.sort()\n    var l_sorted\
    \ = [Int]()\n    for (index, value) in l_even.enumerated() {\n        l_sorted.append(value)\n\
    \        l_sorted.append(l_odd[index])\n    }\n    return l_sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cb967fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cb9376561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8cb9376286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8cb937613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8cb9375bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8cb9175e83 <unavailable> + 188035

    6    tmp2yfahyz_                        0x0000562c63be0071 <unavailable> + 8305

    7    tmp2yfahyz_                        0x0000562c63bdf7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b8cb986b460 __libc_start_main +
    245

    9    tmp2yfahyz_                        0x0000562c63bdf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l2 = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l2[i] = l[i]\n    }\n  \
    \  for i in stride(from: 1, to: l.count, by: 2) {\n        l2[i] = l[i]\n    }\n\
    \    return l2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp4drn6_2i/tmp4drn6_2i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae680d7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae680a75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae680a75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae680a747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4drn6_2i                        0x00005627ce7e4883 <unavailable> + 6275

    5    libc.so.6                          0x00002ae680f6a460 __libc_start_main +
    245

    6    tmp4drn6_2i                        0x00005627ce7e42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indicies.append(i)\n        }\n    }\n    var even_values:\
    \ [Int] = []\n    for i in even_indicies {\n        even_values.append(l[i])\n\
    \    }\n    even_values.sort()\n    for i in 0..<even_values.count {\n       \
    \ l[even_indicies[i]] = even_values[i]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                l.swapAt(even_indicies[j], even_indicies[j\
    \ + 1])\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    var result = [Int]()\n    for (index,\
    \ value) in l.enumerated() {\n        if index % 2 == 0 {\n            even.append(value)\n\
    \        } else {\n            odd.append(value)\n        }\n    }\n    even.sort()\n\
    \    for (index, value) in even.enumerated() {\n        result.append(value)\n\
    \        result.append(odd[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b674a448c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b674a13f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b674a13f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b674a13f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b674a13ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6749f3ee83 <unavailable> + 188035

    6    tmpq9ho2zpm                        0x000055d2af8050a6 <unavailable> + 8358

    7    tmpq9ho2zpm                        0x000055d2af8047b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b674a634460 __libc_start_main +
    245

    9    tmpq9ho2zpm                        0x000055d2af804499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (i, num) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(num)\n        } else {\n\
    \            evens.append(num)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ num) in evens.enumerated() {\n        l[i * 2 + 1] = num\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpkz8kscuk/tmpkz8kscuk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae764061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae763d58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae763d58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae763d577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkz8kscuk                        0x000055b35bfe8a43 <unavailable> + 6723

    5    libc.so.6                          0x00002ae76424d460 __libc_start_main +
    245

    6    tmpkz8kscuk                        0x000055b35bfe8499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens = [Int]()\n\
    \    var odds = [Int]()\n    var result = [Int]()\n    for (i, num) in l.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odds.append(num)\n        } else {\n\
    \            evens.append(num)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ num) in l.enumerated() {\n        if i % 2 == 0 {\n            result.append(num)\n\
    \        } else {\n            result.append(evens.removeFirst())\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpj2m2zg_u/tmpj2m2zg_u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa2f609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa2f300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa2f300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa2f2ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2m2zg_u                        0x000055655f825a93 <unavailable> + 6803

    5    libc.so.6                          0x00002baa2f7f5460 __libc_start_main +
    245

    6    tmpj2m2zg_u                        0x000055655f8254e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (i, v) in l.enumerated() {\n\
    \        if i % 2 == 0 {\n            odds.append(v)\n        } else {\n     \
    \       evens.append(v)\n        }\n    }\n    evens.sort()\n    for (i, v) in\
    \ evens.enumerated() {\n        l[i * 2 + 1] = v\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpc8u_mvy4/tmpc8u_mvy4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a406bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a403b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a403b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a403b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8u_mvy4                        0x0000564206cfca43 <unavailable> + 6723

    5    libc.so.6                          0x00002b8a408a7460 __libc_start_main +
    245

    6    tmpc8u_mvy4                        0x0000564206cfc499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var new_list = l\n\
    \    var even_list = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2)\
    \ {\n        even_list.append(l[i])\n    }\n    even_list.sort()\n    for i in\
    \ stride(from: 0, to: l.count, by: 2) {\n        new_list[i] = even_list[i/2]\n\
    \    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var evens: [Int] =\
    \ []\n    var odds: [Int] = []\n    var result: [Int] = []\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            odds.append(value)\n\
    \        } else {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n\
    \    for (index, value) in odds.enumerated() {\n        result.append(value)\n\
    \        result.append(evens[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002addc0d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc0a8a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002addc0a8a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002addc0a8a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002addc0a89bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002addc0889e83 <unavailable> + 188035

    6    tmpizsn79ql                        0x00005557d45bf042 <unavailable> + 8258

    7    tmpizsn79ql                        0x00005557d45be764 <unavailable> + 5988

    8    libc.so.6                          0x00002addc0f7f460 __libc_start_main +
    245

    9    tmpizsn79ql                        0x00005557d45be449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for (i, v) in l.enumerated() {\n\
    \        if i % 2 == 0 {\n            even.append(v)\n        } else {\n     \
    \       odd.append(v)\n        }\n    }\n    even.sort()\n    for (i, v) in even.enumerated()\
    \ {\n        l[i * 2] = v\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indices: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indices.append(i)\n        }\n    }\n    for i in 0..<even_indices.count\
    \ {\n        for j in 0..<even_indices.count - 1 {\n            if l[even_indices[j]]\
    \ > l[even_indices[j + 1]] {\n                let temp = l[even_indices[j]]\n\
    \                l[even_indices[j]] = l[even_indices[j + 1]]\n               \
    \ l[even_indices[j + 1]] = temp\n            }\n        }\n    }\n    return l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even_indicies.append(i)\n        }\n    }\n    for i in\
    \ even_indicies {\n        l_copy[i] = l[i].sorted()\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpnfyub4h7.swift:18:26: error: value of type 'Int' has no member\
    \ 'sorted'\n        l_copy[i] = l[i].sorted()\n                    ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var even_indicies: [Int] = []\n    var even_values: [Int] = []\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n\
    \            even_values.append(l[i])\n        }\n    }\n    even_values.sort()\n\
    \    for i in 0..<even_indicies.count {\n        l_copy[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        if i + 1 < l.count {\n \
    \           if l[i] > l[i + 1] {\n                l.swapAt(i, i + 1)\n       \
    \     }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2rqcqzo3/tmp2rqcqzo3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df237fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df2076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df2076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df20757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rqcqzo3                        0x0000557f0cb9d8d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b5df256b460 __libc_start_main +
    245

    6    tmp2rqcqzo3                        0x0000557f0cb9d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            i += 1\n\
    \            continue\n        }\n        var j = i + 1\n        while j < l.count\
    \ {\n            if l[j] < l[i] {\n                l.swapAt(i, j)\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return l\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpwdemm25v/tmpwdemm25v.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7611dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7611accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7611acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7611acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdemm25v                        0x0000555a00653753 <unavailable> + 5971

    5    libc.so.6                          0x00002b7611fc1460 __libc_start_main +
    245

    6    tmpwdemm25v                        0x0000555a006531a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_list = [Int]()\n\
    \    var odd_list = [Int]()\n    var sorted_list = [Int]()\n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            even_list.append(value)\n\
    \        } else {\n            odd_list.append(value)\n        }\n    }\n    even_list.sort()\n\
    \    for (index, value) in even_list.enumerated() {\n        sorted_list.append(value)\n\
    \        sorted_list.append(odd_list[index])\n    }\n    return sorted_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bded6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bdea65561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3bdea65286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3bdea6513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3bdea64bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3bde864e83 <unavailable> + 188035

    6    tmpkzpc474w                        0x000055f52a8d0071 <unavailable> + 8305

    7    tmpkzpc474w                        0x000055f52a8cf7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b3bdef5a460 __libc_start_main +
    245

    9    tmpkzpc474w                        0x000055f52a8cf499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for (i, v) in l.enumerated() {\n        if i % 2 == 0 {\n\
    \            evens.append(v)\n        }\n    }\n    evens.sort()\n    for (i,\
    \ v) in l.enumerated() {\n        if i % 2 == 0 {\n            l[i] = evens.removeFirst()\n\
    \        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    let\
    \ even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }\n   \
    \ let odd = l.enumerated().filter { $0.offset % 2 == 1 }.map { $0.element }\n\
    \    even.sort()\n    for (i, e) in even.enumerated() {\n        l[i*2] = e\n\
    \    }\n    for (i, o) in odd.enumerated() {\n        l[i*2+1] = o\n    }\n  \
    \  return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpdfyctev1.swift:13:10: error: cannot use mutating member on immutable\
    \ value: 'even' is a 'let' constant\n    even.sort()\n    ~~~~ ^\n/tmp/tmpdfyctev1.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let even = l.enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ []\n    var evens: [Int] = []\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            result.append(l[i])\n        } else {\n            evens.append(l[i])\n\
    \        }\n    }\n    evens.sort()\n    for i in 0..<evens.count {\n        result.insert(evens[i],\
    \ at: i * 2 + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpqsmow_43/tmpqsmow_43.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f5339c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f5030b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f5030988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f502f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsmow_43                        0x00005615beb6f983 <unavailable> + 6531

    5    libc.so.6                          0x00002ba7f5525460 __libc_start_main +
    245

    6    tmpqsmow_43                        0x00005615beb6f3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even: [Int] =\
    \ []\n    var l_odd: [Int] = []\n    for (index, value) in l.enumerated() {\n\
    \        if index % 2 == 0 {\n            l_even.append(value)\n        } else\
    \ {\n            l_odd.append(value)\n        }\n    }\n    l_even.sort()\n  \
    \  var l_sorted: [Int] = []\n    for (index, value) in l_even.enumerated() {\n\
    \        l_sorted.append(value)\n        l_sorted.append(l_odd[index])\n    }\n\
    \    return l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5dee63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5deb5a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad5deb5a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad5deb5a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad5deb59bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad5de959e83 <unavailable> + 188035

    6    tmpkmljwd0v                        0x000055d655d19042 <unavailable> + 8258

    7    tmpkmljwd0v                        0x000055d655d18764 <unavailable> + 5988

    8    libc.so.6                          0x00002ad5df04f460 __libc_start_main +
    245

    9    tmpkmljwd0v                        0x000055d655d18449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result = l\n  \
    \  var evens = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            evens.append(l[i])\n        }\n    }\n    evens.sort()\n    for i\
    \ in 0..<l.count {\n        if i % 2 == 0 {\n            result[i] = evens[i/2]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even_indicies.append(i)\n        }\n    }\n    for i in\
    \ even_indicies {\n        l_copy[i] = l[i].sorted()\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpnfyub4h7.swift:18:26: error: value of type 'Int' has no member\
    \ 'sorted'\n        l_copy[i] = l[i].sorted()\n                    ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in i+1..<even_indicies.count {\n            if l[even_indicies[i]]\
    \ > l[even_indicies[j]] {\n                let temp = l[even_indicies[i]]\n  \
    \              l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]]\
    \ = temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i..<i+2] = l[i..<i+2].sorted()\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpo7qifw8g.swift:12:33: error: cannot assign value of type '[Int]'\
    \ to subscript of type 'ArraySlice<Int>'\n        l[i..<i+2] = l[i..<i+2].sorted()\n\
    \                     ~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    var i = 0\n    while i < l.count\
    \ {\n        if i % 2 == 0 {\n            odds.append(l[i])\n        } else {\n\
    \            evens.append(l[i])\n        }\n        i += 1\n    }\n    evens.sort()\n\
    \    i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            l[i]\
    \ = odds[i / 2]\n        } else {\n            l[i] = evens[i / 2]\n        }\n\
    \        i += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpem3nh_jz/tmpem3nh_jz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b504e49cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b504e193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b504e193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b504e1927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem3nh_jz                        0x000055b92c0448e3 <unavailable> + 6371

    5    libc.so.6                          0x00002b504e688460 __libc_start_main +
    245

    6    tmpem3nh_jz                        0x000055b92c044339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2 == 0\
    \ {\n            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indices = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indices.append(i)\n        }\n    }\n    var even_values = [Int]()\n\
    \    for i in even_indices {\n        even_values.append(l[i])\n    }\n    even_values.sort()\n\
    \    for i in 0..<even_values.count {\n        l[even_indices[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        l[i] = l[i].sorted()\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpxkfamp7i.swift:18:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n        } else\
    \ {\n            odd_indicies.append(i)\n        }\n    }\n    var even_values\
    \ = [Int]()\n    for i in even_indicies {\n        even_values.append(l[i])\n\
    \    }\n    even_values.sort()\n    for i in 0..<even_indicies.count {\n     \
    \   l[even_indicies[i]] = even_values[i]\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_even: [Int] =\
    \ []\n    var l_odd: [Int] = []\n    var l_sorted: [Int] = []\n    var i: Int\
    \ = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            l_odd.append(l[i])\n\
    \        } else {\n            l_even.append(l[i])\n        }\n        i += 1\n\
    \    }\n    l_even.sort()\n    i = 0\n    while i < l.count {\n        if i %\
    \ 2 == 0 {\n            l_sorted.append(l_odd[i/2])\n        } else {\n      \
    \      l_sorted.append(l_even[i/2])\n        }\n        i += 1\n    }\n    return\
    \ l_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp42kznl4n/tmp42kznl4n.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b88e0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b88b04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b88b04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b88b037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42kznl4n                        0x0000562183bc9833 <unavailable> + 6195

    5    libc.so.6                          0x00002b7b88ff9460 __libc_start_main +
    245

    6    tmp42kznl4n                        0x0000562183bc9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            even.append(value)\n        } else\
    \ {\n            odd.append(value)\n        }\n    }\n    even.sort()\n    for\
    \ (index, value) in even.enumerated() {\n        l[index * 2] = value\n    }\n\
    \    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_copy = l\n  \
    \  var even_indicies: [Int] = []\n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            even_indicies.append(i)\n        }\n    }\n    for i in\
    \ even_indicies {\n        l_copy[i] = l[i].sorted()\n    }\n    return l_copy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpnfyub4h7.swift:18:26: error: value of type 'Int' has no member\
    \ 'sorted'\n        l_copy[i] = l[i].sorted()\n                    ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies: [Int] = []\n    var even_values: [Int] = []\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n          \
    \  even_values.append(l[i])\n        }\n    }\n    even_values.sort()\n    for\
    \ i in 0..<even_indicies.count {\n        l[even_indicies[i]] = even_values[i]\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even_indicies.append(i)\n        }\n    }\n    for i in 0..<even_indicies.count\
    \ {\n        for j in 0..<even_indicies.count - 1 {\n            if l[even_indicies[j]]\
    \ > l[even_indicies[j + 1]] {\n                let temp = l[even_indicies[j]]\n\
    \                l[even_indicies[j]] = l[even_indicies[j + 1]]\n             \
    \   l[even_indicies[j + 1]] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1,\
    \ 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2,\
    \ 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    var odds = [Int]()\n    for (index, value) in l.enumerated()\
    \ {\n        if index % 2 == 0 {\n            odds.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        l[index * 2 + 1] = value\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1ah5h7qy/tmp1ah5h7qy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14f7815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14f750cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14f750c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14f750b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ah5h7qy                        0x00005580c58dda43 <unavailable> + 6723

    5    libc.so.6                          0x00002b14f7a01460 __libc_start_main +
    245

    6    tmp1ah5h7qy                        0x00005580c58dd499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: 0, to: l.count, by: 2) {\n        l[i] = l[i].sorted()\n \
    \   }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfmdm7obx.swift:12:21: error: value of type 'Int' has no member\
    \ 'sorted'\n        l[i] = l[i].sorted()\n               ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i / 2]\n    }\n    return l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ i = 0\n    while i < l.count {\n        if i % 2 == 0 {\n            l[i] =\
    \ l[i]\n        } else {\n            l[i] = l[i]\n            var j = i\n   \
    \         while j > 0 && l[j - 1] > l[j] {\n                l.swapAt(j - 1, j)\n\
    \                j -= 1\n            }\n        }\n        i += 1\n    }\n   \
    \ return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp2hevw7h6/tmp2hevw7h6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a0d144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a0ce3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a0ce3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a0ce3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hevw7h6                        0x000055d1f8df07b3 <unavailable> + 6067

    5    libc.so.6                          0x00002b2a0d330460 __libc_start_main +
    245

    6    tmp2hevw7h6                        0x000055d1f8df0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even_indicies = [Int]()\n    var odd_indicies = [Int]()\n    for i in 0..<l.count\
    \ {\n        if i % 2 == 0 {\n            even_indicies.append(i)\n        } else\
    \ {\n            odd_indicies.append(i)\n        }\n    }\n    for i in even_indicies\
    \ {\n        for j in even_indicies {\n            if l[i] < l[j] {\n        \
    \        let temp = l[i]\n                l[i] = l[j]\n                l[j] =\
    \ temp\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ even = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n       \
    \ even.append(l[i])\n    }\n    even.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = even[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ evens = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n      \
    \  evens.append(l[i])\n    }\n    evens.sort()\n    for i in stride(from: 0, to:\
    \ l.count, by: 2) {\n        l[i] = evens[i/2]\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824745
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies =\
    \ [Int]()\n    var odd_indicies = [Int]()\n    var even_indicies_sorted = [Int]()\n\
    \    var l_prime = [Int]()\n    \n    for (index, value) in l.enumerated() {\n\
    \        if index % 2 == 0 {\n            odd_indicies.append(value)\n       \
    \ } else {\n            even_indicies.append(value)\n        }\n    }\n    \n\
    \    even_indicies_sorted = even_indicies.sorted()\n    \n    for (index, value)\
    \ in l.enumerated() {\n        if index % 2 == 0 {\n            l_prime.append(value)\n\
    \        } else {\n            l_prime.append(even_indicies_sorted[index/2])\n\
    \        }\n    }\n    \n    return l_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp71sakh4b/tmp71sakh4b.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1ff3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd1fc34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd1fc34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd1fc337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71sakh4b                        0x000055fa6767a9c3 <unavailable> + 6595

    5    libc.so.6                          0x00002abd20129460 __libc_start_main +
    245

    6    tmp71sakh4b                        0x000055fa6767a419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] =\
    \ []\n    var evens: [Int] = []\n    for (index, value) in l.enumerated() {\n\
    \        if index % 2 == 0 {\n            result.append(value)\n        } else\
    \ {\n            evens.append(value)\n        }\n    }\n    evens.sort()\n   \
    \ for (index, value) in evens.enumerated() {\n        result.insert(value, at:\
    \ index * 2 + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3iq91or9/tmp3iq91or9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ab119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10aae10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10aae10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10aae0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iq91or9                        0x0000555682f889f3 <unavailable> + 6643

    5    libc.so.6                          0x00002b10ab305460 __libc_start_main +
    245

    6    tmp3iq91or9                        0x0000555682f88449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824746
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even_indicies =\
    \ [Int]()\n    var odd_indicies = [Int]()\n    var even_indicies_sorted = [Int]()\n\
    \    var result = [Int]()\n    \n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            odd_indicies.append(l[i])\n        } else {\n          \
    \  even_indicies.append(l[i])\n        }\n    }\n    \n    even_indicies_sorted\
    \ = even_indicies.sorted()\n    \n    for i in 0..<l.count {\n        if i % 2\
    \ == 0 {\n            result.append(odd_indicies[i/2])\n        } else {\n   \
    \         result.append(even_indicies_sorted[i/2])\n        }\n    }\n    \n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpe6_6j8ju/tmpe6_6j8ju.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b317fa97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317f78eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317f78e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b317f78d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6_6j8ju                        0x00005611b3441903 <unavailable> + 6403

    5    libc.so.6                          0x00002b317fc83460 __libc_start_main +
    245

    6    tmpe6_6j8ju                        0x00005611b3441359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824746
