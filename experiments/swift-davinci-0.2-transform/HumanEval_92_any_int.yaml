name: HumanEval_92_any_int
language: swift
prompt: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of\
  \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2,\
  \ z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
  \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
  func any_int(x: Double, y: Double, z: Double) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
  \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
  \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
  \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x:\
  \ 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x:\
  \ 3.0, y: 4, z: 7) == false)"
completions: ['    return (x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0) && (x + y == z || x + z
    == y || y + z == x)', '    return (x == y + z || y == x + z || z == x + y) &&
    (x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0)', "    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x + y == z || x + z == y || y + z == x {\n           \
    \ return true\n        }\n    }\n    return false", '    return (x + y == z ||
    x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0)', "    if (x + y == z) ||\
    \ (x + z == y) || (y + z == x) {\n        return true\n    } else {\n        return\
    \ false\n    }", '    return (x == y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', "    if x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 {\n        if x == y +\
    \ z || y == x + z || z == x + y {\n            return true\n        }\n    }\n\
    \    return false", '    return (x == y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', '    return (x == y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', '    return (x == y + z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0', "    if x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 {\n        if x + y ==\
    \ z || x + z == y || y + z == x {\n            return true\n        }\n    }\n\
    \    return false", '    return (x == y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', '    return (x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0) && (x + y == z || x + z
    == y || y + z == x)', '    return (x.truncatingRemainder(dividingBy: 1) == 0 &&
    y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0) && (x == y + z || y == x + z || z == x + y)', '    return (x == y + z
    || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0', '    return x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0 && (x + y == z || x + z == y || y + z == x)', '    return (x.truncatingRemainder(dividingBy:
    1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:
    1) == 0) && ((x + y == z) || (x + z == y) || (y + z == x))', '    return (x ==
    y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy: 1) ==
    0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', '    return (x + y == z || x + z == y || y + z == x) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)', '    return (x == y + z || y == x + z || z == x + y) && (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0)']
stop_tokens:
- "\n}"
