name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
  \ capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n///\
  \ >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n\
  /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <=\
  \ grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\n\
  func max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var result = 0\n    var max_height = 0\n    for row in grid {\n\
    \        var row_height = 0\n        for well in row {\n            if well ==\
    \ 1 {\n                row_height += 1\n            }\n        }\n        max_height\
    \ = max(max_height, row_height)\n    }\n    for row in grid {\n        var row_height\
    \ = 0\n        for well in row {\n            if well == 1 {\n               \
    \ row_height += 1\n            }\n        }\n        result += max_height - row_height\n\
    \    }\n    return result", "    var result = 0\n    var max_row = 0\n    for\
    \ row in grid {\n        max_row = max(max_row, row.reduce(0, +))\n    }\n   \
    \ for _ in 0..<max_row {\n        for row in grid {\n            for i in 0..<row.count\
    \ {\n                if row[i] > 0 {\n                    row[i] -= 1\n      \
    \              result += 1\n                }\n            }\n        }\n    }\n\
    \    return result", "    var result = 0\n    var grid = grid\n    var max_water\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           max_water = max(max_water, grid[i][j])\n        }\n    }\n    for\
    \ _ in 0..<max_water {\n        for i in 0..<grid.count {\n            for j in\
    \ 0..<grid[i].count {\n                if grid[i][j] > 0 {\n                 \
    \   grid[i][j] -= 1\n                    result += 1\n                }\n    \
    \        }\n        }\n    }\n    return result", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var filled = false\n        for i in 0..<grid.count {\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    filled = true\n                    grid[i][j] = 0\n \
    \                   for k in 0..<capacity {\n                        if i + k\
    \ < grid.count {\n                            grid[i + k][j] = 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n        if !filled {\n            break\n        }\n        count +=\
    \ 1\n    }\n    return count", "    var grid = grid\n    var count = 0\n    for\
    \ i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if\
    \ grid[i][j] == 1 {\n                count += 1\n                for k in 0..<capacity\
    \ {\n                    if i + k < grid.count {\n                        grid[i\
    \ + k][j] = 0\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return count", "    var result = 0\n    var grid = grid\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                result += 1\n                fill(grid:\
    \ &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n  \
    \  return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                result += 1\n            }\n\
    \        }\n    }\n    return result * capacity", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      var row = i\n                while row < grid.count {\n               \
    \     grid[row][j] = 0\n                    row += 1\n                }\n    \
    \        }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var filled = false\n        for i in 0..<grid.count {\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    filled = true\n                    grid[i][j] = 0\n \
    \                   if i > 0 {\n                        grid[i - 1][j] = min(grid[i\
    \ - 1][j] + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j - 1] = min(grid[i][j - 1] + 1, capacity)\n                    }\n\
    \                    if j < grid[i].count - 1 {\n                        grid[i][j\
    \ + 1] = min(grid[i][j + 1] + 1, capacity)\n                    }\n          \
    \      }\n            }\n        }\n        if !filled {\n            break\n\
    \        }\n        count += 1\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          count += 1\n                if i + 1 < grid.count && grid[i + 1][j]\
    \ == 1 {\n                    grid[i + 1][j] = 0\n                }\n        \
    \        if j + 1 < grid[i].count && grid[i][j + 1] == 1 {\n                 \
    \   grid[i][j + 1] = 0\n                }\n            }\n        }\n    }\n \
    \   return count", "    let rows = grid.count\n    let cols = grid[0].count\n\
    \    var grid = grid\n    var count = 0\n    for i in 0..<rows {\n        for\
    \ j in 0..<cols {\n            if grid[i][j] == 1 {\n                count +=\
    \ 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n     \
    \       }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      let bucket = capacity\n                var row = i\n                while\
    \ bucket > 0 && row < grid.count {\n                    if grid[row][j] == 1 {\n\
    \                        grid[row][j] = 0\n                        bucket -= 1\n\
    \                    }\n                    row += 1\n                }\n    \
    \        }\n        }\n    }\n    return count", "    var count = 0\n    var grid\
    \ = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n\
    \            if grid[i][j] == 1 {\n                count += 1\n              \
    \  fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                grid[i][j] = 0\n                count += 1\n       \
    \         if i > 0 {\n                    grid[i - 1][j] = min(grid[i - 1][j]\
    \ + 1, capacity)\n                }\n                if i < grid.count - 1 {\n\
    \                    grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n    \
    \            }\n                if j > 0 {\n                    grid[i][j - 1]\
    \ = min(grid[i][j - 1] + 1, capacity)\n                }\n                if j\
    \ < grid[i].count - 1 {\n                    grid[i][j + 1] = min(grid[i][j +\
    \ 1] + 1, capacity)\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var result = 0\n    var max_height = 0\n    for row in grid {\n\
    \        max_height = max(max_height, row.max() ?? 0)\n    }\n    for height in\
    \ 0..<max_height {\n        for row in grid {\n            for column in row {\n\
    \                if column > height {\n                    result += 1\n     \
    \           }\n            }\n        }\n    }\n    return result", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          count += 1\n                for k in 0..<grid.count {\n           \
    \         for l in 0..<grid[k].count {\n                        if grid[k][l]\
    \ == 1 {\n                            grid[k][l] = 0\n                       \
    \     count += 1\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var grid = grid\n    for row in grid {\n        var bucket = capacity\n\
    \        for column in row {\n            if column == 1 {\n                if\
    \ bucket > 0 {\n                    bucket -= 1\n                } else {\n  \
    \                  count += 1\n                    bucket = capacity - 1\n   \
    \             }\n            }\n        }\n    }\n    return count", "    var\
    \ grid = grid\n    var count = 0\n    while true {\n        var filled = false\n\
    \        for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n\
    \                if grid[i][j] == 1 {\n                    filled = true\n   \
    \                 grid[i][j] = 0\n                    if i > 0 {\n           \
    \             grid[i - 1][j] = min(grid[i - 1][j] + 1, capacity)\n           \
    \         }\n                    if i < grid.count - 1 {\n                   \
    \     grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n                   \
    \ }\n                    if j > 0 {\n                        grid[i][j - 1] =\
    \ min(grid[i][j - 1] + 1, capacity)\n                    }\n                 \
    \   if j < grid[i].count - 1 {\n                        grid[i][j + 1] = min(grid[i][j\
    \ + 1] + 1, capacity)\n                    }\n                }\n            }\n\
    \        }\n        if !filled {\n            break\n        }\n        count\
    \ += 1\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var isEmpty = true\n        for i in 0..<grid.count {\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    isEmpty = false\n                    grid[i][j] = 0\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        if isEmpty {\n            break\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 0 {\n                    grid[i][j] = 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\
    \ / capacity + (count % capacity > 0 ? 1 : 0)", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      if i + 1 < grid.count {\n                    grid[i + 1][j] = 1\n     \
    \           }\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var max_well = 0\n    for row in grid {\n        for well in row {\n\
    \            if well > max_well {\n                max_well = well\n         \
    \   }\n        }\n    }\n    for _ in 0..<max_well {\n        for row in grid\
    \ {\n            for well in row {\n                if well > 0 {\n          \
    \          result += 1\n                }\n            }\n        }\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] > 0 {\n                    grid[i][j] -= 1\n            \
    \    }\n            }\n        }\n    }\n    return result", "    var grid = grid\n\
    \    var count = 0\n    while true {\n        var filled = false\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] == 1 {\n                    filled = true\n             \
    \       grid[i][j] = 0\n                    if i > 0 {\n                     \
    \   grid[i - 1][j] = min(grid[i - 1][j] + 1, capacity)\n                    }\n\
    \                    if i < grid.count - 1 {\n                        grid[i +\
    \ 1][j] = min(grid[i + 1][j] + 1, capacity)\n                    }\n         \
    \           if j > 0 {\n                        grid[i][j - 1] = min(grid[i][j\
    \ - 1] + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j + 1] = min(grid[i][j + 1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var count = 0\n    for i in 0..<grid.count {\n        for j in\
    \ 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count / capacity", "    var\
    \ grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n  \
    \          }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while !grid.isEmpty {\n        let max = grid.map { $0.reduce(0, +) }.max()!\n\
    \        if max == 0 {\n            grid.removeFirst()\n            continue\n\
    \        }\n        if max <= capacity {\n            count += 1\n           \
    \ grid.removeFirst()\n            continue\n        }\n        count += capacity\n\
    \        grid = grid.map { $0.map { $0 - capacity } }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     grid[i][j] = 0\n                count += 1\n                for k in 0..<capacity\
    \ {\n                    if i + k < grid.count && grid[i + k][j] == 1 {\n    \
    \                    grid[i + k][j] = 0\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    while true {\n        var max = 0\n        var max_i =\
    \ 0\n        for i in 0..<grid.count {\n            let sum = grid[i].reduce(0,\
    \ +)\n            if sum > max {\n                max = sum\n                max_i\
    \ = i\n            }\n        }\n        if max == 0 {\n            break\n  \
    \      }\n        grid[max_i] = grid[max_i].map { $0 == 1 ? 0 : $0 }\n       \
    \ count += 1\n    }\n    return count", "    var max_fill = 0\n    for row in\
    \ grid {\n        var bucket = capacity\n        for well in row {\n         \
    \   if well == 1 {\n                bucket -= 1\n            } else {\n      \
    \          bucket = capacity\n            }\n            if bucket == 0 {\n  \
    \              max_fill += 1\n                bucket = capacity\n            }\n\
    \        }\n        max_fill += 1\n    }\n    return max_fill", "    var result\
    \ = 0\n    var max_height = 0\n    for row in grid {\n        for col in row {\n\
    \            if col == 1 {\n                max_height += 1\n            }\n \
    \       }\n    }\n    for i in 0..<max_height {\n        for row in grid {\n \
    \           for col in row {\n                if col == 1 {\n                \
    \    result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                if\
    \ i > 0 && grid[i-1][j] == 1 {\n                    grid[i-1][j] = 0\n       \
    \         }\n                if j > 0 && grid[i][j-1] == 1 {\n               \
    \     grid[i][j-1] = 0\n                }\n            }\n        }\n    }\n \
    \   return count", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         filled = true\n                    grid[i][j] = 0\n                \
    \    if i > 0 {\n                        grid[i - 1][j] = min(grid[i - 1][j] +\
    \ 1, capacity)\n                    }\n                    if i < grid.count -\
    \ 1 {\n                        grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j - 1] = min(grid[i][j - 1] + 1, capacity)\n                    }\n\
    \                    if j < grid[i].count - 1 {\n                        grid[i][j\
    \ + 1] = min(grid[i][j + 1] + 1, capacity)\n                    }\n          \
    \      }\n            }\n        }\n        if filled {\n            count +=\
    \ 1\n        } else {\n            break\n        }\n    }\n    return count",
  "    var count = 0\n    var grid = grid\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                grid = fill(grid: grid, capacity: capacity,\
    \ i: i, j: j)\n            }\n        }\n    }\n    return count", "    var water\
    \ = 0\n    var count = 0\n    for row in grid {\n        for well in row {\n \
    \           if well == 1 {\n                water += 1\n            }\n      \
    \  }\n    }\n    while water > 0 {\n        water -= capacity\n        count +=\
    \ 1\n    }\n    return count", "    var grid = grid\n    var count = 0\n    for\
    \ i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if\
    \ grid[i][j] == 1 {\n                count += 1\n                var k = i\n \
    \               while k < grid.count && grid[k][j] == 1 {\n                  \
    \  grid[k][j] = 0\n                    k += 1\n                }\n           \
    \ }\n        }\n    }\n    return count", "    var result = 0\n    var max = 0\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                max += 1\n            }\n        }\n\
    \    }\n    while result < max {\n        for i in 0..<grid.count {\n        \
    \    for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n    \
    \                grid[i][j] = 0\n                    result += 1\n           \
    \     }\n            }\n        }\n    }\n    return result", "    var buckets\
    \ = Array(repeating: 0, count: grid[0].count)\n    var fillCount = 0\n    for\
    \ row in grid {\n        for (index, well) in row.enumerated() {\n           \
    \ if well == 1 {\n                if buckets[index] < capacity {\n           \
    \         buckets[index] += 1\n                    fillCount += 1\n          \
    \      }\n            }\n        }\n    }\n    return fillCount", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var result = 0\n    var max_height = 0\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                max_height = max(max_height, i)\n\
    \            }\n        }\n    }\n    for i in 0..<max_height {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                result\
    \ += 1\n            }\n        }\n    }\n    return result * capacity", "    let\
    \ rows = grid.count\n    let cols = grid[0].count\n    var count = 0\n    var\
    \ buckets = Array(repeating: 0, count: rows)\n    for col in 0..<cols {\n    \
    \    for row in 0..<rows {\n            if grid[row][col] == 1 {\n           \
    \     buckets[row] += 1\n            }\n        }\n        let max = buckets.max()!\n\
    \        if max > capacity {\n            count += max - capacity\n        }\n\
    \    }\n    return count", "    var count = 0\n    var grid = grid\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                let bucket = Bucket(capacity:\
    \ capacity)\n                bucket.fill(grid: &grid, i: i, j: j)\n          \
    \  }\n        }\n    }\n    return count", "    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\
    \ * capacity", "    var grid = grid\n    var count = 0\n    var column = 0\n \
    \   while column < grid[0].count {\n        var row = 0\n        while row < grid.count\
    \ {\n            if grid[row][column] == 1 {\n                grid[row][column]\
    \ = 0\n                count += 1\n                row += 1\n            } else\
    \ {\n                row += 1\n            }\n        }\n        column += 1\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var full = true\n        for row in 0..<grid.count {\n     \
    \       for col in 0..<grid[row].count {\n                if grid[row][col] ==\
    \ 1 {\n                    full = false\n                    grid[row][col] =\
    \ 0\n                    if row > 0 {\n                        grid[row - 1][col]\
    \ = 1\n                    }\n                    if row < grid.count - 1 {\n\
    \                        grid[row + 1][col] = 1\n                    }\n     \
    \               if col > 0 {\n                        grid[row][col - 1] = 1\n\
    \                    }\n                    if col < grid[row].count - 1 {\n \
    \                       grid[row][col + 1] = 1\n                    }\n      \
    \          }\n            }\n        }\n        if full {\n            break\n\
    \        }\n        count += 1\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                count += 1\n                var k =\
    \ i\n                while k < grid.count && grid[k][j] == 1 {\n             \
    \       grid[k][j] = 0\n                    k += 1\n                }\n      \
    \      }\n        }\n    }\n    return count", "    var result = 0\n    var max_height\
    \ = 0\n    for row in grid {\n        var height = 0\n        for col in row {\n\
    \            if col == 1 {\n                height += 1\n            }\n     \
    \   }\n        if height > max_height {\n            max_height = height\n   \
    \     }\n    }\n    for row in grid {\n        var height = 0\n        for col\
    \ in row {\n            if col == 1 {\n                height += 1\n         \
    \   }\n        }\n        result += max_height - height\n    }\n    return result",
  "    var result = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                result += 1\n         \
    \   }\n        }\n    }\n    return result * capacity", "    var grid = grid\n\
    \    var count = 0\n    while true {\n        var filled = false\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] == 1 {\n                    filled = true\n             \
    \       grid[i][j] = 0\n                    if i > 0 {\n                     \
    \   grid[i - 1][j] = min(grid[i - 1][j] + 1, capacity)\n                    }\n\
    \                    if i < grid.count - 1 {\n                        grid[i +\
    \ 1][j] = min(grid[i + 1][j] + 1, capacity)\n                    }\n         \
    \           if j > 0 {\n                        grid[i][j - 1] = min(grid[i][j\
    \ - 1] + 1, capacity)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j + 1] = min(grid[i][j + 1] + 1, capacity)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, capacity: capacity,\
    \ i: i, j: j)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var result = 0\n    for row in grid {\n\
    \        var row_result = 0\n        for well in row {\n            if well ==\
    \ 1 {\n                row_result += 1\n            }\n        }\n        result\
    \ += row_result / capacity\n        if row_result % capacity != 0 {\n        \
    \    result += 1\n        }\n    }\n    return result", "    var result = 0\n\
    \    var bucket = capacity\n    for row in grid {\n        for well in row {\n\
    \            if well == 1 {\n                if bucket < 1 {\n               \
    \     bucket = capacity\n                    result += 1\n                }\n\
    \                bucket -= 1\n            }\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n\
    \            }\n        }\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    for row in grid {\n        for col in row {\n          \
    \  if col == 1 {\n                count += 1\n            }\n        }\n    }\n\
    \    return count * capacity", "    var grid = grid\n    var count = 0\n    for\
    \ i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if\
    \ grid[i][j] == 1 {\n                count += 1\n                fill(grid: &grid,\
    \ capacity: capacity, i: i, j: j)\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var total\
    \ = 0\n    var max = 0\n    for row in grid {\n        for cell in row {\n   \
    \         if cell == 1 {\n                total += 1\n            }\n        }\n\
    \        if total > max {\n            max = total\n        }\n        total =\
    \ 0\n    }\n    return max * capacity", "    var grid = grid\n    var count =\
    \ 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                count += 1\n                fill(grid:\
    \ &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n  \
    \  return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      var current = i\n                while current < grid.count && grid[current][j]\
    \ == 1 {\n                    grid[current][j] = 0\n                    current\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  '    return 0', "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    for row in grid {\n        var row_sum = 0\n        for well in row\
    \ {\n            row_sum += well\n        }\n        result += row_sum / capacity\n\
    \        if row_sum % capacity != 0 {\n            result += 1\n        }\n  \
    \  }\n    return result", "    var count = 0\n    var max = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                max += 1\n            }\n        }\n    }\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                if\
    \ count == max {\n                    return count\n                }\n      \
    \          if i + 1 < grid.count {\n                    if grid[i + 1][j] == 1\
    \ {\n                        count += 1\n                        grid[i + 1][j]\
    \ = 0\n                        if count == max {\n                           \
    \ return count\n                        }\n                    }\n           \
    \     }\n                if j + 1 < grid[i].count {\n                    if grid[i][j\
    \ + 1] == 1 {\n                        count += 1\n                        grid[i][j\
    \ + 1] = 0\n                        if count == max {\n                      \
    \      return count\n                        }\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count", '    return
    0', "    var max_fill = 0\n    var grid = grid\n    for i in 0..<grid.count {\n\
    \        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n    \
    \            max_fill += 1\n                fill_well(grid: &grid, capacity: capacity,\
    \ i: i, j: j)\n            }\n        }\n    }\n    return max_fill", "    var\
    \ result = 0\n    for i in 0..<grid.count {\n        var row = grid[i]\n     \
    \   var j = 0\n        while j < row.count {\n            if row[j] == 1 {\n \
    \               var k = j\n                while k < row.count && row[k] == 1\
    \ {\n                    row[k] = 0\n                    k += 1\n            \
    \    }\n                result += 1\n                j = k\n            } else\
    \ {\n                j += 1\n            }\n        }\n    }\n    return result",
  "    var count = 0\n    var grid = grid\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                grid = fill(grid: grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for row in grid {\n        for column in row {\n            if column\
    \ == 1 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count / capacity", "    var grid = grid\n    var count = 0\n    var row = 0\n\
    \    var col = 0\n    while row < grid.count {\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          var bucket = capacity\n                while bucket > 0 {\n       \
    \             if row < grid.count && col < grid[row].count && grid[row][col] ==\
    \ 1 {\n                        grid[row][col] = 0\n                        bucket\
    \ -= 1\n                    }\n                    row += 1\n                }\n\
    \                row -= 1\n            }\n            col += 1\n        }\n  \
    \      col = 0\n        row += 1\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          count += 1\n                for k in i..<grid.count {\n           \
    \         if grid[k][j] == 1 {\n                        grid[k][j] = 0\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    filled = true\n                    grid[i][j] = 0\n\
    \                    for k in 0..<capacity {\n                        if i-k >=\
    \ 0 {\n                            grid[i-k][j] = 1\n                        }\n\
    \                        if i+k < grid.count {\n                            grid[i+k][j]\
    \ = 1\n                        }\n                    }\n                }\n \
    \           }\n        }\n        if filled {\n            count += 1\n      \
    \  } else {\n            break\n        }\n    }\n    return count", "    var\
    \ grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                grid[i][j]\
    \ = 0\n                count += 1\n                if i + 1 < grid.count && grid[i\
    \ + 1][j] == 1 {\n                    grid[i + 1][j] = 0\n                }\n\
    \                if j + 1 < grid[i].count && grid[i][j + 1] == 1 {\n         \
    \           grid[i][j + 1] = 0\n                }\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var max_index = 0\n        var max_value = 0\n        for i\
    \ in 0..<grid.count {\n            if grid[i].reduce(0, +) > max_value {\n   \
    \             max_value = grid[i].reduce(0, +)\n                max_index = i\n\
    \            }\n        }\n        if max_value == 0 {\n            break\n  \
    \      }\n        for j in 0..<grid[max_index].count {\n            if grid[max_index][j]\
    \ > 0 {\n                grid[max_index][j] = 0\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var max_fill = 0\n \
    \   for row in grid {\n        var fill = 0\n        for well in row {\n     \
    \       if well == 1 {\n                fill += 1\n            }\n        }\n\
    \        max_fill += fill / capacity\n        if fill % capacity != 0 {\n    \
    \        max_fill += 1\n        }\n    }\n    return max_fill", "    var result\
    \ = 0\n    var max_height = 0\n    for row in grid {\n        max_height = max(max_height,\
    \ row.max() ?? 0)\n    }\n    for height in 1...max_height {\n        for row\
    \ in grid {\n            for well in row {\n                if well >= height\
    \ {\n                    result += 1\n                } else {\n             \
    \       break\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var grid = grid\n    var count = 0\n    while !grid.isEmpty {\n\
    \        var row = grid.removeFirst()\n        var i = 0\n        while i < row.count\
    \ {\n            if row[i] == 1 {\n                count += 1\n              \
    \  row[i] = 0\n                i += capacity\n            } else {\n         \
    \       i += 1\n            }\n        }\n        grid.append(row)\n    }\n  \
    \  return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                if\
    \ i + 1 < grid.count {\n                    grid[i + 1][j] = 1\n             \
    \   }\n            }\n        }\n    }\n    return count", "    var result = 0\n\
    \    var row = 0\n    var col = 0\n    var rowMax = 0\n    var colMax = 0\n  \
    \  var rowMin = 0\n    var colMin = 0\n    var rowSum = 0\n    var colSum = 0\n\
    \    var rowCount = 0\n    var colCount = 0\n    var rowCapacity = 0\n    var\
    \ colCapacity = 0\n    var rowCapacityCount = 0\n    var colCapacityCount = 0\n\
    \    var rowCapacitySum = 0\n    var colCapacitySum = 0\n    var rowCapacityMax\
    \ = 0\n    var colCapacityMax = 0\n    var rowCapacityMin = 0\n    var colCapacityMin\
    \ = 0\n    var rowCapacityCountMax = 0\n    var colCapacityCountMax = 0\n    var\
    \ rowCapacityCountMin = 0\n    var colCapacityCountMin = 0\n    var rowCapacitySumMax\
    \ = 0\n    var colCapacitySumMax = 0\n    var rowCapacitySumMin = 0\n    var colCapacitySumMin\
    \ = 0\n    var rowCapacityMaxMax = 0\n    var colCapacityMaxMax = 0\n    var rowCapacityMaxMin\
    \ = 0\n    var colCapacityMaxMin = 0\n    var rowCapacityMinMax = 0\n    var colCapacityMinMax\
    \ = 0\n    var rowCapacityMinMin = 0\n    var colCapacityMinMin = 0\n    var rowCapacityCountMaxMax\
    \ = 0\n    var colCapacityCountMaxMax = 0\n    var rowCapacityCountMaxMin = 0\n\
    \    var colCapacityCountMaxMin = 0\n    var rowCapacityCountMinMax = 0\n    var\
    \ colCapacityCountMinMax = 0\n    var rowCapacityCountMinMin = 0\n    var colCapacityCountMinMin\
    \ = 0\n    var rowCapacitySumMaxMax = 0\n    var colCapacitySumMaxMax = 0\n  \
    \  var rowCapacitySumMaxMin = 0\n    var colCapacitySumMaxMin = 0\n    var rowCapacitySumMinMax\
    \ = 0\n    var colCapacitySumMinMax = 0\n    var rowCapacitySumMinMin = 0\n  \
    \  var colCapacitySumMinMin = 0\n    var rowCapacityMaxMaxMax = 0\n    var", " \
    \   var grid = grid\n    var count = 0\n    var i = 0\n    while i < grid.count\
    \ {\n        var j = 0\n        while j < grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                var k = i\n            \
    \    while k < grid.count && grid[k][j] == 1 {\n                    grid[k][j]\
    \ = 0\n                    k += 1\n                }\n            }\n        \
    \    j += 1\n        }\n        i += 1\n    }\n    return count", "    var count\
    \ = 0\n    var grid = grid\n    while true {\n        var isEmpty = true\n   \
    \     for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n  \
    \              if grid[i][j] == 1 {\n                    isEmpty = false\n   \
    \                 grid[i][j] = 0\n                    count += 1\n           \
    \     }\n            }\n        }\n        if isEmpty {\n            break\n \
    \       }\n    }\n    return count", "    var count = 0\n    for row in grid {\n\
    \        var sum = 0\n        for well in row {\n            sum += well\n   \
    \         if sum == capacity {\n                count += 1\n                sum\
    \ = 0\n            }\n        }\n        if sum > 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var grid = grid\n    var count = 0\n\
    \    var row = 0\n    var col = 0\n    while row < grid.count {\n        col =\
    \ 0\n        while col < grid[row].count {\n            if grid[row][col] == 1\
    \ {\n                count += 1\n                fill(grid: &grid, row: row, col:\
    \ col, capacity: capacity)\n            }\n            col += 1\n        }\n \
    \       row += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var isEmpty = true\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    isEmpty = false\n                    grid[i][j] = 0\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        if isEmpty {\n            break\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     grid[i][j] = 0\n                count += 1\n                var currentCapacity\
    \ = capacity\n                var currentRow = i\n                while currentCapacity\
    \ > 0 && currentRow < grid.count {\n                    if grid[currentRow][j]\
    \ == 1 {\n                        grid[currentRow][j] = 0\n                  \
    \      currentCapacity -= 1\n                    }\n                    currentRow\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    let row_count = grid.count\n    let\
    \ col_count = grid[0].count\n    var row_index = 0\n    var col_index = 0\n  \
    \  while row_index < row_count {\n        while col_index < col_count {\n    \
    \        if grid[row_index][col_index] == 1 {\n                count += 1\n  \
    \              var row_index_temp = row_index\n                while row_index_temp\
    \ < row_count && grid[row_index_temp][col_index] == 1 {\n                    grid[row_index_temp][col_index]\
    \ = 0\n                    row_index_temp += 1\n                }\n          \
    \  }\n            col_index += 1\n        }\n        row_index += 1\n        col_index\
    \ = 0\n    }\n    return count", "    var total = 0\n    var max = 0\n    var\
    \ count = 0\n    for row in grid {\n        for cell in row {\n            if\
    \ cell == 1 {\n                total += 1\n            }\n        }\n        if\
    \ total > max {\n            max = total\n        }\n        total = 0\n    }\n\
    \    if max == 0 {\n        return 0\n    }\n    if max <= capacity {\n      \
    \  return 1\n    }\n    count = max / capacity\n    if max % capacity != 0 {\n\
    \        count += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    var max = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \  }\n        }\n        if count > max {\n            max = count\n        }\n\
    \        count = 0\n    }\n    return max * capacity", "    var grid = grid\n\
    \    var count = 0\n    var max = 0\n    for i in 0..<grid.count {\n        for\
    \ j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n               \
    \ max = i\n            }\n        }\n    }\n    for i in 0...max {\n        for\
    \ j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n               \
    \ count += 1\n                for k in i..<grid.count {\n                    if\
    \ grid[k][j] == 1 {\n                        grid[k][j] = 0\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count",
  "    var count = 0\n    var max = 0\n    for row in grid {\n        for col in row\
    \ {\n            if col == 1 {\n                count += 1\n            }\n  \
    \      }\n        if count > max {\n            max = count\n        }\n     \
    \   count = 0\n    }\n    return max * capacity", "    var grid = grid\n    var\
    \ count = 0\n    var row = 0\n    var col = 0\n    while row < grid.count {\n\
    \        if grid[row][col] == 1 {\n            grid[row][col] = 0\n          \
    \  count += 1\n        }\n        if col == grid[row].count - 1 {\n          \
    \  row += 1\n            col = 0\n        } else {\n            col += 1\n   \
    \     }\n    }\n    return count", "    var grid = grid\n    var count = 0\n \
    \   for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n        \
    \    if grid[i][j] == 1 {\n                grid[i][j] = 0\n                count\
    \ += 1\n                for k in 0..<capacity {\n                    if i + k\
    \ < grid.count && grid[i + k][j] == 1 {\n                        grid[i + k][j]\
    \ = 0\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return count", "    var grid = grid\n    var count = 0\n    for _ in\
    \ 0..<grid.count {\n        for j in 0..<grid[0].count {\n            if grid[0][j]\
    \ == 1 {\n                count += 1\n                for i in 0..<grid.count\
    \ {\n                    if grid[i][j] == 1 {\n                        grid[i][j]\
    \ = 0\n                    } else {\n                        break\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    while !grid.isEmpty {\n        let row = grid.removeFirst()\n\
    \        var bucket = capacity\n        for i in 0..<row.count {\n           \
    \ if row[i] == 1 {\n                bucket -= 1\n                if bucket ==\
    \ 0 {\n                    count += 1\n                    bucket = capacity\n\
    \                }\n            }\n        }\n        if bucket != capacity {\n\
    \            count += 1\n        }\n    }\n    return count", "    var water =\
    \ 0\n    for row in grid {\n        for well in row {\n            if well ==\
    \ 1 {\n                water += 1\n            }\n        }\n    }\n    return\
    \ water / capacity + (water % capacity > 0 ? 1 : 0)", "    var result = 0\n  \
    \  var max_row = 0\n    for row in grid {\n        max_row = max(max_row, row.reduce(0,\
    \ +))\n    }\n    result += max_row * grid.count\n    for row in grid {\n    \
    \    result += row.reduce(0, { $0 + ($1 == 0 ? 1 : 0) })\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                grid[i][j] = 0\n                if i > 0 {\n\
    \                    grid[i - 1][j] = 0\n                }\n                if\
    \ i < grid.count - 1 {\n                    grid[i + 1][j] = 0\n             \
    \   }\n                if j > 0 {\n                    grid[i][j - 1] = 0\n  \
    \              }\n                if j < grid[i].count - 1 {\n               \
    \     grid[i][j + 1] = 0\n                }\n            }\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    var row = 0\n\
    \    while row < grid.count {\n        var col = 0\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          var bucket = capacity\n                while bucket > 0 && row < grid.count\
    \ {\n                    if grid[row][col] == 1 {\n                        grid[row][col]\
    \ = 0\n                        bucket -= 1\n                    }\n          \
    \          row += 1\n                }\n                row -= 1\n           \
    \ }\n            col += 1\n        }\n        row += 1\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n\
    \            }\n        }\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      for k in 0..<capacity {\n                    if i + k < grid.count {\n\
    \                        grid[i + k][j] = 0\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count", "    var grid =\
    \ grid\n    var count = 0\n    while !grid.isEmpty {\n        let max = grid.map\
    \ { $0.reduce(0, +) }.max()!\n        if max == 0 {\n            grid.removeAll()\n\
    \        } else {\n            grid = grid.map { row in\n                row.map\
    \ { $0 - min($0, capacity) }\n            }\n            count += 1\n        }\n\
    \    }\n    return count", "    var result = 0\n    var max_well = 0\n    for\
    \ row in grid {\n        for well in row {\n            if well > max_well {\n\
    \                max_well = well\n            }\n        }\n    }\n    for _ in\
    \ 0..<max_well {\n        for row in grid {\n            for well in row {\n \
    \               if well > 0 {\n                    result += 1\n             \
    \   }\n            }\n        }\n        for i in 0..<grid.count {\n         \
    \   for j in 0..<grid[i].count {\n                if grid[i][j] > 0 {\n      \
    \              grid[i][j] -= 1\n                }\n            }\n        }\n\
    \    }\n    return result", "    var result = 0\n    var grid = grid\n    for\
    \ i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if\
    \ grid[i][j] == 1 {\n                result += 1\n                grid = fill(grid:\
    \ grid, i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n   \
    \ return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                for k in i..<grid.count {\n     \
    \               if grid[k][j] == 1 {\n                        grid[k][j] = 0\n\
    \                    } else {\n                        break\n               \
    \     }\n                }\n            }\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                for k in 0..<capacity {\n                  \
    \  if i + k < grid.count {\n                        grid[i + k][j] = 0\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var result = 0\n    for row in grid {\n        var current_capacity\
    \ = capacity\n        for well in row {\n            if well == 1 {\n        \
    \        if current_capacity == 0 {\n                    result += 1\n       \
    \             current_capacity = capacity\n                }\n               \
    \ current_capacity -= 1\n            }\n        }\n    }\n    return result",
  "    var result = 0\n    var row = grid.count\n    var col = grid[0].count\n   \
    \ var max_row = [Int](repeating: 0, count: col)\n    var max_col = [Int](repeating:\
    \ 0, count: row)\n    for i in 0..<row {\n        for j in 0..<col {\n       \
    \     if grid[i][j] == 1 {\n                max_row[j] += 1\n                max_col[i]\
    \ += 1\n            }\n        }\n    }\n    for i in 0..<row {\n        for j\
    \ in 0..<col {\n            if grid[i][j] == 1 {\n                result += min(max_row[j],\
    \ max_col[i]) - 1\n            } else {\n                result += min(max_row[j],\
    \ max_col[i])\n            }\n        }\n    }\n    return result * capacity",
  "    var grid = grid\n    var count = 0\n    var row = 0\n    var col = 0\n    var\
    \ row_max = grid.count\n    var col_max = grid[0].count\n    var bucket = capacity\n\
    \    while row < row_max {\n        while col < col_max {\n            if grid[row][col]\
    \ == 1 {\n                if bucket > 0 {\n                    bucket -= 1\n \
    \                   grid[row][col] = 0\n                } else {\n           \
    \         bucket = capacity\n                    count += 1\n                \
    \    col -= 1\n                }\n            }\n            col += 1\n      \
    \  }\n        row += 1\n        col = 0\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    var i = 0\n    while i < grid.count {\n     \
    \   var j = 0\n        while j < grid[i].count {\n            if grid[i][j] ==\
    \ 1 {\n                count += 1\n                var k = i\n               \
    \ while k < grid.count && k < i + capacity {\n                    grid[k][j] =\
    \ 0\n                    k += 1\n                }\n            }\n          \
    \  j += 1\n        }\n        i += 1\n    }\n    return count", "    var result\
    \ = 0\n    var max_height = 0\n    for row in grid {\n        for cell in row\
    \ {\n            if cell == 1 {\n                max_height += 1\n           \
    \ }\n        }\n    }\n    for height in 0..<max_height {\n        for row in\
    \ grid {\n            for cell in row {\n                if cell == 1 {\n    \
    \                result += 1\n                }\n            }\n        }\n  \
    \  }\n    return result", "    var grid = grid\n    var count = 0\n    while true\
    \ {\n        var filled = false\n        for i in 0..<grid.count {\n         \
    \   for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n     \
    \               filled = true\n                    grid[i][j] = 0\n          \
    \          if i > 0 {\n                        grid[i - 1][j] = min(grid[i - 1][j]\
    \ + 1, capacity)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j - 1] = min(grid[i][j - 1] + 1, capacity)\n                    }\n\
    \                    if j < grid[i].count - 1 {\n                        grid[i][j\
    \ + 1] = min(grid[i][j + 1] + 1, capacity)\n                    }\n          \
    \      }\n            }\n        }\n        if !filled {\n            break\n\
    \        }\n        count += 1\n    }\n    return count", "    var result = 0\n\
    \    var max_height = 0\n    for row in grid {\n        max_height = max(max_height,\
    \ row.max() ?? 0)\n    }\n    for height in 1...max_height {\n        var fill_count\
    \ = 0\n        for row in grid {\n            for well in row {\n            \
    \    if well >= height {\n                    fill_count += 1\n              \
    \  }\n            }\n        }\n        result += fill_count / capacity\n    \
    \    if fill_count % capacity != 0 {\n            result += 1\n        }\n   \
    \ }\n    return result", "    var grid = grid\n    var count = 0\n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                fill(grid: &grid, i: i,\
    \ j: j, capacity: capacity)\n            }\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    while !grid.isEmpty {\n        var\
    \ i = 0\n        while i < grid.count {\n            if grid[i].contains(1) {\n\
    \                break\n            }\n            i += 1\n        }\n       \
    \ if i == grid.count {\n            break\n        }\n        var j = 0\n    \
    \    while j < grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     break\n            }\n            j += 1\n        }\n        var k = i\n\
    \        while k < grid.count && k < i + capacity {\n            if grid[k].contains(1)\
    \ {\n                grid[k][j] = 0\n            }\n            k += 1\n     \
    \   }\n        count += 1\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var changed = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    changed = true\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        if !changed {\n            break\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 0 {\n                    var k = i\n                    while k < grid.count\
    \ && grid[k][j] == 0 {\n                        k += 1\n                    }\n\
    \                    if k < grid.count {\n                        grid[k][j] =\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    while !grid.isEmpty\
    \ {\n        let max = grid.map { $0.reduce(0, +) }.max()!\n        if max ==\
    \ 0 {\n            grid.removeLast()\n        } else {\n            grid = grid.map\
    \ { $0.map { $0 - 1 } }\n            count += 1\n        }\n    }\n    return\
    \ count", "    var result = 0\n    var max_height = 0\n    for row in grid {\n\
    \        max_height = max(max_height, row.max() ?? 0)\n    }\n    for height in\
    \ 1...max_height {\n        for row in grid {\n            for well in row {\n\
    \                if well >= height {\n                    result += 1\n      \
    \          } else {\n                    result += capacity\n                }\n\
    \            }\n        }\n    }\n    return result", "    var grid = grid\n \
    \   var count = 0\n    var row = 0\n    var col = 0\n    while row < grid.count\
    \ {\n        while col < grid[row].count {\n            if grid[row][col] == 1\
    \ {\n                count += 1\n                grid[row][col] = 0\n        \
    \        for i in 0..<capacity {\n                    if row + i < grid.count\
    \ {\n                        grid[row + i][col] = 0\n                    }\n \
    \               }\n            }\n            col += 1\n        }\n        col\
    \ = 0\n        row += 1\n    }\n    return count", "    var result = 0\n    var\
    \ i = 0\n    while i < grid.count {\n        var j = 0\n        while j < grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                result += 1\n         \
    \       var k = i\n                while k < grid.count && grid[k][j] == 1 {\n\
    \                    grid[k][j] = 0\n                    k += 1\n            \
    \    }\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var wells = grid\n    var max_height = 0\n    for row in wells {\n\
    \        max_height = max(max_height, row.max() ?? 0)\n    }\n    for i in 0..<max_height\
    \ {\n        for j in 0..<wells.count {\n            for k in 0..<wells[j].count\
    \ {\n                if wells[j][k] > 0 {\n                    wells[j][k] -=\
    \ 1\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result", "    var grid = grid\n    var count = 0\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                grid[i][j] = 0\n                count\
    \ += 1\n                for k in 0..<grid.count {\n                    if grid[k][j]\
    \ == 0 {\n                        grid[k][j] = 1\n                    } else {\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    var i = 0\n    while i < grid.count {\n        var j = 0\n  \
    \      while j < grid[i].count {\n            if grid[i][j] == 1 {\n         \
    \       count += 1\n                var k = 0\n                while k < capacity\
    \ {\n                    if i + k < grid.count {\n                        grid[i\
    \ + k][j] = 0\n                    }\n                    k += 1\n           \
    \     }\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return count", "    var count = 0\n    var grid = grid\n    while !grid.isEmpty\
    \ {\n        let row = grid.removeFirst()\n        var i = 0\n        while i\
    \ < row.count {\n            if row[i] == 1 {\n                count += 1\n  \
    \              i += capacity\n            } else {\n                i += 1\n \
    \           }\n        }\n    }\n    return count", "    var max_fill = 0\n  \
    \  for row in grid {\n        max_fill += row.reduce(0, +)\n    }\n    return\
    \ max_fill / capacity", "    var grid = grid\n    var count = 0\n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                grid[i][j] = 0\n                count += 1\n       \
    \         if i > 0 && grid[i - 1][j] == 1 {\n                    grid[i - 1][j]\
    \ = 0\n                    count += 1\n                }\n                if j\
    \ > 0 && grid[i][j - 1] == 1 {\n                    grid[i][j - 1] = 0\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          count += 1\n                var k = i - 1\n                while k\
    \ >= 0 && capacity > 0 {\n                    if grid[k][j] == 1 {\n         \
    \               grid[k][j] = 0\n                        capacity -= 1\n      \
    \              }\n                    k -= 1\n                }\n            \
    \    capacity = capacity == 0 ? 1 : capacity\n            }\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    var row = 0\n\
    \    while row < grid.count {\n        var col = 0\n        while col < grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          var bucket = capacity\n                while bucket > 0 {\n       \
    \             if row < grid.count {\n                        if grid[row][col]\
    \ == 1 {\n                            grid[row][col] = 0\n                   \
    \         bucket -= 1\n                        }\n                        row\
    \ += 1\n                    } else {\n                        break\n        \
    \            }\n                }\n                row -= 1\n            }\n \
    \           col += 1\n        }\n        row += 1\n    }\n    return count", " \
    \   var grid = grid\n    var count = 0\n    var row = 0\n    var col = 0\n   \
    \ while row < grid.count {\n        while col < grid[row].count {\n          \
    \  if grid[row][col] == 1 {\n                count += 1\n                grid[row][col]\
    \ = 0\n                var i = 1\n                while i <= capacity {\n    \
    \                if row + i < grid.count && grid[row + i][col] == 1 {\n      \
    \                  grid[row + i][col] = 0\n                    }\n           \
    \         if col + i < grid[row].count && grid[row][col + i] == 1 {\n        \
    \                grid[row][col + i] = 0\n                    }\n             \
    \       i += 1\n                }\n            }\n            col += 1\n     \
    \   }\n        col = 0\n        row += 1\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    while !grid.isEmpty {\n        let row = grid.removeFirst()\n\
    \        var bucket = capacity\n        for i in 0..<row.count {\n           \
    \ if row[i] == 1 {\n                bucket -= 1\n                if bucket ==\
    \ 0 {\n                    count += 1\n                    bucket = capacity\n\
    \                }\n            }\n        }\n        if bucket != capacity {\n\
    \            count += 1\n        }\n    }\n    return count", '    return 0',
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     grid[i][j] = 0\n                count += 1\n                if i > 0 {\n\
    \                    grid[i - 1][j] = 0\n                }\n                if\
    \ i < grid.count - 1 {\n                    grid[i + 1][j] = 0\n             \
    \   }\n                if j > 0 {\n                    grid[i][j - 1] = 0\n  \
    \              }\n                if j < grid[i].count - 1 {\n               \
    \     grid[i][j + 1] = 0\n                }\n            }\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                grid[i][j] = 0\n                count += 1\n                for\
    \ k in 0..<capacity {\n                    if i + k < grid.count && grid[i + k][j]\
    \ == 1 {\n                        grid[i + k][j] = 0\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ grid = grid\n    var count = 0\n    for row in 0..<grid.count {\n        for\
    \ col in 0..<grid[row].count {\n            if grid[row][col] == 1 {\n       \
    \         count += 1\n                for i in 0..<capacity {\n              \
    \      if row - i >= 0 {\n                        grid[row - i][col] = 0\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, capacity: capacity,\
    \ i: i, j: j)\n            }\n        }\n    }\n    return count", "    var water_level\
    \ = 0\n    var count = 0\n    for row in grid {\n        for well in row {\n \
    \           if well == 1 {\n                water_level += 1\n            }\n\
    \            if water_level == capacity {\n                count += 1\n      \
    \          water_level = 0\n            }\n        }\n        if water_level >\
    \ 0 {\n            count += 1\n            water_level = 0\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                for\
    \ k in i+1..<grid.count {\n                    if grid[k][j] == 1 {\n        \
    \                grid[k][j] = 0\n                        count += 1\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while true {\n        var\
    \ found = false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    found = true\n\
    \                    count += 1\n                    for k in 0..<capacity {\n\
    \                        if i + k < grid.count {\n                           \
    \ grid[i + k][j] = 0\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        if !found {\n            break\n\
    \        }\n    }\n    return count", "    var grid = grid\n    var count = 0\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                count += 1\n                fill(grid:\
    \ &grid, capacity: capacity, i: i, j: j)\n            }\n        }\n    }\n  \
    \  return count", "    var count = 0\n    var grid = grid\n    var bucket = capacity\n\
    \    for row in grid {\n        for (index, well) in row.enumerated() {\n    \
    \        if well == 1 {\n                if bucket > 0 {\n                   \
    \ bucket -= 1\n                    grid[index][index] = 0\n                } else\
    \ {\n                    bucket = capacity\n                    count += 1\n \
    \               }\n            }\n        }\n    }\n    return count", "    var\
    \ water = 0\n    var count = 0\n    for row in grid {\n        for col in row\
    \ {\n            if col == 1 {\n                water += 1\n            }\n  \
    \      }\n    }\n    while water > 0 {\n        count += 1\n        water -= capacity\n\
    \    }\n    return count", "    var result = 0\n    var max_height = 0\n    for\
    \ row in grid {\n        max_height = max(max_height, row.max() ?? 0)\n    }\n\
    \    for height in 1...max_height {\n        for row in grid {\n            for\
    \ column in row {\n                if column >= height {\n                   \
    \ result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var max_height = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                max_height\
    \ += 1\n            }\n        }\n    }\n    for i in 0..<max_height {\n     \
    \   result += fill_row(grid: grid, capacity: capacity, height: i)\n    }\n   \
    \ return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var max_height = 0\n    for row in grid {\n        for cell in row\
    \ {\n            if cell == 1 {\n                max_height += 1\n           \
    \ }\n        }\n    }\n    for i in 0..<max_height {\n        for row in grid\
    \ {\n            for cell in row {\n                if cell == 1 {\n         \
    \           result += 1\n                }\n            }\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var is_full = true\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         is_full = false\n                    grid[i][j] = 0\n              \
    \      count += 1\n                }\n            }\n        }\n        if is_full\
    \ {\n            break\n        }\n    }\n    return count", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                count += 1\n                grid[i][j]\
    \ = 0\n                var k = i - 1\n                while k >= 0 && capacity\
    \ > 0 {\n                    if grid[k][j] == 1 {\n                        grid[k][j]\
    \ = 0\n                        capacity -= 1\n                    }\n        \
    \            k -= 1\n                }\n                k = i + 1\n          \
    \      while k < grid.count && capacity > 0 {\n                    if grid[k][j]\
    \ == 1 {\n                        grid[k][j] = 0\n                        capacity\
    \ -= 1\n                    }\n                    k += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  while true {\n        var filled = false\n        for i in 0..<grid.count {\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    filled = true\n                    grid[i][j] = 0\n \
    \                   if i > 0 {\n                        grid[i - 1][j] = 1\n \
    \                   }\n                    if i < grid.count - 1 {\n         \
    \               grid[i + 1][j] = 1\n                    }\n                  \
    \  if j > 0 {\n                        grid[i][j - 1] = 1\n                  \
    \  }\n                    if j < grid[i].count - 1 {\n                       \
    \ grid[i][j + 1] = 1\n                    }\n                }\n            }\n\
    \        }\n        if filled {\n            count += 1\n        } else {\n  \
    \          break\n        }\n    }\n    return count", "    var count = 0\n  \
    \  var grid = grid\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  var row = 0\n    var col = 0\n    while row < grid.count {\n        while col\
    \ < grid[row].count {\n            if grid[row][col] == 1 {\n                count\
    \ += 1\n                grid[row][col] = 0\n                if row + 1 < grid.count\
    \ {\n                    grid[row + 1][col] = 1\n                }\n         \
    \   }\n            col += 1\n        }\n        col = 0\n        row += 1\n  \
    \  }\n    return count", "    var result = 0\n    var max_row = 0\n    for row\
    \ in grid {\n        max_row = max(max_row, row.reduce(0, +))\n    }\n    result\
    \ += max_row\n    for row in grid {\n        let sum = row.reduce(0, +)\n    \
    \    if sum < max_row {\n            result += max_row - sum\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                grid[i][j] = 0\n                count += 1\n                if\
    \ i > 0 {\n                    grid[i - 1][j] = min(grid[i - 1][j] + 1, capacity)\n\
    \                }\n                if i < grid.count - 1 {\n                \
    \    grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n                }\n \
    \               if j > 0 {\n                    grid[i][j - 1] = min(grid[i][j\
    \ - 1] + 1, capacity)\n                }\n                if j < grid[i].count\
    \ - 1 {\n                    grid[i][j + 1] = min(grid[i][j + 1] + 1, capacity)\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var grid = grid\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n  \
    \          }\n        }\n    }\n    return count", "    var result = 0\n    var\
    \ row = 0\n    var col = 0\n    var rowCount = grid.count\n    var colCount =\
    \ grid[0].count\n    var temp = 0\n    var tempRow = 0\n    var tempCol = 0\n\
    \    var tempCapacity = capacity\n    var tempGrid = grid\n    while row < rowCount\
    \ {\n        while col < colCount {\n            if tempGrid[row][col] == 1 {\n\
    \                tempCapacity -= 1\n                tempGrid[row][col] = 0\n \
    \               if tempCapacity == 0 {\n                    result += 1\n    \
    \                tempCapacity = capacity\n                    tempRow = row\n\
    \                    tempCol = col\n                }\n            }\n       \
    \     col += 1\n        }\n        row += 1\n        col = 0\n    }\n    if tempCapacity\
    \ != capacity {\n        result += 1\n    }\n    return result", "    // your\
    \ code here\n    return 0", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                var k = i\n            \
    \    while k < grid.count && grid[k][j] == 1 {\n                    grid[k][j]\
    \ = 0\n                    k += 1\n                }\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                grid[i][j] = 0\n                count += 1\n       \
    \         var k = i\n                while k > 0 && grid[k - 1][j] == 0 {\n  \
    \                  grid[k - 1][j] = 1\n                    k -= 1\n          \
    \      }\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                result += 1\n            }\n\
    \        }\n    }\n    return result * capacity", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      for k in 0..<capacity {\n                    if i + k < grid.count {\n\
    \                        grid[i + k][j] = 0\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count", "    var grid =\
    \ grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var count = 0\n    var grid = grid\n  \
    \  for row in grid {\n        var bucket = capacity\n        for i in 0..<row.count\
    \ {\n            if row[i] == 1 {\n                if bucket == 0 {\n        \
    \            count += 1\n                    bucket = capacity\n             \
    \   }\n                bucket -= 1\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while !grid.isEmpty {\n\
    \        var row = grid.removeFirst()\n        while !row.isEmpty {\n        \
    \    let water = row.removeFirst()\n            if water == 1 {\n            \
    \    count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                fill(grid: &grid, i: i, j: j, capacity: capacity)\n  \
    \          }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      grid = fill(grid: grid, i: i, j: j, capacity: capacity)\n            }\n\
    \        }\n    }\n    return count", "    var grid = grid\n    var count = 0\n\
    \    while !grid.isEmpty {\n        var max = 0\n        var maxIndex = 0\n  \
    \      for (index, row) in grid.enumerated() {\n            let rowMax = row.max()\
    \ ?? 0\n            if rowMax > max {\n                max = rowMax\n        \
    \        maxIndex = index\n            }\n        }\n        if max == 0 {\n \
    \           grid.remove(at: maxIndex)\n        } else {\n            for (index,\
    \ _) in grid[maxIndex].enumerated() {\n                if grid[maxIndex][index]\
    \ > 0 {\n                    grid[maxIndex][index] -= 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    var count = 0\n    for i in 0..<grid.count {\n        var sum = 0\n       \
    \ for j in 0..<grid[i].count {\n            sum += grid[i][j]\n        }\n   \
    \     count += sum / capacity\n        if sum % capacity != 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                count += 1\n               \
    \ fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                fill(grid: &grid, i: i,\
    \ j: j, capacity: capacity)\n            }\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    var max_row = 0\n    var max_col =\
    \ 0\n    var max_row_index = 0\n    var max_col_index = 0\n    var max_row_count\
    \ = 0\n    var max_col_count = 0\n    var max_row_index_count = 0\n    var max_col_index_count\
    \ = 0\n    var max_row_index_count_index = 0\n    var max_col_index_count_index\
    \ = 0\n    var max_row_index_count_index_count = 0\n    var max_col_index_count_index_count\
    \ = 0\n    var max_row_index_count_index_count_index = 0\n    var max_col_index_count_index_count_index\
    \ = 0\n    var max_row_index_count_index_count_index_count = 0\n    var max_col_index_count_index_count_index_count\
    \ = 0\n    var max_row_index_count_index_count_index_count_index = 0\n    var\
    \ max_col_index_count_index_count_index_count_index = 0\n    var max_row_index_count_index_count_index_count_index_count\
    \ = 0\n    var max_col_index_count_index_count_index_count_index_count = 0\n \
    \   var max_row_index_count_index_count_index_count_index_count_index = 0\n  \
    \  var max_col_index_count_index_count_index_count_index_count_index = 0\n   \
    \ var max_row_index_count_index_count_index_count_index_count_index_count = 0\n\
    \    var max_col_index_count_index_count_index_count_index_count_index_count =\
    \ 0\n    var max_row_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var max_col_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var max_row_index_count_index_count_index_count_index_count_index",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i - 1][j] = min(grid[i - 1][j] + 1, capacity)\n        \
    \            }\n                    if i < grid.count - 1 {\n                \
    \        grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n                \
    \    }\n                    if j > 0 {\n                        grid[i][j - 1]\
    \ = min(grid[i][j - 1] + 1, capacity)\n                    }\n               \
    \     if j < grid[i].count - 1 {\n                        grid[i][j + 1] = min(grid[i][j\
    \ + 1] + 1, capacity)\n                    }\n                }\n            }\n\
    \        }\n        if !filled {\n            break\n        }\n        count\
    \ += 1\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                count += 1\n                fill(grid:\
    \ &grid, capacity: capacity, i: i, j: j)\n            }\n        }\n    }\n  \
    \  return count", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var isEmpty = true\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         isEmpty = false\n                    grid[i][j] = 0\n              \
    \      count += 1\n                }\n            }\n        }\n        if isEmpty\
    \ {\n            break\n        }\n        for i in 0..<grid.count {\n       \
    \     for j in 0..<grid[i].count {\n                if grid[i][j] == 0 {\n   \
    \                 grid[i][j] = 1\n                }\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    while\
    \ !grid.isEmpty {\n        var row = grid.removeFirst()\n        while !row.isEmpty\
    \ {\n            row.removeFirst()\n            count += 1\n        }\n    }\n\
    \    return count / capacity", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var max = 0\n        var max_i = 0\n        for i in 0..<grid.count\
    \ {\n            var sum = 0\n            for j in 0..<grid[i].count {\n     \
    \           sum += grid[i][j]\n            }\n            if sum > max {\n   \
    \             max = sum\n                max_i = i\n            }\n        }\n\
    \        if max == 0 {\n            break\n        }\n        for j in 0..<grid[max_i].count\
    \ {\n            grid[max_i][j] = 0\n        }\n        count += 1\n    }\n  \
    \  return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, capacity: capacity,\
    \ i: i, j: j)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    var max_height = 0\n    for row in grid {\n        max_height = max(max_height,\
    \ row.max() ?? 0)\n    }\n    for row in grid {\n        for col in row {\n  \
    \          if col < max_height {\n                result += max_height - col\n\
    \            }\n        }\n    }\n    return result", "    var result = 0\n  \
    \  for row in grid {\n        var bucket = capacity\n        for well in row {\n\
    \            if well == 1 {\n                if bucket == 0 {\n              \
    \      result += 1\n                    bucket = capacity\n                }\n\
    \                bucket -= 1\n            }\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    for row in grid {\n        for (index,\
    \ value) in row.enumerated() {\n            if value == 1 {\n                count\
    \ += 1\n                for i in index..<row.count {\n                    if row[i]\
    \ == 1 {\n                        row[i] = 0\n                    } else {\n \
    \                       break\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return count", "    var result = 0\n    var\
    \ max_value = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                max_value += 1\n      \
    \      }\n        }\n    }\n    var current_value = 0\n    while current_value\
    \ < max_value {\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    grid[i][j] = 0\n\
    \                    current_value += 1\n                    if current_value\
    \ == max_value {\n                        return result\n                    }\n\
    \                }\n            }\n            result += 1\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid = fill(grid: grid, capacity:\
    \ capacity, i: i, j: j)\n            }\n        }\n    }\n    return count", " \
    \   var count = 0\n    var grid = grid\n    for row in grid {\n        for i in\
    \ 0..<row.count {\n            if row[i] == 1 {\n                count += 1\n\
    \                for j in i..<row.count {\n                    if row[j] == 1\
    \ {\n                        row[j] = 0\n                    } else {\n      \
    \                  break\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    grid[i][j] = 0\n                    filled = true\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        if !filled {\n            break\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 0 {\n                    grid[i][j] = 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    for row in grid\
    \ {\n        var bucket = capacity\n        for well in row {\n            if\
    \ well == 1 {\n                if bucket > 0 {\n                    bucket -=\
    \ 1\n                } else {\n                    count += 1\n              \
    \      bucket = capacity - 1\n                }\n            }\n        }\n  \
    \  }\n    return count", "    var result = 0\n    for row in grid {\n        var\
    \ current = 0\n        for column in row {\n            if column == 1 {\n   \
    \             current += 1\n            } else {\n                if current >\
    \ 0 {\n                    result += 1\n                    current = 0\n    \
    \            }\n            }\n        }\n        if current > 0 {\n         \
    \   result += 1\n        }\n    }\n    return result * capacity", "    var count\
    \ = 0\n    for i in 0..<grid.count {\n        var sum = 0\n        for j in 0..<grid[i].count\
    \ {\n            sum += grid[i][j]\n        }\n        count += sum / capacity\n\
    \        if sum % capacity != 0 {\n            count += 1\n        }\n    }\n\
    \    return count", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    for row in 0..<grid.count {\n        for col\
    \ in 0..<grid[row].count {\n            if grid[row][col] == 1 {\n           \
    \     count += 1\n                fill(grid: &grid, row: row, col: col, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var buckets\
    \ = Array(repeating: 0, count: grid[0].count)\n    var count = 0\n    for row\
    \ in grid {\n        for (index, well) in row.enumerated() {\n            if well\
    \ == 1 {\n                buckets[index] += 1\n            }\n        }\n    \
    \    count += fill(buckets: &buckets, capacity: capacity)\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    var row = 0\n    while row < grid.count\
    \ {\n        var col = 0\n        while col < grid[row].count {\n            if\
    \ grid[row][col] == 1 {\n                count += 1\n                var row_\
    \ = row\n                while row_ < grid.count && grid[row_][col] == 1 {\n \
    \                   grid[row_][col] = 0\n                    row_ += 1\n     \
    \           }\n            }\n            col += 1\n        }\n        row +=\
    \ 1\n    }\n    return count", "    var water = 0\n    var max = 0\n    for row\
    \ in grid {\n        for well in row {\n            if well == 1 {\n         \
    \       water += 1\n            }\n        }\n        if water > max {\n     \
    \       max = water\n        }\n        water = 0\n    }\n    return max / capacity"]
stop_tokens:
- "\n}"
