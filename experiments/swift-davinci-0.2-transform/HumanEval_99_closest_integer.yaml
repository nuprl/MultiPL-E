name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value:\
  \ \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n\
  /// Rounding away from zero means that if the given number is equidistant\n/// from\
  \ two integers, the one you should return is the one that is the\n/// farthest from\
  \ zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    let floor = Int(number.rounded(.down))\n    let ceil = Int(number.rounded(.up))\n\
    \    if abs(number - Double(rounded)) == 0.5 {\n        if number > 0 {\n    \
    \        return ceil\n        } else {\n            return floor\n        }\n\
    \    } else {\n        return rounded\n    }", "    let number = Double(value)!\n\
    \    let rounded = round(number)\n    return Int(rounded)", "    let number =\
    \ Double(value)!\n    let rounded = Int(number.rounded())\n    let decimal = number\
    \ - Double(rounded)\n    if decimal > 0.5 {\n        return rounded + 1\n    }\
    \ else if decimal < -0.5 {\n        return rounded - 1\n    } else {\n       \
    \ return rounded\n    }", "    let number = Double(value)!\n    return Int(number.rounded(.awayFromZero))",
  "    let num = Double(value)!\n    return Int(num.rounded(.awayFromZero))", "  \
    \  let number = Double(value)!\n    let rounded = round(number)\n    let integer\
    \ = Int(rounded)\n    return integer", "    let number = Double(value)!\n    let\
    \ rounded = Int(number.rounded())\n    let floor = Int(number.rounded(.down))\n\
    \    let ceil = Int(number.rounded(.up))\n    if number - Double(floor) < Double(ceil)\
    \ - number {\n        return floor\n    } else {\n        return ceil\n    }",
  "    let number = Double(value)!\n    let rounded = round(number)\n    if number\
    \ - rounded >= 0.5 {\n        return Int(rounded + 1)\n    } else {\n        return\
    \ Int(rounded)\n    }", "    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    let floored = Int(number.rounded(.down))\n    let ceiled = Int(number.rounded(.up))\n\
    \    if abs(number - Double(rounded)) < abs(number - Double(floored)) {\n    \
    \    return rounded\n    } else if abs(number - Double(rounded)) < abs(number\
    \ - Double(ceiled)) {\n        return rounded\n    } else if abs(number - Double(floored))\
    \ < abs(number - Double(ceiled)) {\n        return floored\n    } else {\n   \
    \     return ceiled\n    }", "    let number = Double(value)!\n    let integer\
    \ = Int(number)\n    let decimal = number - Double(integer)\n    if decimal <\
    \ 0.5 {\n        return integer\n    } else {\n        return integer + 1\n  \
    \  }", "    let number = Double(value)!\n    let rounded = round(number)\n   \
    \ return Int(rounded)", "    let doubleValue = Double(value)!\n    let intValue\
    \ = Int(doubleValue)\n    let decimal = doubleValue - Double(intValue)\n    if\
    \ decimal >= 0.5 {\n        return intValue + 1\n    } else {\n        return\
    \ intValue\n    }", "    let number = Double(value)!\n    let floor = Int(floor(number))\n\
    \    let ceil = Int(ceil(number))\n    if number - Double(floor) < 0.5 {\n   \
    \     return floor\n    } else {\n        return ceil\n    }", "    let number\
    \ = Double(value)!\n    let rounded = round(number)\n    let roundedInt = Int(rounded)\n\
    \    let decimal = number - rounded\n    if decimal > 0.5 {\n        return roundedInt\
    \ + 1\n    } else if decimal < -0.5 {\n        return roundedInt - 1\n    } else\
    \ {\n        return roundedInt\n    }", "    let doubleValue = Double(value)!\n\
    \    let roundedValue = round(doubleValue)\n    let intValue = Int(roundedValue)\n\
    \    return intValue", "    let number = Double(value)!\n    let rounded = round(number)\n\
    \    let int = Int(rounded)\n    return int", "    let num = Double(value)!\n\
    \    let int = Int(num)\n    let decimal = num - Double(int)\n    if decimal >=\
    \ 0.5 {\n        return int + 1\n    } else {\n        return int\n    }", " \
    \   let num = Double(value)!\n    let int = Int(num)\n    let decimal = num -\
    \ Double(int)\n    if decimal >= 0.5 {\n        return int + 1\n    } else {\n\
    \        return int\n    }", "    let doubleValue = Double(value)!\n    let intValue\
    \ = Int(doubleValue)\n    let decimal = doubleValue - Double(intValue)\n    if\
    \ decimal >= 0.5 {\n        return intValue + 1\n    } else {\n        return\
    \ intValue\n    }", "    let doubleValue = Double(value)!\n    let intValue =\
    \ Int(doubleValue)\n    let decimalValue = doubleValue - Double(intValue)\n  \
    \  if decimalValue >= 0.5 {\n        return intValue + 1\n    } else {\n     \
    \   return intValue\n    }"]
stop_tokens:
- "\n}"
